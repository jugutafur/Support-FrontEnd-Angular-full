{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class FundamentosProgramacionComponent {\n  constructor() {}\n  ngOnInit() {}\n}\nFundamentosProgramacionComponent.ɵfac = function FundamentosProgramacionComponent_Factory(t) {\n  return new (t || FundamentosProgramacionComponent)();\n};\nFundamentosProgramacionComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FundamentosProgramacionComponent,\n  selectors: [[\"app-fundamentos-programacion\"]],\n  decls: 233,\n  vars: 0,\n  consts: [[1, \"container\"], [1, \"table\", \"table-striped\", \"table-hover\", \"table-bordered\", \"align-middle\"], [\"scope\", \"col\"], [\"src\", \"../../../../../../assets/transversales/Fundamentos Programacion/pensamiento Critico.png\", \"alt\", \"solucion de problemas\"], [\"href\", \"https://github.com/carta87/MisionTic/blob/master/MisoinTic%20ciclo1/Programacion/Ejemplo%20para%20palicar%20%20IDEAL.pdf\"], [\"src\", \"../../../../../../assets/transversales/Fundamentos Programacion/metodo ideal.png\", \"alt\", \"metodo ideal\"], [\"href\", \"https://support1.netlify.app/test-java\"], [\"src\", \"../../../../../../assets/transversales/Fundamentos Programacion/verbosInfinitos.jpg\", \"alt\", \"verbosInfinitos\"], [\"src\", \"../../../../../../assets/transversales/Fundamentos Programacion/diagramade flujo.png\", \"alt\", \"\"], [\"colspan\", \"3\"], [\"src\", \"../../../../../../assets/transversales/Fundamentos Programacion/algortimo.png\", \"alt\", \"algotitmo\"], [\"src\", \"../../../../../../assets/transversales/Fundamentos Programacion/sintaxis.png\", \"alt\", \"sintaxis\"]],\n  template: function FundamentosProgramacionComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"table\", 1)(2, \"thead\")(3, \"tr\")(4, \"th\", 2);\n      i0.ɵɵtext(5, \"Referencia\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"th\", 2);\n      i0.ɵɵtext(7, \"Descripcion\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"th\", 2);\n      i0.ɵɵtext(9, \"Ejemplo\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(10, \"tbody\")(11, \"tr\")(12, \"td\")(13, \"strong\");\n      i0.ɵɵtext(14, \"Conceptos Basicos\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"td\");\n      i0.ɵɵtext(16, \" * Codigo Fuente: conjunto de instruciones que interpreta el computador atravez de un lenguaje de programacion \");\n      i0.ɵɵelement(17, \"br\");\n      i0.ɵɵtext(18, \" * Sintaxis: especifica el orden de las palabras y simbolos en las expresiones. Ejemplo x = 8 +2 \");\n      i0.ɵɵelement(19, \"br\");\n      i0.ɵɵtext(20, \" * Semantica: expecifica el significado de las expresiones. En el anterior ejemplo es que me refiero a una suma \");\n      i0.ɵɵelement(21, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"td\");\n      i0.ɵɵtext(23, \" * Origin de la estrategia Dividir y conquistaras: es una vieja idea del emperador Julio Cesar que practicaba en sus peleas y en su manera de gobernar \");\n      i0.ɵɵelement(24, \"br\");\n      i0.ɵɵtext(25, \" * \");\n      i0.ɵɵelementStart(26, \"strong\");\n      i0.ɵɵtext(27, \"Dividir y conquistaras en campo computacional \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(28, \" esta tecnica propone dividir un problema en varios \");\n      i0.ɵɵelementStart(29, \"strong\");\n      i0.ɵɵtext(30, \"sub problemas\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(31, \" mas peque\\u00F1os y resolver cada uno de manera independiente. la \");\n      i0.ɵɵelementStart(32, \"strong\");\n      i0.ɵɵtext(33, \"solucion \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(34, \" de todos los sub problemas es \");\n      i0.ɵɵelementStart(35, \"strong\");\n      i0.ɵɵtext(36, \"combinada\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(37, \" para finalmente obtener la solucion del problema original \");\n      i0.ɵɵelement(38, \"br\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(39, \"tr\")(40, \"td\")(41, \"strong\");\n      i0.ɵɵtext(42, \"Pensamiento Critico o Analisis Critico\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(43, \" no es como el dicho comenzemos que en el camino vemos\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(44, \"td\");\n      i0.ɵɵtext(45, \"Definicion: se entiende como el proceso de evaluar y eligir a travez del \");\n      i0.ɵɵelementStart(46, \"strong\");\n      i0.ɵɵtext(47, \"razonamiento y la voluntad,\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(48, \" una determinada \");\n      i0.ɵɵelementStart(49, \"strong\");\n      i0.ɵɵtext(50, \"opcion\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(51, \" en medio de un universo de \");\n      i0.ɵɵelementStart(52, \"strong\");\n      i0.ɵɵtext(53, \"posibilidades\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(54, \", con el proposito de resolver una situcion \");\n      i0.ɵɵelementStart(55, \"strong\");\n      i0.ɵɵtext(56, \"concreta.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(57, \" Pilares: \");\n      i0.ɵɵelement(58, \"br\");\n      i0.ɵɵtext(59, \" 1. curiosidad: Preguntar, es la opcion mas eficaz, Documentacion. \");\n      i0.ɵɵelement(60, \"br\");\n      i0.ɵɵtext(61, \" 2. Razonamiento: Contexto es decir no fijarnos solo en los detalles: anilizar \");\n      i0.ɵɵelement(62, \"br\");\n      i0.ɵɵtext(63, \" 3. Logica: desarrollo del sentido comun. hasta el grado de argumentar mi posicion \");\n      i0.ɵɵelement(64, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(65, \"td\")(66, \"strong\");\n      i0.ɵɵtext(67, \"Cualidades\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(68, \" 1. Calaridad: esponer sus ideas y para hace preguntas dando razonamientos claros y con argumento. \");\n      i0.ɵɵelement(69, \"br\");\n      i0.ɵɵtext(70, \" 2. Contextualizacion: entiende el panorama general del problema y el problema Basico \");\n      i0.ɵɵelement(71, \"br\");\n      i0.ɵɵtext(72, \" 3. Mente abierta: considera seriamente otros puntos de vista y esta alerta a escuchar alternativas \");\n      i0.ɵɵelement(73, \"br\");\n      i0.ɵɵtext(74, \" 4. bien Informado: utilizando fuentes confiables y las referencia. \");\n      i0.ɵɵelement(75, \"br\");\n      i0.ɵɵtext(76, \" 5. Paciente: espera tener sufiente evidencia antes de emitir juicios y cambia de posicion ante evidencias \");\n      i0.ɵɵelement(77, \"br\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(78, \"tr\")(79, \"td\")(80, \"strong\");\n      i0.ɵɵtext(81, \"Solucion de problemas\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(82, \"td\")(83, \"strong\");\n      i0.ɵɵtext(84, \"* Especializacion: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(85, \"es una tecnica para utilitzar ejemplos particulares y especificos que abarquen el contexto del problema para brindarnos una idea cual puede ser el camino a la respueseta concreta y sus argumentos \");\n      i0.ɵɵelement(86, \"br\");\n      i0.ɵɵelementStart(87, \"strong\");\n      i0.ɵɵtext(88, \"* Generializar: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(89, \"al obtener resultados especificos son utiles y nos ayudan a buscar una respuesta general (patron, metodo, algotitmo). \");\n      i0.ɵɵelement(90, \"br\");\n      i0.ɵɵtext(91, \" Nota: para lograr desarrollar logica adecuada es util seguir el proceso: como se indica en la imagen de tres pasos \");\n      i0.ɵɵelement(92, \"br\")(93, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(94, \"td\");\n      i0.ɵɵelement(95, \"img\", 3);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(96, \"tr\")(97, \"td\")(98, \"strong\");\n      i0.ɵɵtext(99, \"Metodo ideal para Solucion computacional\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(100, \" Es el preceso de aboradar un \");\n      i0.ɵɵelementStart(101, \"strong\");\n      i0.ɵɵtext(102, \"Problema\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(103, \" de manera \");\n      i0.ɵɵelementStart(104, \"strong\");\n      i0.ɵɵtext(105, \"sitematica\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(106, \" para crear(codificar) una \");\n      i0.ɵɵelementStart(107, \"strong\");\n      i0.ɵɵtext(108, \"solucion\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(109, \" que pueda ser realizada o ejecutada por un \");\n      i0.ɵɵelementStart(110, \"strong\");\n      i0.ɵɵtext(111, \"dispositivo computacional.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(112, \"br\");\n      i0.ɵɵtext(113, \" Nota: sistematico metodo de ordenacion, organizacion o clasificacion de elementos, es decir se estroctura una serie de tarias para elaborar el programa. ademas en el proceso internamente esta constituido por una secuencia de tareas en un orden determinado y con objectivos especificos que ayudan a construir el programa y su solucion\");\n      i0.ɵɵelement(114, \"br\")(115, \"br\");\n      i0.ɵɵelementStart(116, \"a\", 4);\n      i0.ɵɵtext(117, \" Ejemplo\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(118, \"td\")(119, \"strong\");\n      i0.ɵɵtext(120, \"I\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(121, \"dentificar y convertirlo en una oportunidad para desarrollar una solucion creativa \");\n      i0.ɵɵelement(122, \"br\");\n      i0.ɵɵelementStart(123, \"strong\");\n      i0.ɵɵtext(124, \"D\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(125, \"efine la informacion que es util, lo que desean y necesitan los interesados. ademas de las tareas o funciones que llevan a la solucion \");\n      i0.ɵɵelement(126, \"br\");\n      i0.ɵɵelementStart(127, \"strong\");\n      i0.ɵɵtext(128, \"E\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(129, \"strategia es explorar alternativas de solucion mediante la realizacion de ejemplos de ejemplos particulares (Especializacion) \");\n      i0.ɵɵelement(130, \"br\");\n      i0.ɵɵtext(131, \" para plantear una estrategia general (generializacion). \");\n      i0.ɵɵelement(132, \"br\");\n      i0.ɵɵelementStart(133, \"strong\");\n      i0.ɵɵtext(134, \"A\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(135, \"lgotitmo(el como) se dise\\u00F1a la soluccion de forma detallada, especificando el conjunto de algotitmo para solucionar el problema planteado \");\n      i0.ɵɵelement(136, \"br\");\n      i0.ɵɵelementStart(137, \"strong\");\n      i0.ɵɵtext(138, \"L\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(139, \"ogro: se implementa la solucion en un \");\n      i0.ɵɵelementStart(140, \"strong\");\n      i0.ɵɵtext(141, \"lenguaje de Programacion y se valida \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(142, \" el programa en un conjunto de pruebas \");\n      i0.ɵɵelement(143, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(144, \"td\");\n      i0.ɵɵelement(145, \"img\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(146, \"tr\")(147, \"td\")(148, \"strong\");\n      i0.ɵɵtext(149, \"algotitmo\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(150, \" es una secuencia finita de instruciones precisas(no ambiguas) que realiza una tarea especifica para solucionar un problema \");\n      i0.ɵɵelement(151, \"br\");\n      i0.ɵɵelementStart(152, \"strong\");\n      i0.ɵɵtext(153, \"Flujo de control:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(154, \" es el orden en que realiza las instruciones \");\n      i0.ɵɵelement(155, \"br\");\n      i0.ɵɵelementStart(156, \"strong\")(157, \"a\", 6);\n      i0.ɵɵtext(158, \"Requirimiento\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(159, \" o Requisito de software:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(160, \" define una \");\n      i0.ɵɵelementStart(161, \"strong\");\n      i0.ɵɵtext(162, \"funcion\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(163, \" que el programa que se va construir bebe proporcionar para contribuir a \");\n      i0.ɵɵelementStart(164, \"strong\");\n      i0.ɵɵtext(165, \"solucionar un problema\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(166, \" en un contexto real \");\n      i0.ɵɵelement(167, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(168, \"td\");\n      i0.ɵɵtext(169, \"Pseudocodigo es una especie de programa escrito en un lenguaje de programacion, que igual a espa\\u00F1ol permite escribir ideas. \");\n      i0.ɵɵelement(170, \"br\");\n      i0.ɵɵtext(171, \" si bien la idea del Pseudocodigo es que sea mas flejible, hay que tener unas consideraciones al escribir un algotitmo en Pseudocodigo, al usar verbos en infinitivo (ingresar, leer, obtener) que serviran para expresar los algortimos \");\n      i0.ɵɵelement(172, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(173, \"td\");\n      i0.ɵɵelement(174, \"img\", 7);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(175, \"tr\")(176, \"td\")(177, \"strong\");\n      i0.ɵɵtext(178, \"Diagramade flujo\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(179, \" es la representacion visual de nuestros algortimos: que muestra los pasos en varias cuadros y muestra el proceso conectando los cuadros entre si\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(180, \"td\")(181, \"strong\");\n      i0.ɵɵtext(182, \"Partes de un algortimo\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(183, \"br\");\n      i0.ɵɵtext(184, \" * Input o entrada: es el ingreso de datos que necesita el algortimo para funcionar \");\n      i0.ɵɵelement(185, \"br\");\n      i0.ɵɵtext(186, \" * Proceso: se trata la operacion logica formal que el algortimo emprendera con lo recibido del imput \");\n      i0.ɵɵelement(187, \"br\");\n      i0.ɵɵtext(188, \" * Output o salida: los resultados obtenidos del proceso sobre el input, una vez terminada la ejecucion del algortimo \");\n      i0.ɵɵelement(189, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(190, \"td\");\n      i0.ɵɵelement(191, \"img\", 8);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(192, \"tr\")(193, \"td\", 9);\n      i0.ɵɵelement(194, \"img\", 10);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(195, \"tr\")(196, \"td\")(197, \"strong\");\n      i0.ɵɵtext(198, \"Que es Programar\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(199, \"td\");\n      i0.ɵɵtext(200, \"es una \");\n      i0.ɵɵelementStart(201, \"strong\");\n      i0.ɵɵtext(202, \"conjunto de instruciones\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(203, \" escritas en un \");\n      i0.ɵɵelementStart(204, \"strong\");\n      i0.ɵɵtext(205, \"Lenguaje de programcion\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(206, \" que realizan una o varias tares especificas cuando son ejecutadas por un \");\n      i0.ɵɵelementStart(207, \"strong\");\n      i0.ɵɵtext(208, \"dispositivo computacional\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(209, \"td\");\n      i0.ɵɵelement(210, \"img\", 11);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(211, \"tr\")(212, \"td\");\n      i0.ɵɵtext(213, \"Recolector de Basura\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(214, \"td\");\n      i0.ɵɵtext(215, \" la maquina virtual de Java libera de la memoria los objetos los cuales el codigo no hace referencia y como lo hace?? \");\n      i0.ɵɵelement(216, \"br\")(217, \"br\");\n      i0.ɵɵtext(218, \" java maneja una pila donde tiene todos los objetos y en el momento donde nadie tenga un apuntador hacia uno de ellos el recolector lo saca de la pila \");\n      i0.ɵɵelement(219, \"br\")(220, \"br\");\n      i0.ɵɵtext(221, \" 1.ro \");\n      i0.ɵɵelementStart(222, \"strong\");\n      i0.ɵɵtext(223, \"lo marca\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(224, \"br\");\n      i0.ɵɵtext(225, \"2.do \");\n      i0.ɵɵelementStart(226, \"strong\");\n      i0.ɵɵtext(227, \"lo borro\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(228, \"br\");\n      i0.ɵɵtext(229, \"3.ro \");\n      i0.ɵɵelementStart(230, \"strong\");\n      i0.ɵɵtext(231, \"reorganiza la pila\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(232, \"td\");\n      i0.ɵɵelementEnd()()()();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FundamentosProgramacionComponent","constructor","ngOnInit","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\HP\\Desktop\\juanTafur\\jugutafur\\Support-FrontEnd-Angular-full\\src\\app\\core\\components\\transversales\\components\\fundamentos-programacion\\fundamentos-programacion.component.ts","C:\\Users\\HP\\Desktop\\juanTafur\\jugutafur\\Support-FrontEnd-Angular-full\\src\\app\\core\\components\\transversales\\components\\fundamentos-programacion\\fundamentos-programacion.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-fundamentos-programacion',\r\n  templateUrl: './fundamentos-programacion.component.html',\r\n  styleUrls: ['./fundamentos-programacion.component.scss']\r\n})\r\nexport class FundamentosProgramacionComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n    <table class=\"table table-striped table-hover table-bordered align-middle\">\r\n        <thead>\r\n            <tr>\r\n                <th scope=\"col\">Referencia</th>\r\n                <th scope=\"col\">Descripcion</th>\r\n                <th scope=\"col\">Ejemplo</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr>\r\n                <td><strong>Conceptos Basicos</strong></td>\r\n                <td>\r\n                    * Codigo Fuente: conjunto de instruciones que interpreta el computador atravez de un lenguaje de programacion <br>\r\n                    * Sintaxis: especifica el orden de las palabras y simbolos en las expresiones. Ejemplo x = 8 +2 <br>\r\n                    * Semantica: expecifica el significado de las expresiones.  En el anterior ejemplo es que me refiero a una suma <br>\r\n                </td>\r\n                <td>\r\n                    * Origin de la estrategia Dividir y conquistaras: es una vieja idea del emperador Julio Cesar que practicaba en sus\r\n                      peleas y en su manera de gobernar <br>\r\n                    * <strong>Dividir y conquistaras en campo computacional </strong> esta tecnica propone dividir un  problema en varios\r\n                      <strong>sub problemas</strong> mas pequeños y resolver cada uno de manera independiente. la  <strong>solucion </strong>\r\n                      de todos los sub problemas es <strong>combinada</strong> para finalmente obtener la solucion del problema original <br>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td><strong>Pensamiento Critico o Analisis Critico</strong> no es como el dicho comenzemos que en el camino vemos</td>\r\n                <td>Definicion: se entiende como el proceso de evaluar y eligir a travez del <strong>razonamiento y la voluntad,</strong> una determinada <strong>opcion</strong>\r\n                    en medio de un universo de <strong>posibilidades</strong>, con el proposito de resolver una situcion <strong>concreta.</strong> Pilares: <br>\r\n                      1. curiosidad: Preguntar, es la opcion mas eficaz, Documentacion. <br>\r\n                      2. Razonamiento: Contexto es decir no fijarnos solo en los detalles: anilizar <br>\r\n                      3. Logica: desarrollo del sentido comun. hasta el grado de argumentar mi posicion <br>\r\n                    </td>\r\n\r\n                <td>\r\n                    <strong>Cualidades</strong>\r\n                    1. Calaridad: esponer sus ideas y para hace preguntas dando razonamientos claros y con argumento. <br>\r\n                    2. Contextualizacion: entiende el panorama general del problema y el problema Basico <br>\r\n                    3. Mente abierta: considera seriamente otros puntos de vista y esta alerta a escuchar alternativas <br>\r\n                    4. bien Informado: utilizando fuentes confiables y las referencia. <br>\r\n                    5. Paciente: espera tener sufiente evidencia antes de emitir juicios y cambia de posicion ante evidencias <br>\r\n\r\n\r\n\r\n                </td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td> <strong>Solucion de problemas</strong></td>\r\n                <td><strong>*  Especializacion: </strong>es una tecnica para utilitzar ejemplos particulares y especificos que abarquen el contexto del problema\r\n                               para  brindarnos una idea cual puede ser el camino a la respueseta concreta y sus argumentos <br>\r\n                     <strong>* Generializar: </strong>al obtener resultados especificos son utiles y nos ayudan a buscar una respuesta general (patron, metodo, algotitmo). <br>\r\n                               Nota: para lograr  desarrollar logica adecuada es util seguir el proceso: como se indica en la imagen de tres pasos <br>\r\n                                <br>\r\n\r\n\r\n                </td>\r\n                <td><img src=\"../../../../../../assets/transversales/Fundamentos Programacion/pensamiento Critico.png\" alt=\"solucion de problemas\"></td>\r\n            </tr>\r\n            <tr>\r\n                <td><strong>Metodo ideal para Solucion computacional</strong> Es el preceso de aboradar un <strong>Problema</strong> de manera <strong>sitematica</strong> para crear(codificar)\r\n                    una <strong>solucion</strong> que pueda ser realizada o ejecutada por un <strong>dispositivo computacional.</strong><br>\r\n                    Nota: sistematico  metodo de ordenacion, organizacion o clasificacion de elementos, es  decir se estroctura una serie de tarias\r\n                                      para elaborar el programa. ademas en el proceso internamente esta constituido por una secuencia de tareas en un orden determinado y\r\n                                      con objectivos  especificos que ayudan a construir el programa y su solucion<br> <br>\r\n                                      <a href=\"https://github.com/carta87/MisionTic/blob/master/MisoinTic%20ciclo1/Programacion/Ejemplo%20para%20palicar%20%20IDEAL.pdf\"> Ejemplo</a>\r\n                </td>\r\n                <td>\r\n\r\n                                     <strong>I</strong>dentificar y convertirlo en una oportunidad para desarrollar una solucion creativa <br>\r\n                                     <strong>D</strong>efine la informacion que es util, lo que desean y necesitan los interesados. ademas de las tareas o funciones que llevan a la solucion <br>\r\n                                     <strong>E</strong>strategia es explorar alternativas de solucion mediante la realizacion de ejemplos de ejemplos particulares (Especializacion) <br>\r\n                                                       para plantear una estrategia general (generializacion). <br>\r\n                                     <strong>A</strong>lgotitmo(el como) se diseña la soluccion de forma detallada, especificando el conjunto de algotitmo para solucionar el problema planteado <br>\r\n                                     <strong>L</strong>ogro: se implementa la solucion en un <strong>lenguaje de Programacion y se valida </strong> el programa en un conjunto de pruebas <br>\r\n                </td>\r\n                <td><img src=\"../../../../../../assets/transversales/Fundamentos Programacion/metodo ideal.png\" alt=\"metodo ideal\"></td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td><strong>algotitmo</strong> es una secuencia finita de instruciones precisas(no ambiguas) que realiza una tarea especifica para solucionar un problema <br>\r\n                    <strong>Flujo de control:</strong> es el orden en que realiza las instruciones <br>\r\n                    <strong> <a href=\"https://support1.netlify.app/test-java\">Requirimiento</a> o Requisito de software:</strong> define una <strong>funcion</strong> que el programa que se va construir bebe proporcionar  para contribuir\r\n                                             a <strong>solucionar un problema</strong> en un contexto real <br>\r\n                </td>\r\n\r\n                <td>Pseudocodigo es una especie de programa escrito en un lenguaje de programacion, que igual a español permite escribir ideas. <br>\r\n                    si bien la idea del Pseudocodigo es que sea mas flejible, hay que tener unas consideraciones al escribir un algotitmo en Pseudocodigo,\r\n                    al usar verbos en infinitivo (ingresar, leer, obtener) que serviran para expresar los algortimos <br>\r\n\r\n                </td>\r\n                <td><img src=\"../../../../../../assets/transversales/Fundamentos Programacion/verbosInfinitos.jpg\" alt=\"verbosInfinitos\"></td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td><strong>Diagramade flujo</strong> es la representacion visual de nuestros algortimos: que muestra los  pasos en varias cuadros y muestra el\r\n                    proceso conectando los cuadros entre si</td>\r\n                <td><strong>Partes de un algortimo</strong> <br>\r\n                    * Input o entrada: es el ingreso de datos que necesita el algortimo para funcionar <br>\r\n                    * Proceso: se trata la operacion logica formal que el algortimo emprendera con lo recibido del imput <br>\r\n                    * Output o salida: los resultados obtenidos del proceso sobre el input, una vez terminada la ejecucion del algortimo <br>\r\n                </td>\r\n                <td><img src=\"../../../../../../assets/transversales/Fundamentos Programacion/diagramade flujo.png\" alt=\"\"></td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td colspan=\"3\"><img src=\"../../../../../../assets/transversales/Fundamentos Programacion/algortimo.png\" alt=\"algotitmo\"></td>\r\n            </tr>\r\n            <tr>\r\n                <td><strong>Que es Programar</strong>\r\n                </td>\r\n                <td>es una <strong>conjunto de instruciones</strong> escritas en un  <strong>Lenguaje de programcion</strong> que\r\n                    realizan una o varias tares especificas cuando son ejecutadas por un <strong>dispositivo computacional</strong></td>\r\n                <td><img src=\"../../../../../../assets/transversales/Fundamentos Programacion/sintaxis.png\" alt=\"sintaxis\"></td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td>Recolector de Basura</td>\r\n                <td>\r\n                  la maquina virtual de Java libera de la memoria los objetos los cuales el codigo no hace referencia y como lo hace?? <br><br>\r\n                  java maneja una pila donde tiene todos los objetos y en el momento donde nadie tenga un apuntador hacia uno de ellos el recolector lo saca de la pila <br><br> 1.ro <strong>lo marca</strong><br>2.do <strong>lo borro</strong><br>3.ro <strong>reorganiza la pila</strong>\r\n                </td>\r\n                <td></td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n  </div>\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}