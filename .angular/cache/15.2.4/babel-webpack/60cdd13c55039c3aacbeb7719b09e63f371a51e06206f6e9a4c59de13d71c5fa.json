{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class SpringbootComponent {\n  constructor() {\n    this.abrellave = \"{\";\n    this.cierrallave = \"}\";\n    this.abreDiamante = \"<\";\n    this.cierraDiamante = \">\";\n    this.abreParentesis = \"(\";\n    this.cierraParentesis = \")\";\n    this.abreCuadro = \"[\";\n    this.cierraCuadro = \"]\";\n  }\n}\nSpringbootComponent.ɵfac = function SpringbootComponent_Factory(t) {\n  return new (t || SpringbootComponent)();\n};\nSpringbootComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SpringbootComponent,\n  selectors: [[\"app-springboot\"]],\n  decls: 532,\n  vars: 10,\n  consts: [[1, \"container\"], [1, \"table\", \"table-striped\", \"table-hover\", \"table-bordered\", \"align-middle\"], [\"scope\", \"col\"], [\"href\", \"https://docs.aws.amazon.com/es_es/corretto/latest/corretto-11-ug/what-is-corretto-11.html\"], [\"href\", \"https://www.redhat.com/es/topics/cloud-native-apps/what-is-a-Java-runtime-environment\"], [\"src\", \"../../../../../assets/backend/JavaSpring/aplicacionAutocontenida.png\", \"alt\", \"aplicacionAutocontenida\", \"title\", \"aplicacionAutocontenida\"], [\"href\", \"https://start.spring.io/\"], [\"href\", \"https://mvnrepository.com/\"], [\"href\", \"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.spring-application\"], [\"href\", \"https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html\"], [\"href\", \"https://www.baeldung.com/spring-postconstruct-predestroy\"], [\"href\", \"https://www.javatpoint.com/spring-boot-properties\"], [\"src\", \"../../../../../assets/backend/JavaSpring/projectStructure.png\", \"alt\", \"projectStructure\", \"title\", \"projectStructure\"], [\"src\", \"../../../../../assets/backend/JavaSpring/Structure.png\", \"alt\", \"Structure\", \"title\", \"Structure\"], [\"colspan\", \"2\"], [\"src\", \"../../../../../assets/backend/JavaSpring/structure2.png\", \"alt\", \"structure2\", \"title\", \"structure2\"], [\"href\", \"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.stored-procedures\"], [\"href\", \"https://platzi.com/clases/1996-java-spring/31508-query-methods/\"], [\"href\", \"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods\"], [\"src\", \"../../../../../assets/backend/JavaSpring/springData.png\", \"alt\", \"springData\", \"title\", \"springData\"], [\"href\", \"https://platzi.com/clases/1996-java-spring/31505-crear-entity-cuando-su-clave-primaria-es-compuesta/\"], [\"href\", \"https://platzi.com/clases/1996-java-spring/31510-que-es-el-patron-data-mapper-y-que-resuelve/\"], [\"href\", \"https://mapstruct.org/\"], [\"href\", \"https://plugins.jetbrains.com/plugin/10036-mapstruct-support/versions\"], [\"src\", \"../../../../../assets/backend/JavaSpring/mapStruct.PNG\", \"alt\", \"mapStruct\", \"title\", \"mapStruct\"], [\"href\", \"https://www.youtube.com/watch?v=vTu2HQrXtyw\"], [\"src\", \"../../../../../assets/backend/JavaSpring/CreateObjectDBEntity.png\", \"alt\", \"CreateObjectDBEntity\", \"title\", \"CreateObjectDBEntity\"], [\"href\", \"https://github.com/lucasmoy-dev/Curso-de-Springboot-Hibernate/tree/main/src/main/java/com/cursojava/curso\"], [\"src\", \"../../../../../assets/framework/javaSpring/MVC.png\", \"alt\", \"MVC\"], [\"src\", \"../../../../../assets/framework/javaSpring/estrutura.png\", \"alt\", \"estrutura url\"], [\"colspan\", \"3\", 1, \"titulo\"], [\"src\", \"../../../../../assets/framework/JavaSpringBoot/postgresSQL.PNG\", \"alt\", \"postgresSQL url\"]],\n  template: function SpringbootComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"table\", 1)(2, \"thead\")(3, \"tr\")(4, \"th\", 2);\n      i0.ɵɵtext(5, \"Referencia\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"th\", 2);\n      i0.ɵɵtext(7, \"Descripcion\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"th\", 2);\n      i0.ɵɵtext(9, \"Ejemplo\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(10, \"tbody\")(11, \"tr\")(12, \"td\")(13, \"strong\");\n      i0.ɵɵtext(14, \"Hay varios tipos de Java\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"td\");\n      i0.ɵɵtext(16, \" Actualmente hay dos tipos de Java: \");\n      i0.ɵɵelement(17, \"br\")(18, \"br\");\n      i0.ɵɵtext(19, \" 1. Java de Oracle es la version de pago \");\n      i0.ɵɵelement(20, \"br\")(21, \"br\");\n      i0.ɵɵtext(22, \" 2. OpenJDK que es la version openJava que ofrece Oracle free de empresas independientes \");\n      i0.ɵɵelement(23, \"br\")(24, \"br\");\n      i0.ɵɵtext(25, \" 3. \");\n      i0.ɵɵelementStart(26, \"a\", 3);\n      i0.ɵɵtext(27, \" Correto \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(28, \": que es la version que ofrece Amazon free, dispone de una certificacion de Java SE y con soporte a larga plazo \");\n      i0.ɵɵelement(29, \"br\")(30, \"br\");\n      i0.ɵɵtext(31, \" 4. \");\n      i0.ɵɵelementStart(32, \"a\", 4);\n      i0.ɵɵtext(33, \"RedHat\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(34, \" que tambien tiene openJDK \");\n      i0.ɵɵelement(35, \"br\")(36, \"br\");\n      i0.ɵɵtext(37, \" Esto es debido a que oracle al ser de pago compa\\u00F1ias independientes como \");\n      i0.ɵɵelementStart(38, \"strong\");\n      i0.ɵɵtext(39, \"Red hat con OpenJDK, Amazon Correto... entre otros \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(40, \"ofrecen un Java que tecnicamente es igual al de oracle \");\n      i0.ɵɵelement(41, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(42, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(43, \"tr\")(44, \"td\");\n      i0.ɵɵtext(45, \"Arquitectura\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(46, \"td\");\n      i0.ɵɵtext(47, \" Es posible encontrar una aplicacion donde contenga todos los servicios necesarios para que funcione lo cual se llama \");\n      i0.ɵɵelementStart(48, \"strong\");\n      i0.ɵɵtext(49, \"servidor de aplicaciones\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(50, \" y una aplicacion que este compuesta por varios servicios o microservicios a esto se le llama \");\n      i0.ɵɵelementStart(51, \"strong\");\n      i0.ɵɵtext(52, \"aplicacion autocontenida\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(53, \"td\");\n      i0.ɵɵelement(54, \"img\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(55, \"tr\")(56, \"td\")(57, \"a\", 6);\n      i0.ɵɵtext(58, \"Spring Initializr\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(59, \"br\")(60, \"br\");\n      i0.ɵɵtext(61, \" Ahora para descargar Repositorios \");\n      i0.ɵɵelementStart(62, \"strong\");\n      i0.ɵɵelement(63, \"br\")(64, \"br\");\n      i0.ɵɵelementStart(65, \"a\", 7);\n      i0.ɵɵtext(66, \"Maven Repository\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(67, \"td\");\n      i0.ɵɵtext(68, \" Es el framework de Java para crear aplicaciones autocontenidas \");\n      i0.ɵɵelementStart(69, \"a\", 8);\n      i0.ɵɵtext(70, \"PARA VER LA DOCUMENTACIO\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(71, \" y \");\n      i0.ɵɵelementStart(72, \"a\", 9);\n      i0.ɵɵtext(73, \"tambien en este espacio\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(74, \"br\")(75, \"br\");\n      i0.ɵɵtext(76, \" Herramienta de construcci\\u00F3n con Maven = gestionan las dependencias con archivos XML \");\n      i0.ɵɵelement(77, \"br\");\n      i0.ɵɵtext(78, \" Herramienta de construcci\\u00F3n con Grandle = gestionan las dependencias con archivos Grovy \");\n      i0.ɵɵelement(79, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(80, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(81, \"tr\")(82, \"td\");\n      i0.ɵɵtext(83, \"Anotaciones\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(84, \"td\")(85, \"a\", 10);\n      i0.ɵɵtext(86, \"Ver inf @PostConstruct y @PreDestroy\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(87, \"br\")(88, \"br\");\n      i0.ɵɵelementStart(89, \"strong\");\n      i0.ɵɵtext(90, \"@PostConstruct\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(91, \" //Spring llama a los m\\u00E9todos anotados con @PostConstruct solo una vez, justo despu\\u00E9s de la inicializaci\\u00F3n de las propiedades del bean . Tenga en cuenta que estos m\\u00E9todos se ejecutar\\u00E1n incluso si no hay nada que inicializar. \");\n      i0.ɵɵelement(92, \"br\");\n      i0.ɵɵtext(93, \" El m\\u00E9todo anotado con \");\n      i0.ɵɵelementStart(94, \"strong\");\n      i0.ɵɵtext(95, \"@PostConstruct\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(96, \" puede tener cualquier nivel de acceso pero no puede ser est\\u00E1tico. Debe ser declarado despues de la injeccion de dependencias, solo es posible en \");\n      i0.ɵɵelementStart(97, \"strong\");\n      i0.ɵɵtext(98, \"Beans\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(99, \" que soporten la injeccion de dependencias \");\n      i0.ɵɵelement(100, \"br\")(101, \"br\");\n      i0.ɵɵelementStart(102, \"strong\");\n      i0.ɵɵtext(103, \"@PreDestroy\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(104, \" //Un m\\u00E9todo anotado con @PreDestroy se ejecuta solo una vez, justo antes de que Spring elimine nuestro bean del contexto de la aplicaci\\u00F3n. \");\n      i0.ɵɵelement(105, \"br\");\n      i0.ɵɵtext(106, \" Al igual que con \");\n      i0.ɵɵelementStart(107, \"strong\");\n      i0.ɵɵtext(108, \"@PostConstruct\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(109, \" , los m\\u00E9todos anotados con @PreDestroy pueden tener cualquier nivel de acceso, pero no pueden ser est\\u00E1ticos. \");\n      i0.ɵɵelement(110, \"br\");\n      i0.ɵɵtext(111, \"El prop\\u00F3sito de este m\\u00E9todo debe ser liberar recursos o realizar cualquier otra tarea de limpieza antes de que se destruya el bean, por ejemplo, cerrar una conexi\\u00F3n a la base de datos. \");\n      i0.ɵɵelement(112, \"br\")(113, \"br\");\n      i0.ɵɵelementStart(114, \"strong\");\n      i0.ɵɵtext(115, \"@SpringBootApplication\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(116, \" //declara la class main por donde inicia el project \");\n      i0.ɵɵelement(117, \"br\");\n      i0.ɵɵelementStart(118, \"strong\");\n      i0.ɵɵtext(119, \"@Service\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(120, \"// es el puente enter el controller y el repository \");\n      i0.ɵɵelement(121, \"br\");\n      i0.ɵɵelementStart(122, \"strong\");\n      i0.ɵɵtext(123, \"@RestController\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(124, \" //que la clase es un controller \");\n      i0.ɵɵelement(125, \"br\");\n      i0.ɵɵelementStart(126, \"strong\");\n      i0.ɵɵtext(127, \"@Autowired // Inversion de control\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(128, \" esto delega al framework como el encargado de crear e instanciar el objeto\");\n      i0.ɵɵelement(129, \"br\");\n      i0.ɵɵelementStart(130, \"strong\");\n      i0.ɵɵtext(131);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(132, \" //define el path principal del controller \");\n      i0.ɵɵelement(133, \"br\");\n      i0.ɵɵelementStart(134, \"strong\");\n      i0.ɵɵtext(135);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(136, \" // define el path secundario del controlador \");\n      i0.ɵɵelement(137, \"br\")(138, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(139, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(140, \"tr\")(141, \"td\")(142, \"a\", 9);\n      i0.ɵɵtext(143, \"aplicacion.properties\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(144, \"br\")(145, \"br\");\n      i0.ɵɵelementStart(146, \"a\", 11);\n      i0.ɵɵtext(147, \"Ver tambien\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(148, \"td\");\n      i0.ɵɵtext(149, \" En este archivo podemos configurar diversos entornos para el desarrollo como un entrono de \");\n      i0.ɵɵelementStart(150, \"strong\");\n      i0.ɵɵtext(151, \"desarrollo, produccion, stage(prepoduccion....)\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(152, \"br\")(153, \"br\");\n      i0.ɵɵtext(154, \" * spring.profiles.active = dev // esto quiere decir que el applicacion.properties \\\"principal\\\" va a buscar el application-dev.properties y por hay va a desplegar la aplicacion \");\n      i0.ɵɵelement(155, \"br\")(156, \"br\");\n      i0.ɵɵtext(157, \" * server.port=8090 // Podemos configurar el puerto por el cual se despliega el contenedor \");\n      i0.ɵɵelement(158, \"br\")(159, \"br\")(160, \"br\");\n      i0.ɵɵtext(161, \" * server.servlet.context-path=/usuarios/uno //Podemos modificar el contex path \");\n      i0.ɵɵelement(162, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(163, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(164, \"tr\")(165, \"td\");\n      i0.ɵɵtext(166, \"Project Structure \");\n      i0.ɵɵelement(167, \"br\")(168, \"br\");\n      i0.ɵɵtext(169, \"Orientado al dominio\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(170, \"td\");\n      i0.ɵɵtext(171, \" * la capa de Dominio: Donde estan los DTO y los objetos de Dominio \");\n      i0.ɵɵelement(172, \"br\");\n      i0.ɵɵtext(173, \" * la capa de Repositorios: Donde estan definida las clases \");\n      i0.ɵɵelement(174, \"br\");\n      i0.ɵɵtext(175, \" * la capa de servicios: esta encargada de ser puente entre los los controladores de la Api y la persistencia \");\n      i0.ɵɵelement(176, \"br\");\n      i0.ɵɵtext(177, \" * la capa web: es donde estan definido los controllers \");\n      i0.ɵɵelement(178, \"br\");\n      i0.ɵɵtext(179, \" * la capa de la persistencia: es la encargada de interacturar con la BD \");\n      i0.ɵɵelement(180, \"br\")(181, \"br\")(182, \"br\")(183, \"img\", 12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(184, \"td\");\n      i0.ɵɵelement(185, \"img\", 13);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(186, \"tr\")(187, \"td\");\n      i0.ɵɵtext(188, \"Structure\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(189, \"td\", 14);\n      i0.ɵɵelement(190, \"img\", 15);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(191, \"tr\")(192, \"td\");\n      i0.ɵɵtext(193, \"JPA\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(194, \"td\");\n      i0.ɵɵtext(195, \" Jpa es una especificaci\\u00F3n de Java o un standar, reglas que JAVA define para que cualquier framework que quiera interecatuar con una BD tiene que seguir, por medio de Anotaciones o Decoradores evitando hacer consultas de manera nativa o de manera SQL \");\n      i0.ɵɵelement(196, \"br\")(197, \"br\");\n      i0.ɵɵtext(198, \" Un Framework que implemente lo anterior se convierte en un ORM. \");\n      i0.ɵɵelementStart(199, \"strong\");\n      i0.ɵɵtext(200, \"Object Relation Mapping\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(201, \"br\")(202, \"br\");\n      i0.ɵɵtext(203, \" como por ejemplo Frameworks ORM son: \");\n      i0.ɵɵelement(204, \"br\");\n      i0.ɵɵtext(205, \" * Hibernate. \");\n      i0.ɵɵelement(206, \"br\");\n      i0.ɵɵtext(207, \" * TopLink. \");\n      i0.ɵɵelement(208, \"br\");\n      i0.ɵɵtext(209, \" * EclipseLink. \");\n      i0.ɵɵelement(210, \"br\");\n      i0.ɵɵtext(211, \" * ObjectDB. \");\n      i0.ɵɵelement(212, \"br\")(213, \"br\");\n      i0.ɵɵelementStart(214, \"strong\");\n      i0.ɵɵtext(215, \"@Entity\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(216, \" para indicar que una clase java representa una tabla en la base de datos\");\n      i0.ɵɵelement(217, \"br\");\n      i0.ɵɵelementStart(218, \"strong\");\n      i0.ɵɵtext(219, \"@Table\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(220, \" recible el nombre de la tabla\");\n      i0.ɵɵelement(221, \"br\");\n      i0.ɵɵelementStart(222, \"strong\");\n      i0.ɵɵtext(223, \"@Column\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(224, \" se le pone a los atributos de la clase y se usa cuando los nombres entre la tabla y la entidad no coinciden\");\n      i0.ɵɵelement(225, \"br\");\n      i0.ɵɵelementStart(226, \"strong\");\n      i0.ɵɵtext(227);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(228, \"br\");\n      i0.ɵɵelementStart(229, \"strong\");\n      i0.ɵɵtext(230, \"@Id y @EmbededId\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(231, \" representan la clave primaria, id para sencilla y embededId para compuesta\");\n      i0.ɵɵelement(232, \"br\");\n      i0.ɵɵelementStart(233, \"strong\");\n      i0.ɵɵtext(234, \"@GeneratedValue\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(235, \" genera valores automaticos para las llaves de las tablas\");\n      i0.ɵɵelement(236, \"br\");\n      i0.ɵɵelementStart(237, \"strong\");\n      i0.ɵɵtext(238, \"@OneToMany @ManyToOne\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(239, \" permite representar relaciones\");\n      i0.ɵɵelement(240, \"br\");\n      i0.ɵɵelementStart(241, \"u\")(242, \"a\", 16);\n      i0.ɵɵtext(243, \"Procedimiento Almacenado\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(244, \"br\")(245, \"br\");\n      i0.ɵɵelementStart(246, \"strong\");\n      i0.ɵɵtext(247, \"@Query\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(248, \"(nativeQuery = true) o con la anotaci\\u00F3n \");\n      i0.ɵɵelementStart(249, \"strong\");\n      i0.ɵɵtext(250, \"@Procedure\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(251, \".\");\n      i0.ɵɵelement(252, \"br\");\n      i0.ɵɵelementStart(253, \"strong\");\n      i0.ɵɵtext(254);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(255, \" Desde la interfaz del crud podemos implementar querys de manera nativa de esta manera\");\n      i0.ɵɵelement(256, \"br\");\n      i0.ɵɵelementStart(257, \"strong\");\n      i0.ɵɵtext(258, \"@Repository\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(259, \" Con este le indicamos a JavaSpring que la clase va a interacturar con la BD por que en esta clase estaran definidos los metodos que operaran con los registros de la BD.\");\n      i0.ɵɵelement(260, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(261, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(262, \"tr\")(263, \"td\")(264, \"a\", 17);\n      i0.ɵɵtext(265, \"query-methods\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(266, \"td\");\n      i0.ɵɵtext(267, \" ver mas info \");\n      i0.ɵɵelementStart(268, \"a\", 18);\n      i0.ɵɵtext(269, \"En el siguiente enlace\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(270, \"td\");\n      i0.ɵɵelement(271, \"img\", 19);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(272, \"tr\")(273, \"td\");\n      i0.ɵɵtext(274, \"build.gradle\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(275, \"td\");\n      i0.ɵɵtext(276, \" Es este archivo estaran \");\n      i0.ɵɵelement(277, \"br\")(278, \"br\");\n      i0.ɵɵtext(279, \" * los implementation que son la injeccion de dependencias o librerias que nos permite maven Reposory agregar al proyecto \");\n      i0.ɵɵelement(280, \"br\")(281, \"br\");\n      i0.ɵɵtext(282, \" * podemos indicar la BD \");\n      i0.ɵɵelementStart(283, \"strong\");\n      i0.ɵɵtext(284, \"runtimeOnly\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(285, \" por que solo la necesitamos en tiempo de ejecucion y entre ' ' agregamos la dependencia que nos brinda maven repository para la BD \");\n      i0.ɵɵelement(286, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(287, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(288, \"tr\")(289, \"td\")(290, \"a\", 20);\n      i0.ɵɵtext(291, \"llaves PK Compuestas\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(292, \"td\")(293, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(294, \"tr\")(295, \"td\")(296, \"a\", 21);\n      i0.ɵɵtext(297, \"patron Data mapper\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(298, \"td\");\n      i0.ɵɵtext(299, \" Es la forma en la cual traducimos o convertimos una tabla en otra, esto con el fin de tener tablas definidas en termino de la persistencia con sus semejantes en termino de dominio \");\n      i0.ɵɵelement(300, \"br\")(301, \"br\");\n      i0.ɵɵtext(302, \" Con esto descoplamos la BD de la Api \");\n      i0.ɵɵelement(303, \"br\");\n      i0.ɵɵtext(304, \" mapeamos solo los campos que son necesarios y no todos los campo de las tablas ya que estos puede tener sentido de existencia en BD \");\n      i0.ɵɵelement(305, \"br\");\n      i0.ɵɵtext(306, \" De esta manera la Api podria cambiar de BD y no tendria conflicto con el codigo \");\n      i0.ɵɵelement(307, \"br\")(308, \"br\");\n      i0.ɵɵtext(309, \" Para usarlo debemos: \");\n      i0.ɵɵelement(310, \"br\")(311, \"br\");\n      i0.ɵɵtext(312, \" 1. Descargarlo \");\n      i0.ɵɵelementStart(313, \"a\", 22);\n      i0.ɵɵtext(314, \"En la pagina oficial\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(315, \"br\")(316, \"br\");\n      i0.ɵɵtext(317, \" 2. se debe instalar un plugin que autocompletara las structuras de mapstruc dentro de intellintIDea \");\n      i0.ɵɵelementStart(318, \"a\", 23)(319, \"strong\");\n      i0.ɵɵtext(320, \"Jet Brains\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(321, \"br\")(322, \"br\");\n      i0.ɵɵtext(323, \" Otra forma de instalar plugins en IntelliJ es ir a files > Settings o Ctrl + Alt + S / en Mac es con command + , (coma) En el panel izquierdo se selecciona \\\"plugins\\\" y solo queda buscar \\u201CMapStruct Support\\u201D e instalarlo \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(324, \"td\");\n      i0.ɵɵelement(325, \"img\", 24);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(326, \"tr\")(327, \"td\");\n      i0.ɵɵtext(328, \"MapStruct\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(329, \"td\")(330, \"strong\");\n      i0.ɵɵtext(331);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(332, \" indicara que la interface va a mapear la table del dominio y la identidad \");\n      i0.ɵɵelement(333, \"br\")(334, \"br\");\n      i0.ɵɵelementStart(335, \"strong\");\n      i0.ɵɵtext(336, \"@Mappings\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(337, \" grupo de traductor de campos entre tablas \");\n      i0.ɵɵelement(338, \"br\")(339, \"br\");\n      i0.ɵɵelementStart(340, \"strong\");\n      i0.ɵɵtext(341, \"@Mapping\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(342, \" van cruzados y es de donde va a sacar el valor y donde se lo va a poner \");\n      i0.ɵɵelement(343, \"br\");\n      i0.ɵɵelementStart(344, \"strong\");\n      i0.ɵɵtext(345, \"@InheritInverseConfiguration\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(346, \" es para hacer de manera inversa la traduccion ya con esto ya no es necesario declaran nuevamente mappings\");\n      i0.ɵɵelement(347, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(348, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(349, \"tr\")(350, \"td\")(351, \"a\", 25);\n      i0.ɵɵtext(352, \"Base de datos\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(353, \"td\");\n      i0.ɵɵtext(354, \" Cuando en nuestro codigo estamos configurando la base de datos podemos indicar que al ejecutar el codigo este el back quien crea la BD o si la BD ya existe que la actualice \");\n      i0.ɵɵelement(355, \"br\")(356, \"br\");\n      i0.ɵɵtext(357, \"De la manera como lo indica la imagen \");\n      i0.ɵɵelement(358, \"br\")(359, \"br\");\n      i0.ɵɵelementStart(360, \"strong\");\n      i0.ɵɵtext(361, \"spring.jpa.hibernate.ddl-auto=update/none\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(362, \"td\");\n      i0.ɵɵelement(363, \"img\", 26);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(364, \"tr\")(365, \"td\");\n      i0.ɵɵtext(366, \"Imagenes importantes curso JAVA spring \");\n      i0.ɵɵelement(367, \"br\");\n      i0.ɵɵelementStart(368, \"a\", 27);\n      i0.ɵɵtext(369, \"repositorio\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(370, \"td\");\n      i0.ɵɵelement(371, \"img\", 28);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(372, \"td\");\n      i0.ɵɵelement(373, \"img\", 29);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(374, \"tr\")(375, \"td\", 30)(376, \"strong\");\n      i0.ɵɵtext(377, \"Spring Data\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(378, \"tr\")(379, \"td\");\n      i0.ɵɵtext(380, \"Que es??\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(381, \"td\");\n      i0.ɵɵtext(382, \" * Spring Data es un proyecto que usa JPA. \");\n      i0.ɵɵelement(383, \"br\");\n      i0.ɵɵtext(384, \" * Spring Data contiene varios sub-proyectos \");\n      i0.ɵɵelementStart(385, \"strong\");\n      i0.ɵɵtext(386, \"(ej. Spring Data JPA, Spring Data JDBC, Spring Data MongDB, Spring Data Kasandra).\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(387, \"br\");\n      i0.ɵɵtext(388, \" * Tiene Auditorias transparentes (guarda el registro de los querys). \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(389, \"td\")(390, \"strong\");\n      i0.ɵɵtext(391, \"implementation 'org.springframework.boot:spring-boot-starter-data-jpa'\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(392, \"tr\")(393, \"td\");\n      i0.ɵɵtext(394, \"Conectar postgreSql\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(395, \"td\");\n      i0.ɵɵelementStart(396, \"td\");\n      i0.ɵɵtext(397, \"runtimeOnly 'org.postgresql:postgresql'\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(398, \"td\");\n      i0.ɵɵelement(399, \"img\", 31);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(400, \"tr\");\n      i0.ɵɵelement(401, \"td\")(402, \"td\")(403, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(404, \"tr\");\n      i0.ɵɵelement(405, \"td\")(406, \"td\")(407, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(408, \"tr\");\n      i0.ɵɵelement(409, \"td\")(410, \"td\")(411, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(412, \"tr\");\n      i0.ɵɵelement(413, \"td\")(414, \"td\")(415, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(416, \"tr\");\n      i0.ɵɵelement(417, \"td\")(418, \"td\")(419, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(420, \"tr\");\n      i0.ɵɵelement(421, \"td\")(422, \"td\")(423, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(424, \"tr\");\n      i0.ɵɵelement(425, \"td\")(426, \"td\")(427, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(428, \"tr\");\n      i0.ɵɵelement(429, \"td\")(430, \"td\")(431, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(432, \"tr\");\n      i0.ɵɵelement(433, \"td\")(434, \"td\")(435, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(436, \"tr\");\n      i0.ɵɵelement(437, \"td\")(438, \"td\")(439, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(440, \"tr\");\n      i0.ɵɵelement(441, \"td\")(442, \"td\")(443, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(444, \"tr\");\n      i0.ɵɵelement(445, \"td\")(446, \"td\")(447, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(448, \"tr\");\n      i0.ɵɵelement(449, \"td\")(450, \"td\")(451, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(452, \"tr\");\n      i0.ɵɵelement(453, \"td\")(454, \"td\")(455, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(456, \"tr\");\n      i0.ɵɵelement(457, \"td\")(458, \"td\")(459, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(460, \"tr\");\n      i0.ɵɵelement(461, \"td\")(462, \"td\")(463, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(464, \"tr\");\n      i0.ɵɵelement(465, \"td\")(466, \"td\")(467, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(468, \"tr\");\n      i0.ɵɵelement(469, \"td\")(470, \"td\")(471, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(472, \"tr\");\n      i0.ɵɵelement(473, \"td\")(474, \"td\")(475, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(476, \"tr\");\n      i0.ɵɵelement(477, \"td\")(478, \"td\")(479, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(480, \"tr\");\n      i0.ɵɵelement(481, \"td\")(482, \"td\")(483, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(484, \"tr\");\n      i0.ɵɵelement(485, \"td\")(486, \"td\")(487, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(488, \"tr\");\n      i0.ɵɵelement(489, \"td\")(490, \"td\")(491, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(492, \"tr\");\n      i0.ɵɵelement(493, \"td\")(494, \"td\")(495, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(496, \"tr\");\n      i0.ɵɵelement(497, \"td\")(498, \"td\")(499, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(500, \"tr\");\n      i0.ɵɵelement(501, \"td\")(502, \"td\")(503, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(504, \"tr\");\n      i0.ɵɵelement(505, \"td\")(506, \"td\")(507, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(508, \"tr\");\n      i0.ɵɵelement(509, \"td\")(510, \"td\")(511, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(512, \"tr\");\n      i0.ɵɵelement(513, \"td\")(514, \"td\")(515, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(516, \"tr\");\n      i0.ɵɵelement(517, \"td\")(518, \"td\")(519, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(520, \"tr\");\n      i0.ɵɵelement(521, \"td\")(522, \"td\")(523, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(524, \"tr\");\n      i0.ɵɵelement(525, \"td\")(526, \"td\")(527, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(528, \"tr\");\n      i0.ɵɵelement(529, \"td\")(530, \"td\")(531, \"td\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(131);\n      i0.ɵɵtextInterpolate2(\"@RequestMapping\", ctx.abreParentesis, \"\\\"/saludar\\\"\", ctx.cierraParentesis, \"\");\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate2(\"@GetMapping\", ctx.abreParentesis, \"\\\"/hola\\\"\", ctx.cierraParentesis, \"\");\n      i0.ɵɵadvance(92);\n      i0.ɵɵtextInterpolate2(\"@Column\", ctx.abreParentesis, \"unique = true, nullable= false\", ctx.cierraParentesis, \" //para los campos Id o campos que son unicos y no permite valores nulos\");\n      i0.ɵɵadvance(27);\n      i0.ɵɵtextInterpolate2(\"@Query \", ctx.abreParentesis, \"value = \\\" SELECT * FROM categorias WHERE id_categoria = ? \\\", nativeQuery = true \", ctx.cierraParentesis, \".\");\n      i0.ɵɵadvance(77);\n      i0.ɵɵtextInterpolate2(\"@Mapper\", ctx.abreParentesis, \"componentModel = \\\"spring\\\"\", ctx.cierraParentesis, \"\");\n    }\n  },\n  styles: [\".titulo[_ngcontent-%COMP%] {\\n  text-align: center;\\n  font-size: 25px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29yZS9jb21wb25lbnRzL2ZyYW1ld29rcy9zcHJpbmdib290L3NwcmluZ2Jvb3QuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxrQkFBQTtFQUNBLGVBQUE7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIi50aXR1bG97XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIGZvbnQtc2l6ZTogMjVweDtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["SpringbootComponent","constructor","abrellave","cierrallave","abreDiamante","cierraDiamante","abreParentesis","cierraParentesis","abreCuadro","cierraCuadro","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\HP\\Desktop\\juanTafur\\jugutafur\\Support-FrontEnd-Angular-full\\src\\app\\core\\components\\framewoks\\springboot\\springboot.component.ts","C:\\Users\\HP\\Desktop\\juanTafur\\jugutafur\\Support-FrontEnd-Angular-full\\src\\app\\core\\components\\framewoks\\springboot\\springboot.component.html"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-springboot',\n  templateUrl: './springboot.component.html',\n  styleUrls: ['./springboot.component.scss']\n})\nexport class SpringbootComponent {\n\n  public abrellave: string;\n  public cierrallave: string;\n  public abreDiamante: string;\n  public cierraDiamante: string;\n  public abreParentesis: string;\n  public cierraParentesis: string;\n  public abreCuadro: string;\n  public cierraCuadro: string;\n\n  constructor() {\n    this.abrellave= \"{\";\n    this.cierrallave=\"}\";\n    this.abreDiamante= \"<\";\n    this.cierraDiamante= \">\";\n    this.abreParentesis= \"(\";\n    this.cierraParentesis= \")\";\n    this.abreCuadro= \"[\";\n    this.cierraCuadro= \"]\";\n  }\n}\n","<div class=\"container\">\n  <table class=\"table table-striped table-hover table-bordered align-middle\">\n      <thead>\n          <tr>\n              <th scope=\"col\">Referencia</th>\n              <th scope=\"col\">Descripcion</th>\n              <th scope=\"col\">Ejemplo</th>\n          </tr>\n      </thead>\n      <tbody>\n          <tr>\n              <td><strong>Hay varios tipos de Java</strong></td>\n              <td>\n                  Actualmente hay dos tipos de Java: <br><br>\n                  1. Java de Oracle es la version de pago <br><br>\n                  2. OpenJDK que es la version openJava que ofrece Oracle free de empresas independientes <br><br>\n                  3. <a href=\"https://docs.aws.amazon.com/es_es/corretto/latest/corretto-11-ug/what-is-corretto-11.html\"> Correto </a>: que es la version que ofrece Amazon free, dispone de una certificacion de Java SE y con soporte a larga plazo <br><br>\n                  4. <a href=\"https://www.redhat.com/es/topics/cloud-native-apps/what-is-a-Java-runtime-environment\">RedHat</a> que tambien tiene openJDK <br><br>\n                  Esto es debido a que oracle al ser de pago compañias independientes como <strong>Red hat con OpenJDK, Amazon Correto... entre otros </strong>ofrecen un Java que tecnicamente es igual al de oracle <br>\n              </td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td>Arquitectura</td>\n              <td>\n                  Es posible encontrar una aplicacion donde contenga todos los servicios necesarios para que funcione lo cual se llama <strong>servidor de aplicaciones</strong> y una aplicacion que este compuesta por varios servicios o microservicios a esto se le llama <strong>aplicacion autocontenida</strong>\n              </td>\n              <td>\n                  <img\n                  src=\"../../../../../assets/backend/JavaSpring/aplicacionAutocontenida.png\"\n                  alt=\"aplicacionAutocontenida\"\n                  title=\"aplicacionAutocontenida\">\n              </td>\n          </tr>\n\n          <tr>\n              <td>\n                  <a href=\"https://start.spring.io/\">Spring Initializr</a><br><br>\n                  Ahora para descargar Repositorios <strong><br><br><a href=\"https://mvnrepository.com/\">Maven Repository</a></strong>\n              </td>\n              <td>\n                  Es el framework de Java para crear aplicaciones autocontenidas <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.spring-application\">PARA VER LA DOCUMENTACIO</a> y <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html\">tambien en este espacio</a><br><br>\n                  Herramienta de construcción con Maven = gestionan las dependencias con archivos XML <br>\n                  Herramienta de construcción con Grandle = gestionan las dependencias con archivos Grovy <br>\n              </td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td>Anotaciones</td>\n              <td>\n                  <a href=\"https://www.baeldung.com/spring-postconstruct-predestroy\">Ver inf @PostConstruct y @PreDestroy</a> <br><br>\n                  <strong>@PostConstruct</strong> //Spring llama a los métodos anotados con @PostConstruct solo una vez, justo después de la inicialización de las propiedades del bean . Tenga en cuenta que estos métodos se ejecutarán incluso si no hay nada que inicializar. <br>\n                  El método anotado con <strong>@PostConstruct</strong> puede tener cualquier nivel de acceso pero no puede ser estático. Debe ser declarado despues de la injeccion de dependencias, solo es posible en <strong>Beans</strong> que soporten la injeccion de dependencias <br>\n                  <br>\n                  <strong>@PreDestroy</strong> //Un método anotado con @PreDestroy se ejecuta solo una vez, justo antes de que Spring elimine nuestro bean del contexto de la aplicación.\n                  <br>\n                  Al igual que con <strong>@PostConstruct</strong> , los métodos anotados con @PreDestroy pueden tener cualquier nivel de acceso, pero no pueden ser estáticos.\n                  <br>El propósito de este método debe ser liberar recursos o realizar cualquier otra tarea de limpieza antes de que se destruya el bean, por ejemplo, cerrar una conexión a la base de datos. <br><br>\n                  <strong>@SpringBootApplication</strong> //declara la class main por donde inicia el project <br>\n                  <strong>@Service</strong>// es el puente enter el controller y el repository <br>\n                  <strong>@RestController</strong>  //que la clase es un controller <br>\n                  <strong>@Autowired // Inversion de control</strong> esto delega al framework como el encargado de crear e instanciar el objeto<br>\n                  <strong>@RequestMapping{{abreParentesis}}\"/saludar\"{{cierraParentesis}}</strong>  //define el path principal del controller <br>\n                  <strong>@GetMapping{{abreParentesis}}\"/hola\"{{cierraParentesis}}</strong> // define el path secundario del controlador <br><br>\n              </td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html\">aplicacion.properties</a><br><br><a href=\"https://www.javatpoint.com/spring-boot-properties\">Ver tambien</a></td>\n              <td>\n                  En este archivo podemos configurar diversos entornos para el desarrollo como un entrono de <strong>desarrollo, produccion, stage(prepoduccion....)</strong> <br><br>\n                  * spring.profiles.active = dev // esto quiere decir que el applicacion.properties \"principal\" va a buscar el application-dev.properties y por hay va a desplegar la aplicacion <br><br>\n                  * server.port=8090 // Podemos configurar el puerto por el cual se despliega el contenedor <br>\n                  <br><br>\n                  * server.servlet.context-path=/usuarios/uno //Podemos modificar el contex path <br>\n              </td>\n              <td></td>\n          </tr>\n          <tr>\n              <td>Project Structure <br><br>Orientado al dominio</td>\n              <td>\n                  * la capa de Dominio: Donde estan los DTO y los objetos de Dominio <br>\n                  * la capa de Repositorios: Donde estan definida las clases <br>\n                  * la capa de servicios: esta encargada de ser puente entre los los controladores de la Api y la persistencia <br>\n                  * la capa web: es donde estan definido los controllers <br>\n                  * la capa de la persistencia: es la encargada de interacturar con la BD <br><br><br>\n                  <img\n                  src=\"../../../../../assets/backend/JavaSpring/projectStructure.png\"\n                  alt=\"projectStructure\"\n                  title=\"projectStructure\">\n              </td>\n              <td>\n                  <img\n                  src=\"../../../../../assets/backend/JavaSpring/Structure.png\"\n                  alt=\"Structure\"\n                  title=\"Structure\">\n              </td>\n          </tr>\n\n          <tr>\n              <td>Structure</td>\n              <td colspan=\"2\">\n                  <img\n                  src=\"../../../../../assets/backend/JavaSpring/structure2.png\"\n                  alt=\"structure2\"\n                  title=\"structure2\">\n              </td>\n          </tr>\n\n          <tr>\n              <td>JPA</td>\n              <td>\n                  Jpa es una especificación de Java o un standar, reglas que JAVA define para que cualquier framework que quiera interecatuar con una BD tiene que seguir, por medio de Anotaciones o Decoradores evitando hacer consultas de manera nativa o de manera SQL <br><br>\n                  Un Framework  que implemente lo anterior se convierte en un ORM. <strong>Object Relation Mapping</strong><br><br>\n                  como por ejemplo Frameworks ORM son: <br>\n                  * Hibernate. <br>\n                  * TopLink. <br>\n                  * EclipseLink. <br>\n                  * ObjectDB. <br><br>\n                  <strong>@Entity</strong> para indicar que una clase java representa una tabla en la base de datos<br>\n                  <strong>@Table</strong> recible el nombre de la tabla<br>\n                  <strong>@Column</strong> se le pone a los atributos de la clase y se usa cuando los nombres entre la tabla y la entidad no coinciden<br>\n                  <strong>@Column{{abreParentesis}}unique = true, nullable= false{{cierraParentesis}} //para los campos Id o campos que son unicos y no permite valores nulos</strong> <br>\n                  <strong>@Id y @EmbededId</strong> representan la clave primaria, id para sencilla y embededId para compuesta<br>\n                  <strong>@GeneratedValue</strong> genera valores automaticos para las llaves de las tablas<br>\n                  <strong>@OneToMany @ManyToOne</strong> permite representar relaciones<br>\n                  <u><a href=\"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.stored-procedures\">Procedimiento Almacenado</a></u><br><br>\n                  <strong>@Query</strong>(nativeQuery = true) o con la anotación <strong>@Procedure</strong>.<br>\n                  <strong>@Query {{abreParentesis}}value = \" SELECT * FROM categorias WHERE id_categoria = ? \", nativeQuery = true {{cierraParentesis}}.</strong> Desde la interfaz del crud podemos implementar querys de manera nativa de esta manera<br>\n                  <strong>@Repository</strong> Con este le indicamos a JavaSpring que la clase va a interacturar con la BD por que en esta clase estaran definidos los metodos que operaran con los registros de la BD.<br>\n              </td>\n              <td></td>\n          </tr>\n\n\n          <tr>\n              <td>\n                <a href=\"https://platzi.com/clases/1996-java-spring/31508-query-methods/\">query-methods</a>\n              </td>\n              <td>\n                  ver mas info <a href=\"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods\">En el siguiente enlace</a>\n              </td>\n              <td>\n                  <img\n                  src=\"../../../../../assets/backend/JavaSpring/springData.png\"\n                  alt=\"springData\"\n                  title=\"springData\">\n              </td>\n          </tr>\n\n          <tr>\n              <td>build.gradle</td>\n              <td>\n                  Es este archivo estaran  <br><br>\n                  * los implementation que son la injeccion de dependencias o librerias que nos permite maven Reposory agregar al proyecto <br><br>\n                  * podemos indicar la BD <strong>runtimeOnly</strong> por que solo la necesitamos en tiempo de ejecucion y entre ' ' agregamos la dependencia que nos brinda maven repository para la BD <br>\n              </td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td><a href=\"https://platzi.com/clases/1996-java-spring/31505-crear-entity-cuando-su-clave-primaria-es-compuesta/\">llaves PK Compuestas</a></td>\n              <td>\n\n              </td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td><a href=\"https://platzi.com/clases/1996-java-spring/31510-que-es-el-patron-data-mapper-y-que-resuelve/\">patron Data mapper</a></td>\n              <td>\n                  Es la forma en la cual traducimos o convertimos una tabla en otra, esto con el fin de tener tablas definidas en termino de la persistencia con sus semejantes en termino de dominio <br><br>\n                  Con esto descoplamos la BD de la Api <br>\n                  mapeamos solo los campos que son necesarios y no todos los campo de las tablas ya que estos puede tener sentido de existencia en BD <br>\n                  De esta manera la Api podria cambiar de BD y no tendria conflicto con el codigo <br><br>\n                  Para usarlo debemos: <br><br>\n                  1. Descargarlo <a href=\"https://mapstruct.org/\">En la pagina oficial</a> <br><br>\n                  2. se debe instalar un plugin que autocompletara las structuras de mapstruc dentro de intellintIDea <a href=\"https://plugins.jetbrains.com/plugin/10036-mapstruct-support/versions\"><strong>Jet Brains</strong></a><br><br>\n\n                  Otra forma de instalar plugins en IntelliJ es ir a files > Settings o Ctrl + Alt + S / en Mac es con command + , (coma)\n                      En el panel izquierdo se selecciona \"plugins\"\n                      y solo queda buscar “MapStruct Support” e instalarlo\n              </td>\n              <td>\n                  <img\n                  src=\"../../../../../assets/backend/JavaSpring/mapStruct.PNG\"\n                  alt=\"mapStruct\"\n                  title=\"mapStruct\">\n              </td>\n          </tr>\n\n          <tr>\n              <td>MapStruct</td>\n              <td>\n                <strong>@Mapper{{abreParentesis}}componentModel = \"spring\"{{cierraParentesis}}</strong> indicara que la interface va a mapear la table del dominio y la identidad <br><br>\n                <strong>@Mappings</strong> grupo de traductor de campos entre tablas <br><br>\n                <strong>@Mapping</strong> van cruzados y es de donde va a sacar el valor y donde se lo va a poner <br>\n                <strong>@InheritInverseConfiguration</strong> es para hacer de manera inversa la traduccion ya con esto ya no es necesario declaran nuevamente mappings<br>\n              </td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td><a href=\"https://www.youtube.com/watch?v=vTu2HQrXtyw\">Base de datos</a></td>\n              <td>\n                Cuando en nuestro codigo estamos configurando la base de datos podemos indicar que al ejecutar el codigo este el back quien crea la BD o si la BD ya existe que la actualice <br><br>De la manera como lo indica la imagen <br><br>\n                <strong>spring.jpa.hibernate.ddl-auto=update/none</strong>\n              </td>\n              <td>\n                <img\n                src=\"../../../../../assets/backend/JavaSpring/CreateObjectDBEntity.png\"\n                alt=\"CreateObjectDBEntity\"\n                title=\"CreateObjectDBEntity\">\n              </td>\n          </tr>\n\n\n          <tr>\n              <td>Imagenes importantes curso JAVA spring <br>\n              <a href=\"https://github.com/lucasmoy-dev/Curso-de-Springboot-Hibernate/tree/main/src/main/java/com/cursojava/curso\">repositorio</a>\n              </td>\n              <td><img src=\"../../../../../assets/framework/javaSpring/MVC.png\" alt=\"MVC\"></td>\n              <td><img src=\"../../../../../assets/framework/javaSpring/estrutura.png\" alt=\"estrutura url\"></td>\n          </tr>\n\n          <tr>\n            <td colspan=\"3\" class=\"titulo\"><strong>Spring Data</strong></td>\n          </tr>\n\n          <tr>\n              <td>Que es??</td>\n              <td>\n                * Spring Data es un proyecto que usa JPA. <br>\n                * Spring Data contiene varios sub-proyectos <strong>(ej. Spring Data JPA, Spring Data JDBC, Spring Data MongDB, Spring Data Kasandra).</strong><br>\n                * Tiene Auditorias transparentes (guarda el registro de los querys).\n              </td>\n              <td>\n                <strong>implementation 'org.springframework.boot:spring-boot-starter-data-jpa'</strong>\n              </td>\n          </tr>\n\n          <tr>\n              <td>Conectar postgreSql<td>\n              <td>runtimeOnly 'org.postgresql:postgresql'</td>\n              <td>\n                <img src=\"../../../../../assets/framework/JavaSpringBoot/postgresSQL.PNG\" alt=\"postgresSQL url\">\n              </td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n      </tbody>\n  </table>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}