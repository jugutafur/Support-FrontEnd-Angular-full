{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class SpringbootComponent {\n  constructor() {\n    this.abrellave = \"{\";\n    this.cierrallave = \"}\";\n    this.abreDiamante = \"<\";\n    this.cierraDiamante = \">\";\n    this.abreParentesis = \"(\";\n    this.cierraParentesis = \")\";\n    this.abreCuadro = \"[\";\n    this.cierraCuadro = \"]\";\n  }\n}\nSpringbootComponent.ɵfac = function SpringbootComponent_Factory(t) {\n  return new (t || SpringbootComponent)();\n};\nSpringbootComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SpringbootComponent,\n  selectors: [[\"app-springboot\"]],\n  decls: 566,\n  vars: 0,\n  consts: [[1, \"container\"], [1, \"table\", \"table-striped\", \"table-hover\", \"table-bordered\", \"align-middle\"], [\"scope\", \"col\"], [\"href\", \"https://docs.aws.amazon.com/es_es/corretto/latest/corretto-11-ug/what-is-corretto-11.html\"], [\"href\", \"https://www.redhat.com/es/topics/cloud-native-apps/what-is-a-Java-runtime-environment\"], [\"src\", \"../../../../../assets/backend/JavaSpring/aplicacionAutocontenida.png\", \"alt\", \"aplicacionAutocontenida\", \"title\", \"aplicacionAutocontenida\"], [\"href\", \"https://start.spring.io/\"], [\"href\", \"https://mvnrepository.com/\"], [\"href\", \"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.spring-application\"], [\"href\", \"https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html\"], [\"href\", \"https://www.baeldung.com/spring-postconstruct-predestroy\"], [\"href\", \"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.stored-procedures\"], [\"href\", \"https://www.javatpoint.com/spring-boot-properties\"], [\"src\", \"../../../../../assets/backend/JavaSpring/projectStructure.png\", \"alt\", \"projectStructure\", \"title\", \"projectStructure\"], [\"src\", \"../../../../../assets/backend/JavaSpring/Structure.png\", \"alt\", \"Structure\", \"title\", \"Structure\"], [\"colspan\", \"2\"], [\"src\", \"../../../../../assets/backend/JavaSpring/structure2.png\", \"alt\", \"structure2\", \"title\", \"structure2\"], [\"href\", \"https://platzi.com/clases/1996-java-spring/31508-query-methods/\"], [\"href\", \"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods\"], [\"src\", \"../../../../../assets/backend/JavaSpring/springData.png\", \"alt\", \"springData\", \"title\", \"springData\"], [\"href\", \"https://platzi.com/clases/1996-java-spring/31505-crear-entity-cuando-su-clave-primaria-es-compuesta/\"], [\"href\", \"https://platzi.com/clases/1996-java-spring/31510-que-es-el-patron-data-mapper-y-que-resuelve/\"], [\"href\", \"https://mapstruct.org/\"], [\"href\", \"https://plugins.jetbrains.com/plugin/10036-mapstruct-support/versions\"], [\"src\", \"../../../../../assets/backend/JavaSpring/mapStruct.PNG\", \"alt\", \"mapStruct\", \"title\", \"mapStruct\"], [\"href\", \"https://www.youtube.com/watch?v=vTu2HQrXtyw\"], [\"src\", \"../../../../../assets/backend/JavaSpring/CreateObjectDBEntity.png\", \"alt\", \"CreateObjectDBEntity\", \"title\", \"CreateObjectDBEntity\"], [\"href\", \"https://github.com/lucasmoy-dev/Curso-de-Springboot-Hibernate/tree/main/src/main/java/com/cursojava/curso\"], [\"src\", \"../../../../../assets/framework/javaSpring/MVC.png\", \"alt\", \"MVC\"], [\"src\", \"../../../../../assets/framework/javaSpring/estrutura.png\", \"alt\", \"estrutura url\"]],\n  template: function SpringbootComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"table\", 1)(2, \"thead\")(3, \"tr\")(4, \"th\", 2);\n      i0.ɵɵtext(5, \"Referencia\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"th\", 2);\n      i0.ɵɵtext(7, \"Descripcion\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"th\", 2);\n      i0.ɵɵtext(9, \"Ejemplo\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(10, \"tbody\")(11, \"tr\")(12, \"td\")(13, \"strong\");\n      i0.ɵɵtext(14, \"Hay varios tipos de Java\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"td\");\n      i0.ɵɵtext(16, \" Actualmente hay dos tipos de Java: \");\n      i0.ɵɵelement(17, \"br\")(18, \"br\");\n      i0.ɵɵtext(19, \" 1. Java de Oracle es la version de pago \");\n      i0.ɵɵelement(20, \"br\")(21, \"br\");\n      i0.ɵɵtext(22, \" 2. OpenJDK que es la version openJava que ofrece Oracle free de empresas independientes \");\n      i0.ɵɵelement(23, \"br\")(24, \"br\");\n      i0.ɵɵtext(25, \" 3. \");\n      i0.ɵɵelementStart(26, \"a\", 3);\n      i0.ɵɵtext(27, \" Correto \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(28, \": que es la version que ofrece Amazon free, dispone de una certificacion de Java SE y con soporte a larga plazo \");\n      i0.ɵɵelement(29, \"br\")(30, \"br\");\n      i0.ɵɵtext(31, \" 4. \");\n      i0.ɵɵelementStart(32, \"a\", 4);\n      i0.ɵɵtext(33, \"RedHat\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(34, \" que tambien tiene openJDK \");\n      i0.ɵɵelement(35, \"br\")(36, \"br\");\n      i0.ɵɵtext(37, \" Esto es debido a que oracle al ser de pago compa\\u00F1ias independientes como \");\n      i0.ɵɵelementStart(38, \"strong\");\n      i0.ɵɵtext(39, \"Red hat con OpenJDK, Amazon Correto... entre otros \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(40, \"ofrecen un Java que tecnicamente es igual al de oracle \");\n      i0.ɵɵelement(41, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(42, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(43, \"tr\")(44, \"td\");\n      i0.ɵɵtext(45, \"Arquitectura\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(46, \"td\");\n      i0.ɵɵtext(47, \" Es posible encontrar una aplicacion donde contenga todos los servicios necesarios para que funcione lo cual se llama \");\n      i0.ɵɵelementStart(48, \"strong\");\n      i0.ɵɵtext(49, \"servidor de aplicaciones\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(50, \" y una aplicacion que este compuesta por varios servicios o microservicios a esto se le llama \");\n      i0.ɵɵelementStart(51, \"strong\");\n      i0.ɵɵtext(52, \"aplicacion autocontenida\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(53, \"td\");\n      i0.ɵɵelement(54, \"img\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(55, \"tr\")(56, \"td\");\n      i0.ɵɵtext(57, \"Contenedor de aplicaciones\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(58, \"td\");\n      i0.ɵɵtext(59, \" Java spring emplea como contenedor de aplicaciones o contenedor de servlet por defecto \");\n      i0.ɵɵelementStart(60, \"strong\");\n      i0.ɵɵtext(61, \"Tomcat Y Jetty O Undertow\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(62, \"br\")(63, \"br\");\n      i0.ɵɵelementStart(64, \"strong\");\n      i0.ɵɵtext(65, \"Docker y Kubernetes\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(66, \"br\");\n      i0.ɵɵtext(67, \" Para Despliege de Apps: Son plataformas para despliegue de aplicaciones de microservicios, \");\n      i0.ɵɵelementStart(68, \"strong\");\n      i0.ɵɵtext(69, \"Docker\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(70, \" crea un container en el cual se puede ejecutar la aplicacion y \");\n      i0.ɵɵelementStart(71, \"strong\");\n      i0.ɵɵtext(72, \"kubernete\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(73, \" toma el contenedor para desplegar la aplicacion con un escalamiento de forma horizontal \");\n      i0.ɵɵelementStart(74, \"strong\");\n      i0.ɵɵtext(75, \"informacion todama de go.ts\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(76, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(77, \"tr\")(78, \"td\")(79, \"a\", 6);\n      i0.ɵɵtext(80, \"Spring Initializr\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(81, \"br\")(82, \"br\");\n      i0.ɵɵtext(83, \" Ahora para descargar Repositorios \");\n      i0.ɵɵelementStart(84, \"strong\");\n      i0.ɵɵelement(85, \"br\")(86, \"br\");\n      i0.ɵɵelementStart(87, \"a\", 7);\n      i0.ɵɵtext(88, \"Maven Repository\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(89, \"td\");\n      i0.ɵɵtext(90, \" Es el framework de Java para crear aplicaciones autocontenidas \");\n      i0.ɵɵelementStart(91, \"a\", 8);\n      i0.ɵɵtext(92, \"PARA VER LA DOCUMENTACIO\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(93, \" y \");\n      i0.ɵɵelementStart(94, \"a\", 9);\n      i0.ɵɵtext(95, \"tambien en este espacio\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(96, \"br\")(97, \"br\");\n      i0.ɵɵtext(98, \" Herramienta de construcci\\u00F3n con Maven = gestionan las dependencias con archivos XML \");\n      i0.ɵɵelement(99, \"br\");\n      i0.ɵɵtext(100, \" Herramienta de construcci\\u00F3n con Grandle = gestionan las dependencias con archivos Grovy \");\n      i0.ɵɵelement(101, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(102, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(103, \"tr\")(104, \"td\");\n      i0.ɵɵtext(105, \"Anotaciones\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(106, \"td\")(107, \"a\", 10);\n      i0.ɵɵtext(108, \"Ver inf @PostConstruct y @PreDestroy\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(109, \"br\")(110, \"br\");\n      i0.ɵɵelementStart(111, \"strong\");\n      i0.ɵɵtext(112, \"@PostConstruct\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(113, \" //Spring llama a los m\\u00E9todos anotados con @PostConstruct solo una vez, justo despu\\u00E9s de la inicializaci\\u00F3n de las propiedades del bean . Tenga en cuenta que estos m\\u00E9todos se ejecutar\\u00E1n incluso si no hay nada que inicializar. \");\n      i0.ɵɵelement(114, \"br\");\n      i0.ɵɵtext(115, \" El m\\u00E9todo anotado con \");\n      i0.ɵɵelementStart(116, \"strong\");\n      i0.ɵɵtext(117, \"@PostConstruct\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(118, \" puede tener cualquier nivel de acceso pero no puede ser est\\u00E1tico. Debe ser declarado despues de la injeccion de dependencias, solo es posible en \");\n      i0.ɵɵelementStart(119, \"strong\");\n      i0.ɵɵtext(120, \"Beans\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(121, \" que soporten la injeccion de dependencias \");\n      i0.ɵɵelement(122, \"br\")(123, \"br\");\n      i0.ɵɵelementStart(124, \"strong\");\n      i0.ɵɵtext(125, \"@PreDestroy\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(126, \" //Un m\\u00E9todo anotado con @PreDestroy se ejecuta solo una vez, justo antes de que Spring elimine nuestro bean del contexto de la aplicaci\\u00F3n. \");\n      i0.ɵɵelement(127, \"br\");\n      i0.ɵɵtext(128, \" Al igual que con \");\n      i0.ɵɵelementStart(129, \"strong\");\n      i0.ɵɵtext(130, \"@PostConstruct\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(131, \" , los m\\u00E9todos anotados con @PreDestroy pueden tener cualquier nivel de acceso, pero no pueden ser est\\u00E1ticos. \");\n      i0.ɵɵelement(132, \"br\");\n      i0.ɵɵtext(133, \"El prop\\u00F3sito de este m\\u00E9todo debe ser liberar recursos o realizar cualquier otra tarea de limpieza antes de que se destruya el bean, por ejemplo, cerrar una conexi\\u00F3n a la base de datos. \");\n      i0.ɵɵelement(134, \"br\")(135, \"br\");\n      i0.ɵɵelementStart(136, \"strong\");\n      i0.ɵɵtext(137, \"@SpringBootApplication\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(138, \" //declara la class main por donde inicia el project \");\n      i0.ɵɵelement(139, \"br\");\n      i0.ɵɵelementStart(140, \"strong\");\n      i0.ɵɵtext(141, \"@RestController\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(142, \" //que la clase es un controller \");\n      i0.ɵɵelement(143, \"br\");\n      i0.ɵɵelementStart(144, \"strong\");\n      i0.ɵɵtext(145, \"@RequestMapping(\\\"/saludar\\\")\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(146, \" //define el path principal del controller \");\n      i0.ɵɵelement(147, \"br\");\n      i0.ɵɵelementStart(148, \"strong\");\n      i0.ɵɵtext(149, \"@GetMapping(\\\"/hola\\\")\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(150, \" // define el path secundario del controlador \");\n      i0.ɵɵelement(151, \"br\")(152, \"br\");\n      i0.ɵɵtext(153, \" JPA : Jpa es una especificaci\\u00F3n de Java, standar, para un framework ORM. \");\n      i0.ɵɵelementStart(154, \"strong\");\n      i0.ɵɵtext(155, \"Object Relation Mapping\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(156, \" Quiere decir que son ua aserie de reglas que Java define para que cualquier framework que quiera interactura con la BD de Java, tenga que seguir. \");\n      i0.ɵɵelement(157, \"br\")(158, \"br\");\n      i0.ɵɵelementStart(159, \"strong\");\n      i0.ɵɵtext(160, \"@Entity\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(161, \" para indicar que una clase java representa una tabla en la base de datos\");\n      i0.ɵɵelement(162, \"br\");\n      i0.ɵɵelementStart(163, \"strong\");\n      i0.ɵɵtext(164, \"@Table\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(165, \" recible el nombre de la tabla\");\n      i0.ɵɵelement(166, \"br\");\n      i0.ɵɵelementStart(167, \"strong\");\n      i0.ɵɵtext(168, \"@Column\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(169, \" se le pone a los atributos de la clase y se usa cuando los nombres entre la tabla y la entidad no coinciden \");\n      i0.ɵɵelementStart(170, \"strong\");\n      i0.ɵɵtext(171, \"@Column(unique = true, nullable= false) //para los campos Id o campos que son unicos y no permite valores nulos\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(172, \"br\");\n      i0.ɵɵelementStart(173, \"strong\");\n      i0.ɵɵtext(174, \"@Id y @EmbededId\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(175, \" representan la clave primaria, id para sencilla y embeded para compuesta\");\n      i0.ɵɵelement(176, \"br\");\n      i0.ɵɵelementStart(177, \"strong\");\n      i0.ɵɵtext(178, \"@GeneratedValue\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(179, \" genera valores automaticos para las llaves de las tablas\");\n      i0.ɵɵelement(180, \"br\");\n      i0.ɵɵelementStart(181, \"strong\");\n      i0.ɵɵtext(182, \"@OneToMany @ManyToOne\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(183, \" permite representar relaciones\");\n      i0.ɵɵelement(184, \"br\")(185, \"br\");\n      i0.ɵɵelementStart(186, \"u\")(187, \"a\", 11);\n      i0.ɵɵtext(188, \"Procedimiento Almacenado\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(189, \"br\")(190, \"br\");\n      i0.ɵɵelementStart(191, \"strong\");\n      i0.ɵɵtext(192, \"@Query\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(193, \"(nativeQuery = true) o con la anotaci\\u00F3n \");\n      i0.ɵɵelementStart(194, \"strong\");\n      i0.ɵɵtext(195, \"@Procedure\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(196, \".\");\n      i0.ɵɵelement(197, \"br\");\n      i0.ɵɵelementStart(198, \"strong\");\n      i0.ɵɵtext(199, \"@Query (value = \\\" SELECT * FROM categorias WHERE id_categoria = ? \\\", nativeQuery = true ).\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(200, \" Desde la interfaz del crud podemos implementar querys de manera nativa de esta manera\");\n      i0.ɵɵelement(201, \"br\");\n      i0.ɵɵelementStart(202, \"strong\");\n      i0.ɵɵtext(203, \"@Repository\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(204, \" Con este le indicamos a JavaSpring que la clase va a interacturar con la BD por que en esta clase estaran definidos los metodos que operaran con los registros de la BD.\");\n      i0.ɵɵelement(205, \"br\")(206, \"br\");\n      i0.ɵɵtext(207, \" MapStruct \");\n      i0.ɵɵelement(208, \"br\")(209, \"br\");\n      i0.ɵɵtext(210, \" @Mapper(componentModel = \\\"spring\\\") indicara que la interface va a mapear la table del dominio y la identidad \");\n      i0.ɵɵelement(211, \"br\");\n      i0.ɵɵtext(212, \" @Mappings grupo de traductor de campos entre tablas \");\n      i0.ɵɵelement(213, \"br\")(214, \"br\");\n      i0.ɵɵtext(215, \" @Mapping van cruzados y es de donde va a sacar el valor y donde se lo va a poner \");\n      i0.ɵɵelement(216, \"br\");\n      i0.ɵɵtext(217, \" @InheritInverseConfiguration es para hacer de manera inversa la traduccion ya con esto ya no es necesario declaran nuevamente mappings\");\n      i0.ɵɵelement(218, \"br\");\n      i0.ɵɵtext(219, \" @Autowired \");\n      i0.ɵɵelementStart(220, \"strong\");\n      i0.ɵɵtext(221, \"Inversion de control\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(222, \" esto es que el framework es el encargado de crear o instanciar objetos \");\n      i0.ɵɵelement(223, \"br\");\n      i0.ɵɵtext(224, \" @Service es el puente enter el controller y el repository \");\n      i0.ɵɵelement(225, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(226, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(227, \"tr\")(228, \"td\")(229, \"a\", 9);\n      i0.ɵɵtext(230, \"aplicacion.properties\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(231, \"br\")(232, \"br\");\n      i0.ɵɵelementStart(233, \"a\", 12);\n      i0.ɵɵtext(234, \"Ver tambien\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(235, \"td\");\n      i0.ɵɵtext(236, \" En este archivo podemos configurar diversos entornos para el desarrollo como un entrono de \");\n      i0.ɵɵelementStart(237, \"strong\");\n      i0.ɵɵtext(238, \"desarrollo, produccion, stage(prepoduccion....)\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(239, \"br\")(240, \"br\");\n      i0.ɵɵtext(241, \" * spring.profiles.active = dev // esto quiere decir que el applicacion.properties \\\"principal\\\" va a buscar el application-dev.properties y por hay va a desplegar la aplicacion \");\n      i0.ɵɵelement(242, \"br\")(243, \"br\");\n      i0.ɵɵtext(244, \" * server.port=8090 // Podemos configurar el puerto por el cual se despliega el contenedor \");\n      i0.ɵɵelement(245, \"br\")(246, \"br\")(247, \"br\");\n      i0.ɵɵtext(248, \" * server.servlet.context-path=/usuarios/uno //Podemos modificar el contex path \");\n      i0.ɵɵelement(249, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(250, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(251, \"tr\")(252, \"td\");\n      i0.ɵɵtext(253, \"Project Structure \");\n      i0.ɵɵelement(254, \"br\")(255, \"br\");\n      i0.ɵɵtext(256, \"Orientado al dominio\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(257, \"td\");\n      i0.ɵɵtext(258, \" * la capa de Dominio: Donde estan los DTO y los objetos de Dominio \");\n      i0.ɵɵelement(259, \"br\");\n      i0.ɵɵtext(260, \" * la capa de Repositorios: Donde estan definida las clases \");\n      i0.ɵɵelement(261, \"br\");\n      i0.ɵɵtext(262, \" * la capa de servicios: esta encargada de ser puente entre los los controladores de la Api y la persistencia \");\n      i0.ɵɵelement(263, \"br\");\n      i0.ɵɵtext(264, \" * la capa web: es donde estan definido los controllers \");\n      i0.ɵɵelement(265, \"br\");\n      i0.ɵɵtext(266, \" * la capa de la persistencia: es la encargada de interacturar con la BD \");\n      i0.ɵɵelement(267, \"br\")(268, \"br\")(269, \"br\")(270, \"img\", 13);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(271, \"td\");\n      i0.ɵɵelement(272, \"img\", 14);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(273, \"tr\")(274, \"td\");\n      i0.ɵɵtext(275, \"Structure\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(276, \"td\", 15);\n      i0.ɵɵelement(277, \"img\", 16);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(278, \"tr\")(279, \"td\");\n      i0.ɵɵtext(280, \"JPA\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(281, \"td\");\n      i0.ɵɵtext(282, \" Es un framework ORM. Es una especificaci\\u00F3n de Java, standar o serie de reglas que JAVA define para que cualquier framework que quiera interecatuar con una BD tiene que seguir, por medio de Anotaciones o Decoradores conecta la BD y evitamos hacer consultas de manera nativa o de manera SQL \");\n      i0.ɵɵelement(283, \"br\")(284, \"br\");\n      i0.ɵɵelementStart(285, \"strong\");\n      i0.ɵɵtext(286, \"@Entity\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(287, \" para indicar que una clase java representa una tabla en la base de datos\");\n      i0.ɵɵelement(288, \"br\");\n      i0.ɵɵelementStart(289, \"strong\");\n      i0.ɵɵtext(290, \"@Table\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(291, \" recible el nombre de la tabla\");\n      i0.ɵɵelement(292, \"br\");\n      i0.ɵɵelementStart(293, \"strong\");\n      i0.ɵɵtext(294, \"@Column\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(295, \" se le pone a los atributos de la clase y se usa cuando los nombres entre la tabla y la entidad no coinciden\");\n      i0.ɵɵelement(296, \"br\");\n      i0.ɵɵelementStart(297, \"strong\");\n      i0.ɵɵtext(298, \"@Id y @EmbededId\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(299, \" representan la clave primaria, id para sencilla y embeded para compuesta\");\n      i0.ɵɵelement(300, \"br\");\n      i0.ɵɵelementStart(301, \"strong\");\n      i0.ɵɵtext(302, \"@GeneratedValue\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(303, \" genera valores automaticos para las llaves de las tablas\");\n      i0.ɵɵelement(304, \"br\");\n      i0.ɵɵelementStart(305, \"strong\");\n      i0.ɵɵtext(306, \"@OneToMany @ManyToOne\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(307, \" permite representar relaciones\");\n      i0.ɵɵelement(308, \"br\");\n      i0.ɵɵelementStart(309, \"u\")(310, \"a\", 11);\n      i0.ɵɵtext(311, \"Procedimiento Almacenado\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(312, \"br\")(313, \"br\");\n      i0.ɵɵelementStart(314, \"strong\");\n      i0.ɵɵtext(315, \"@Query\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(316, \"(nativeQuery = true) o con la anotaci\\u00F3n \");\n      i0.ɵɵelementStart(317, \"strong\");\n      i0.ɵɵtext(318, \"@Procedure\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(319, \".\");\n      i0.ɵɵelement(320, \"br\");\n      i0.ɵɵelementStart(321, \"strong\");\n      i0.ɵɵtext(322, \"@Query (value = \\\" SELECT * FROM categorias WHERE id_categoria = ? \\\", nativeQuery = true ).\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(323, \" Desde la interfaz del crud podemos implementar querys de manera nativa de esta manera\");\n      i0.ɵɵelement(324, \"br\");\n      i0.ɵɵelementStart(325, \"strong\");\n      i0.ɵɵtext(326, \"@Repository\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(327, \" Con este le indicamos a JavaSpring que la clase va a interacturar con la BD por que en esta clase estaran definidos los metodos que operaran con los registros de la BD.\");\n      i0.ɵɵelement(328, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(329, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(330, \"tr\")(331, \"td\");\n      i0.ɵɵelement(332, \"a\", 17);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(333, \"td\");\n      i0.ɵɵtext(334, \" ver mas info \");\n      i0.ɵɵelementStart(335, \"a\", 18);\n      i0.ɵɵtext(336, \"En el siguiente enlace\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(337, \"td\");\n      i0.ɵɵelement(338, \"img\", 19);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(339, \"tr\")(340, \"td\");\n      i0.ɵɵtext(341, \"build.gradle\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(342, \"td\");\n      i0.ɵɵtext(343, \" Es este archivo estaran \");\n      i0.ɵɵelement(344, \"br\")(345, \"br\");\n      i0.ɵɵtext(346, \" * los implementation que son la injeccion de dependencias o librerias que nos permite maven Reposory agregar al proyecto \");\n      i0.ɵɵelement(347, \"br\")(348, \"br\");\n      i0.ɵɵtext(349, \" * podemos indicar la BD \");\n      i0.ɵɵelementStart(350, \"strong\");\n      i0.ɵɵtext(351, \"runtimeOnly\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(352, \" por que solo la necesitamos en tiempo de ejecucion y entre ' ' agregamos la dependencia que nos brinda maven repository para la BD \");\n      i0.ɵɵelement(353, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(354, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(355, \"tr\")(356, \"td\")(357, \"a\", 20);\n      i0.ɵɵtext(358, \"llaves PK Compuestas\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(359, \"td\")(360, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(361, \"tr\")(362, \"td\")(363, \"a\", 21);\n      i0.ɵɵtext(364, \"patron Data mapper\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(365, \"td\");\n      i0.ɵɵtext(366, \" Es la forma en la cual traducimos o convertimos una tabla en otra, esto con el fin de tener tablas definidas en termino de la persistencia con sus semejantes en termino de dominio \");\n      i0.ɵɵelement(367, \"br\")(368, \"br\");\n      i0.ɵɵtext(369, \" Con esto descoplamos la BD de la Api \");\n      i0.ɵɵelement(370, \"br\");\n      i0.ɵɵtext(371, \" mapeamos solo los campos que son necesarios y no todos los campo de las tablas ya que estos puede tener sentido de existencia en BD \");\n      i0.ɵɵelement(372, \"br\");\n      i0.ɵɵtext(373, \" De esta manera la Api podria cambiar de BD y no tendria conflicto con el codigo \");\n      i0.ɵɵelement(374, \"br\")(375, \"br\");\n      i0.ɵɵtext(376, \" Para usarlo debemos: \");\n      i0.ɵɵelement(377, \"br\")(378, \"br\");\n      i0.ɵɵtext(379, \" 1. Descargarlo \");\n      i0.ɵɵelementStart(380, \"a\", 22);\n      i0.ɵɵtext(381, \"En la pagina oficial\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(382, \"br\")(383, \"br\");\n      i0.ɵɵtext(384, \" 2. se debe instalar un plugin que autocompletara las structuras de mapstruc dentro de intellintIDea \");\n      i0.ɵɵelementStart(385, \"a\", 23)(386, \"strong\");\n      i0.ɵɵtext(387, \"Jet Brains\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(388, \"br\")(389, \"br\");\n      i0.ɵɵtext(390, \" Otra forma de instalar plugins en IntelliJ es ir a files > Settings o Ctrl + Alt + S / en Mac es con command + , (coma) En el panel izquierdo se selecciona \\\"plugins\\\" y solo queda buscar \\u201CMapStruct Support\\u201D e instalarlo \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(391, \"td\");\n      i0.ɵɵelement(392, \"img\", 24);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(393, \"tr\");\n      i0.ɵɵelement(394, \"td\")(395, \"td\")(396, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(397, \"tr\")(398, \"td\")(399, \"a\", 25);\n      i0.ɵɵtext(400, \"Base de datos\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(401, \"td\");\n      i0.ɵɵtext(402, \" Cuando en nuestro codigo estamos configurando la base de datos podemos indicar que al ejecutar el codigo este el back quien crea la BD o si la BD ya existe que la actualice \");\n      i0.ɵɵelement(403, \"br\")(404, \"br\");\n      i0.ɵɵtext(405, \"De la manera como lo indica la imagen \");\n      i0.ɵɵelement(406, \"br\")(407, \"br\");\n      i0.ɵɵelementStart(408, \"strong\");\n      i0.ɵɵtext(409, \"spring.jpa.hibernate.ddl-auto=update/none\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(410, \"td\");\n      i0.ɵɵelement(411, \"img\", 26);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(412, \"tr\")(413, \"td\");\n      i0.ɵɵtext(414, \"Imagenes importantes curso JAVA spring \");\n      i0.ɵɵelement(415, \"br\");\n      i0.ɵɵelementStart(416, \"a\", 27);\n      i0.ɵɵtext(417, \"repositorio\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(418, \"td\");\n      i0.ɵɵelement(419, \"img\", 28);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(420, \"td\");\n      i0.ɵɵelement(421, \"img\", 29);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(422, \"tr\");\n      i0.ɵɵelement(423, \"td\")(424, \"td\")(425, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(426, \"tr\");\n      i0.ɵɵelement(427, \"td\")(428, \"td\")(429, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(430, \"tr\");\n      i0.ɵɵelement(431, \"td\")(432, \"td\")(433, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(434, \"tr\");\n      i0.ɵɵelement(435, \"td\")(436, \"td\")(437, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(438, \"tr\");\n      i0.ɵɵelement(439, \"td\")(440, \"td\")(441, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(442, \"tr\");\n      i0.ɵɵelement(443, \"td\")(444, \"td\")(445, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(446, \"tr\");\n      i0.ɵɵelement(447, \"td\")(448, \"td\")(449, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(450, \"tr\");\n      i0.ɵɵelement(451, \"td\")(452, \"td\")(453, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(454, \"tr\");\n      i0.ɵɵelement(455, \"td\")(456, \"td\")(457, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(458, \"tr\");\n      i0.ɵɵelement(459, \"td\")(460, \"td\")(461, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(462, \"tr\");\n      i0.ɵɵelement(463, \"td\")(464, \"td\")(465, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(466, \"tr\");\n      i0.ɵɵelement(467, \"td\")(468, \"td\")(469, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(470, \"tr\");\n      i0.ɵɵelement(471, \"td\")(472, \"td\")(473, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(474, \"tr\");\n      i0.ɵɵelement(475, \"td\")(476, \"td\")(477, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(478, \"tr\");\n      i0.ɵɵelement(479, \"td\")(480, \"td\")(481, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(482, \"tr\");\n      i0.ɵɵelement(483, \"td\")(484, \"td\")(485, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(486, \"tr\");\n      i0.ɵɵelement(487, \"td\")(488, \"td\")(489, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(490, \"tr\");\n      i0.ɵɵelement(491, \"td\")(492, \"td\")(493, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(494, \"tr\");\n      i0.ɵɵelement(495, \"td\")(496, \"td\")(497, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(498, \"tr\");\n      i0.ɵɵelement(499, \"td\")(500, \"td\")(501, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(502, \"tr\");\n      i0.ɵɵelement(503, \"td\")(504, \"td\")(505, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(506, \"tr\");\n      i0.ɵɵelement(507, \"td\")(508, \"td\")(509, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(510, \"tr\");\n      i0.ɵɵelement(511, \"td\")(512, \"td\")(513, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(514, \"tr\");\n      i0.ɵɵelement(515, \"td\")(516, \"td\")(517, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(518, \"tr\");\n      i0.ɵɵelement(519, \"td\")(520, \"td\")(521, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(522, \"tr\");\n      i0.ɵɵelement(523, \"td\")(524, \"td\")(525, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(526, \"tr\");\n      i0.ɵɵelement(527, \"td\")(528, \"td\")(529, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(530, \"tr\");\n      i0.ɵɵelement(531, \"td\")(532, \"td\")(533, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(534, \"tr\");\n      i0.ɵɵelement(535, \"td\")(536, \"td\")(537, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(538, \"tr\");\n      i0.ɵɵelement(539, \"td\")(540, \"td\")(541, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(542, \"tr\");\n      i0.ɵɵelement(543, \"td\")(544, \"td\")(545, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(546, \"tr\");\n      i0.ɵɵelement(547, \"td\")(548, \"td\")(549, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(550, \"tr\");\n      i0.ɵɵelement(551, \"td\")(552, \"td\")(553, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(554, \"tr\");\n      i0.ɵɵelement(555, \"td\")(556, \"td\")(557, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(558, \"tr\");\n      i0.ɵɵelement(559, \"td\")(560, \"td\")(561, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(562, \"tr\");\n      i0.ɵɵelement(563, \"td\")(564, \"td\")(565, \"td\");\n      i0.ɵɵelementEnd()()()();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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AA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK","names":["SpringbootComponent","constructor","abrellave","cierrallave","abreDiamante","cierraDiamante","abreParentesis","cierraParentesis","abreCuadro","cierraCuadro","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\HP\\Desktop\\juanTafur\\jugutafur\\Support-FrontEnd-Angular-full\\src\\app\\core\\components\\framewoks\\springboot\\springboot.component.ts","C:\\Users\\HP\\Desktop\\juanTafur\\jugutafur\\Support-FrontEnd-Angular-full\\src\\app\\core\\components\\framewoks\\springboot\\springboot.component.html"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-springboot',\n  templateUrl: './springboot.component.html',\n  styleUrls: ['./springboot.component.scss']\n})\nexport class SpringbootComponent {\n\n  public abrellave: string;\n  public cierrallave: string;\n  public abreDiamante: string;\n  public cierraDiamante: string;\n  public abreParentesis: string;\n  public cierraParentesis: string;\n  public abreCuadro: string;\n  public cierraCuadro: string;\n\n  constructor() {\n    this.abrellave= \"{\";\n    this.cierrallave=\"}\";\n    this.abreDiamante= \"<\";\n    this.cierraDiamante= \">\";\n    this.abreParentesis= \"(\";\n    this.cierraParentesis= \")\";\n    this.abreCuadro= \"[\";\n    this.cierraCuadro= \"]\";\n  }\n}\n","<div class=\"container\">\n  <table class=\"table table-striped table-hover table-bordered align-middle\">\n      <thead>\n          <tr>\n              <th scope=\"col\">Referencia</th>\n              <th scope=\"col\">Descripcion</th>\n              <th scope=\"col\">Ejemplo</th>\n          </tr>\n      </thead>\n      <tbody>\n          <tr>\n              <td><strong>Hay varios tipos de Java</strong></td>\n              <td>\n                  Actualmente hay dos tipos de Java: <br><br>\n                  1. Java de Oracle es la version de pago <br><br>\n                  2. OpenJDK que es la version openJava que ofrece Oracle free de empresas independientes <br><br>\n                  3. <a href=\"https://docs.aws.amazon.com/es_es/corretto/latest/corretto-11-ug/what-is-corretto-11.html\"> Correto </a>: que es la version que ofrece Amazon free, dispone de una certificacion de Java SE y con soporte a larga plazo <br><br>\n                  4. <a href=\"https://www.redhat.com/es/topics/cloud-native-apps/what-is-a-Java-runtime-environment\">RedHat</a> que tambien tiene openJDK <br><br>\n                  Esto es debido a que oracle al ser de pago compañias independientes como <strong>Red hat con OpenJDK, Amazon Correto... entre otros </strong>ofrecen un Java que tecnicamente es igual al de oracle <br>\n              </td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td>Arquitectura</td>\n              <td>\n                  Es posible encontrar una aplicacion donde contenga todos los servicios necesarios para que funcione lo cual se llama <strong>servidor de aplicaciones</strong> y una aplicacion que este compuesta por varios servicios o microservicios a esto se le llama <strong>aplicacion autocontenida</strong>\n              </td>\n              <td>\n                  <img\n                  src=\"../../../../../assets/backend/JavaSpring/aplicacionAutocontenida.png\"\n                  alt=\"aplicacionAutocontenida\"\n                  title=\"aplicacionAutocontenida\">\n              </td>\n          </tr>\n          <tr>\n              <td>Contenedor de aplicaciones</td>\n              <td>\n                  Java spring emplea como contenedor de aplicaciones o contenedor de servlet por defecto <strong>Tomcat Y Jetty O Undertow</strong><br><br>\n                  <strong>Docker y Kubernetes</strong><br>\n                  Para Despliege de Apps: Son plataformas para despliegue de aplicaciones de microservicios, <strong>Docker</strong> crea un container en el cual se puede ejecutar la aplicacion y <strong>kubernete</strong> toma el contenedor para desplegar la aplicacion con un escalamiento de forma horizontal <strong>informacion todama de go.ts</strong>\n              </td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td>\n                  <a href=\"https://start.spring.io/\">Spring Initializr</a><br><br>\n                  Ahora para descargar Repositorios <strong><br><br><a href=\"https://mvnrepository.com/\">Maven Repository</a></strong>\n              </td>\n              <td>\n                  Es el framework de Java para crear aplicaciones autocontenidas <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.spring-application\">PARA VER LA DOCUMENTACIO</a> y <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html\">tambien en este espacio</a><br><br>\n                  Herramienta de construcción con Maven = gestionan las dependencias con archivos XML <br>\n                  Herramienta de construcción con Grandle = gestionan las dependencias con archivos Grovy <br>\n              </td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td>Anotaciones</td>\n              <td>\n                  <a href=\"https://www.baeldung.com/spring-postconstruct-predestroy\">Ver inf @PostConstruct y @PreDestroy</a> <br><br>\n                  <strong>@PostConstruct</strong> //Spring llama a los métodos anotados con @PostConstruct solo una vez, justo después de la inicialización de las propiedades del bean . Tenga en cuenta que estos métodos se ejecutarán incluso si no hay nada que inicializar. <br>\n                  El método anotado con <strong>@PostConstruct</strong> puede tener cualquier nivel de acceso pero no puede ser estático. Debe ser declarado despues de la injeccion de dependencias, solo es posible en <strong>Beans</strong> que soporten la injeccion de dependencias <br>\n                  <br>\n                  <strong>@PreDestroy</strong> //Un método anotado con @PreDestroy se ejecuta solo una vez, justo antes de que Spring elimine nuestro bean del contexto de la aplicación.\n                  <br>\n                  Al igual que con <strong>@PostConstruct</strong> , los métodos anotados con @PreDestroy pueden tener cualquier nivel de acceso, pero no pueden ser estáticos.\n                  <br>El propósito de este método debe ser liberar recursos o realizar cualquier otra tarea de limpieza antes de que se destruya el bean, por ejemplo, cerrar una conexión a la base de datos. <br><br>\n                  <strong>@SpringBootApplication</strong> //declara la class main por donde inicia el project <br>\n                  <strong>@RestController</strong>  //que la clase es un controller <br>\n                  <strong>@RequestMapping(\"/saludar\")</strong>  //define el path principal del controller <br>\n                  <strong>@GetMapping(\"/hola\")</strong> // define el path secundario del controlador <br><br>\n\n                  JPA : Jpa es una especificación de Java, standar, para un framework ORM. <strong>Object Relation Mapping</strong> Quiere decir que son ua aserie de reglas que Java define para que cualquier framework que quiera interactura con la BD de Java, tenga que seguir.\n                  <br><br>\n                  <strong>@Entity</strong> para indicar que una clase java representa una tabla en la base de datos<br>\n                  <strong>@Table</strong> recible el nombre de la tabla<br>\n                  <strong>@Column</strong> se le pone a los atributos de la clase y se usa cuando los nombres entre la tabla y la entidad no coinciden <strong>@Column(unique = true, nullable= false) //para los campos Id o campos que son unicos y no permite valores nulos</strong> <br>\n                  <strong>@Id y @EmbededId</strong> representan la clave primaria, id para sencilla y embeded para compuesta<br>\n                  <strong>@GeneratedValue</strong> genera valores automaticos para las llaves de las tablas<br>\n                  <strong>@OneToMany @ManyToOne</strong> permite representar relaciones<br><br>\n                  <u><a href=\"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.stored-procedures\">Procedimiento Almacenado</a></u><br><br>\n                  <strong>@Query</strong>(nativeQuery = true) o con la anotación <strong>@Procedure</strong>.<br>\n                  <strong>@Query (value = \" SELECT * FROM categorias WHERE id_categoria = ? \", nativeQuery = true ).</strong> Desde la interfaz del crud podemos implementar querys de manera nativa de esta manera<br>\n                  <strong>@Repository</strong> Con este le indicamos a JavaSpring que la clase va a interacturar con la BD por que en esta clase estaran definidos los metodos que operaran con los registros de la BD.<br><br>\n                  MapStruct <br><br>\n                  @Mapper(componentModel = \"spring\") indicara que la interface va a mapear la table del dominio y la identidad <br>\n                  @Mappings grupo de traductor de campos entre tablas <br><br>\n                  @Mapping van cruzados y es de donde va a sacar el valor y donde se lo va a poner <br>\n                  @InheritInverseConfiguration es para hacer de manera inversa la traduccion ya con esto ya no es necesario declaran nuevamente mappings<br>\n                  @Autowired <strong>Inversion de control</strong> esto es que el framework es el encargado de crear o instanciar objetos <br>\n                  @Service es el puente enter el controller y el repository <br>\n\n              </td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html\">aplicacion.properties</a><br><br><a href=\"https://www.javatpoint.com/spring-boot-properties\">Ver tambien</a></td>\n              <td>\n                  En este archivo podemos configurar diversos entornos para el desarrollo como un entrono de <strong>desarrollo, produccion, stage(prepoduccion....)</strong> <br><br>\n                  * spring.profiles.active = dev // esto quiere decir que el applicacion.properties \"principal\" va a buscar el application-dev.properties y por hay va a desplegar la aplicacion <br><br>\n                  * server.port=8090 // Podemos configurar el puerto por el cual se despliega el contenedor <br>\n                  <br><br>\n                  * server.servlet.context-path=/usuarios/uno //Podemos modificar el contex path <br>\n              </td>\n              <td></td>\n          </tr>\n          <tr>\n              <td>Project Structure <br><br>Orientado al dominio</td>\n              <td>\n                  * la capa de Dominio: Donde estan los DTO y los objetos de Dominio <br>\n                  * la capa de Repositorios: Donde estan definida las clases <br>\n                  * la capa de servicios: esta encargada de ser puente entre los los controladores de la Api y la persistencia <br>\n                  * la capa web: es donde estan definido los controllers <br>\n                  * la capa de la persistencia: es la encargada de interacturar con la BD <br><br><br>\n                  <img\n                  src=\"../../../../../assets/backend/JavaSpring/projectStructure.png\"\n                  alt=\"projectStructure\"\n                  title=\"projectStructure\">\n              </td>\n              <td>\n                  <img\n                  src=\"../../../../../assets/backend/JavaSpring/Structure.png\"\n                  alt=\"Structure\"\n                  title=\"Structure\">\n              </td>\n          </tr>\n\n          <tr>\n              <td>Structure</td>\n              <td colspan=\"2\">\n                  <img\n                  src=\"../../../../../assets/backend/JavaSpring/structure2.png\"\n                  alt=\"structure2\"\n                  title=\"structure2\">\n              </td>\n          </tr>\n\n          <tr>\n              <td>JPA</td>\n              <td>\n                  Es un framework ORM. Es una especificación de Java, standar o serie de reglas que JAVA define para que cualquier framework que quiera interecatuar con una BD tiene que seguir, por medio de Anotaciones o Decoradores conecta la BD y evitamos hacer consultas de manera nativa o de manera SQL <br><br>\n                  <strong>@Entity</strong> para indicar que una clase java representa una tabla en la base de datos<br>\n                  <strong>@Table</strong> recible el nombre de la tabla<br>\n                  <strong>@Column</strong> se le pone a los atributos de la clase y se usa cuando los nombres entre la tabla y la entidad no coinciden<br>\n                  <strong>@Id y @EmbededId</strong> representan la clave primaria, id para sencilla y embeded para compuesta<br>\n                  <strong>@GeneratedValue</strong> genera valores automaticos para las llaves de las tablas<br>\n                  <strong>@OneToMany @ManyToOne</strong> permite representar relaciones<br>\n                  <u><a href=\"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.stored-procedures\">Procedimiento Almacenado</a></u><br><br>\n                  <strong>@Query</strong>(nativeQuery = true) o con la anotación <strong>@Procedure</strong>.<br>\n                  <strong>@Query (value = \" SELECT * FROM categorias WHERE id_categoria = ? \", nativeQuery = true ).</strong> Desde la interfaz del crud podemos implementar querys de manera nativa de esta manera<br>\n                  <strong>@Repository</strong> Con este le indicamos a JavaSpring que la clase va a interacturar con la BD por que en esta clase estaran definidos los metodos que operaran con los registros de la BD.<br>\n              </td>\n              <td></td>\n          </tr>\n\n\n          <tr>\n              <td><a href=\"https://platzi.com/clases/1996-java-spring/31508-query-methods/\"></a></td>\n              <td>\n                  ver mas info <a href=\"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods\">En el siguiente enlace</a>\n              </td>\n              <td>\n                  <img\n                  src=\"../../../../../assets/backend/JavaSpring/springData.png\"\n                  alt=\"springData\"\n                  title=\"springData\">\n              </td>\n          </tr>\n\n          <tr>\n              <td>build.gradle</td>\n              <td>\n                  Es este archivo estaran  <br><br>\n                  * los implementation que son la injeccion de dependencias o librerias que nos permite maven Reposory agregar al proyecto <br><br>\n                  * podemos indicar la BD <strong>runtimeOnly</strong> por que solo la necesitamos en tiempo de ejecucion y entre ' ' agregamos la dependencia que nos brinda maven repository para la BD <br>\n              </td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td><a href=\"https://platzi.com/clases/1996-java-spring/31505-crear-entity-cuando-su-clave-primaria-es-compuesta/\">llaves PK Compuestas</a></td>\n              <td>\n\n              </td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td><a href=\"https://platzi.com/clases/1996-java-spring/31510-que-es-el-patron-data-mapper-y-que-resuelve/\">patron Data mapper</a></td>\n              <td>\n                  Es la forma en la cual traducimos o convertimos una tabla en otra, esto con el fin de tener tablas definidas en termino de la persistencia con sus semejantes en termino de dominio <br><br>\n                  Con esto descoplamos la BD de la Api <br>\n                  mapeamos solo los campos que son necesarios y no todos los campo de las tablas ya que estos puede tener sentido de existencia en BD <br>\n                  De esta manera la Api podria cambiar de BD y no tendria conflicto con el codigo <br><br>\n                  Para usarlo debemos: <br><br>\n                  1. Descargarlo <a href=\"https://mapstruct.org/\">En la pagina oficial</a> <br><br>\n                  2. se debe instalar un plugin que autocompletara las structuras de mapstruc dentro de intellintIDea <a href=\"https://plugins.jetbrains.com/plugin/10036-mapstruct-support/versions\"><strong>Jet Brains</strong></a><br><br>\n\n                  Otra forma de instalar plugins en IntelliJ es ir a files > Settings o Ctrl + Alt + S / en Mac es con command + , (coma)\n                      En el panel izquierdo se selecciona \"plugins\"\n                      y solo queda buscar “MapStruct Support” e instalarlo\n              </td>\n              <td>\n                  <img\n                  src=\"../../../../../assets/backend/JavaSpring/mapStruct.PNG\"\n                  alt=\"mapStruct\"\n                  title=\"mapStruct\">\n              </td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td><a href=\"https://www.youtube.com/watch?v=vTu2HQrXtyw\">Base de datos</a></td>\n              <td>\n                Cuando en nuestro codigo estamos configurando la base de datos podemos indicar que al ejecutar el codigo este el back quien crea la BD o si la BD ya existe que la actualice <br><br>De la manera como lo indica la imagen <br><br>\n                <strong>spring.jpa.hibernate.ddl-auto=update/none</strong>\n              </td>\n              <td>\n                <img\n                src=\"../../../../../assets/backend/JavaSpring/CreateObjectDBEntity.png\"\n                alt=\"CreateObjectDBEntity\"\n                title=\"CreateObjectDBEntity\">\n              </td>\n          </tr>\n\n\n          <tr>\n              <td>Imagenes importantes curso JAVA spring <br>\n              <a href=\"https://github.com/lucasmoy-dev/Curso-de-Springboot-Hibernate/tree/main/src/main/java/com/cursojava/curso\">repositorio</a>\n              </td>\n              <td><img src=\"../../../../../assets/framework/javaSpring/MVC.png\" alt=\"MVC\"></td>\n              <td><img src=\"../../../../../assets/framework/javaSpring/estrutura.png\" alt=\"estrutura url\"></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n      </tbody>\n  </table>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}