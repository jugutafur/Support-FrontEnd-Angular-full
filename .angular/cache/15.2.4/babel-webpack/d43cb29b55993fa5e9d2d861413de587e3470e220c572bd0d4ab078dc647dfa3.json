{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class SpringbootComponent {\n  constructor() {\n    this.abrellave = \"{\";\n    this.cierrallave = \"}\";\n    this.abreDiamante = \"<\";\n    this.cierraDiamante = \">\";\n    this.abreParentesis = \"(\";\n    this.cierraParentesis = \")\";\n    this.abreCuadro = \"[\";\n    this.cierraCuadro = \"]\";\n    this.arroba = \"@\";\n  }\n}\nSpringbootComponent.ɵfac = function SpringbootComponent_Factory(t) {\n  return new (t || SpringbootComponent)();\n};\nSpringbootComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SpringbootComponent,\n  selectors: [[\"app-springboot\"]],\n  decls: 643,\n  vars: 35,\n  consts: [[1, \"container\"], [1, \"table\", \"table-striped\", \"table-hover\", \"table-bordered\", \"align-middle\"], [\"scope\", \"col\"], [\"href\", \"https://docs.aws.amazon.com/es_es/corretto/latest/corretto-11-ug/what-is-corretto-11.html\"], [\"href\", \"https://www.redhat.com/es/topics/cloud-native-apps/what-is-a-Java-runtime-environment\"], [\"src\", \"../../../../../assets/backend/JavaSpring/aplicacionAutocontenida.png\", \"alt\", \"aplicacionAutocontenida\", \"title\", \"aplicacionAutocontenida\"], [\"href\", \"https://start.spring.io/\"], [\"href\", \"https://mvnrepository.com/\"], [\"href\", \"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.spring-application\"], [\"href\", \"https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html\"], [\"href\", \"https://www.javatpoint.com/spring-boot-properties\"], [\"src\", \"../../../../../assets/backend/JavaSpring/projectStructure.png\", \"alt\", \"projectStructure\", \"title\", \"projectStructure\"], [\"src\", \"../../../../../assets/backend/JavaSpring/Structure.png\", \"alt\", \"Structure\", \"title\", \"Structure\"], [\"src\", \"../../../../../assets/framework/JavaSpringBoot/Entity.PNG\", \"alt\", \"Entity\", \"title\", \"Entity\"], [\"colspan\", \"2\"], [\"src\", \"../../../../../assets/backend/JavaSpring/structure2.png\", \"alt\", \"structure2\", \"title\", \"structure2\"], [\"href\", \"https://github.com/lucasmoy-dev/Curso-de-Springboot-Hibernate/tree/main/src/main/java/com/cursojava/curso\"], [\"src\", \"../../../../../assets/framework/javaSpring/MVC.png\", \"alt\", \"MVC\"], [\"src\", \"../../../../../assets/framework/javaSpring/estrutura.png\", \"alt\", \"estrutura url\"], [\"colspan\", \"3\", 1, \"titulo\"], [\"src\", \"../../../../../assets/framework/JavaSpringBoot/postgresSQL.PNG\", \"alt\", \"postgresSQL url\"], [\"href\", \"https://www.baeldung.com/spring-postconstruct-predestroy\"], [2, \"background-color\", \"#FFFF00\"], [\"href\", \"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.stored-procedures\"], [\"href\", \"https://platzi.com/clases/1996-java-spring/31505-crear-entity-cuando-su-clave-primaria-es-compuesta/\"], [\"src\", \"../../../../../assets/framework/JavaSpringBoot/Primary Key Compuesta.png\", \"alt\", \"Primary Key Compuesta\", \"title\", \"Primary Key Compuesta\"], [\"href\", \"https://platzi.com/clases/1996-java-spring/31508-query-methods/\"], [\"href\", \"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods\"], [\"src\", \"../../../../../assets/framework/JavaSpringBoot/QueriesMethods.PNG\", \"alt\", \"QueriesMethods\", \"title\", \"QueriesMethods\"], [\"src\", \"../../../../../assets/backend/JavaSpring/springData.png\", \"alt\", \"springData\", \"title\", \"springData\"], [\"href\", \"https://platzi.com/clases/1996-java-spring/31510-que-es-el-patron-data-mapper-y-que-resuelve/\"], [\"href\", \"https://mapstruct.org/\"], [\"href\", \"https://plugins.jetbrains.com/plugin/10036-mapstruct-support/versions\"], [\"src\", \"../../../../../assets/backend/JavaSpring/mapStruct.PNG\", \"alt\", \"mapStruct\", \"title\", \"mapStruct\"], [\"src\", \"../../../../../assets/framework/JavaSpringBoot/DataMapper.png\", \"alt\", \"DataMapper\", \"title\", \"DataMapper\"], [\"src\", \"../../../../../assets/framework/JavaSpringBoot/Mapper.PNG\", \"alt\", \"Mapper\", \"title\", \"Mapper\"], [\"href\", \"https://www.youtube.com/watch?v=vTu2HQrXtyw\"], [\"src\", \"../../../../../assets/backend/JavaSpring/CreateObjectDBEntity.png\", \"alt\", \"CreateObjectDBEntity\", \"title\", \"CreateObjectDBEntity\"], [\"href\", \"https://platzi.com/new-home/clases/1996-java-spring/31506-mapear-relaciones-entre-clases/\"], [\"src\", \"../../../../../assets/framework/JavaSpringBoot/CrudRepository.PNG\", \"alt\", \"CrudRepository\", \"title\", \"CrudRepository\"]],\n  template: function SpringbootComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"table\", 1)(2, \"thead\")(3, \"tr\")(4, \"th\", 2);\n      i0.ɵɵtext(5, \"Referencia\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"th\", 2);\n      i0.ɵɵtext(7, \"Descripcion\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"th\", 2);\n      i0.ɵɵtext(9, \"Ejemplo\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(10, \"tbody\")(11, \"tr\")(12, \"td\")(13, \"strong\");\n      i0.ɵɵtext(14, \"Hay varios tipos de Java\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"td\");\n      i0.ɵɵtext(16, \" Actualmente hay dos tipos de Java: \");\n      i0.ɵɵelement(17, \"br\")(18, \"br\");\n      i0.ɵɵtext(19, \" 1. Java de Oracle es la version de pago \");\n      i0.ɵɵelement(20, \"br\")(21, \"br\");\n      i0.ɵɵtext(22, \" 2. OpenJDK que es la version openJava que ofrece Oracle free de empresas independientes \");\n      i0.ɵɵelement(23, \"br\")(24, \"br\");\n      i0.ɵɵtext(25, \" 3. \");\n      i0.ɵɵelementStart(26, \"a\", 3);\n      i0.ɵɵtext(27, \" Correto \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(28, \": que es la version que ofrece Amazon free, dispone de una certificacion de Java SE y con soporte a larga plazo \");\n      i0.ɵɵelement(29, \"br\")(30, \"br\");\n      i0.ɵɵtext(31, \" 4. \");\n      i0.ɵɵelementStart(32, \"a\", 4);\n      i0.ɵɵtext(33, \"RedHat\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(34, \" que tambien tiene openJDK \");\n      i0.ɵɵelement(35, \"br\")(36, \"br\");\n      i0.ɵɵtext(37, \" Esto es debido a que oracle al ser de pago compa\\u00F1ias independientes como \");\n      i0.ɵɵelementStart(38, \"strong\");\n      i0.ɵɵtext(39, \"Red hat con OpenJDK, Amazon Correto... entre otros \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(40, \"ofrecen un Java que tecnicamente es igual al de oracle \");\n      i0.ɵɵelement(41, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(42, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(43, \"tr\")(44, \"td\");\n      i0.ɵɵtext(45, \"Arquitectura\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(46, \"td\");\n      i0.ɵɵtext(47, \" Es posible encontrar una aplicacion donde contenga todos los servicios necesarios para que funcione lo cual se llama \");\n      i0.ɵɵelementStart(48, \"strong\");\n      i0.ɵɵtext(49, \"servidor de aplicaciones\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(50, \" y una aplicacion que este compuesta por varios servicios o microservicios a esto se le llama \");\n      i0.ɵɵelementStart(51, \"strong\");\n      i0.ɵɵtext(52, \"aplicacion autocontenida\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(53, \"td\");\n      i0.ɵɵelement(54, \"img\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(55, \"tr\")(56, \"td\")(57, \"a\", 6);\n      i0.ɵɵtext(58, \"Spring Initializr\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(59, \"br\")(60, \"br\");\n      i0.ɵɵtext(61, \" Ahora para descargar Repositorios \");\n      i0.ɵɵelementStart(62, \"strong\");\n      i0.ɵɵelement(63, \"br\")(64, \"br\");\n      i0.ɵɵelementStart(65, \"a\", 7);\n      i0.ɵɵtext(66, \"Maven Repository\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(67, \"td\");\n      i0.ɵɵtext(68, \" Es el framework de Java para crear aplicaciones autocontenidas \");\n      i0.ɵɵelementStart(69, \"a\", 8);\n      i0.ɵɵtext(70, \"PARA VER LA DOCUMENTACIO\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(71, \" y \");\n      i0.ɵɵelementStart(72, \"a\", 9);\n      i0.ɵɵtext(73, \"tambien en este espacio\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(74, \"br\")(75, \"br\");\n      i0.ɵɵtext(76, \" Herramienta de construcci\\u00F3n con Maven = gestionan las dependencias con archivos XML \");\n      i0.ɵɵelement(77, \"br\");\n      i0.ɵɵtext(78, \" Herramienta de construcci\\u00F3n con Grandle = gestionan las dependencias con archivos Grovy \");\n      i0.ɵɵelement(79, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(80, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(81, \"tr\")(82, \"td\")(83, \"a\", 9);\n      i0.ɵɵtext(84, \"aplicacion.properties\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(85, \"br\")(86, \"br\");\n      i0.ɵɵelementStart(87, \"a\", 10);\n      i0.ɵɵtext(88, \"Ver tambien\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(89, \"td\");\n      i0.ɵɵtext(90, \" En este archivo podemos configurar diversos entornos para el desarrollo como un entrono de \");\n      i0.ɵɵelementStart(91, \"strong\");\n      i0.ɵɵtext(92, \"desarrollo, produccion, stage(prepoduccion....)\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(93, \"br\")(94, \"br\");\n      i0.ɵɵtext(95, \" * spring.profiles.active = dev // esto quiere decir que el applicacion.properties \\\"principal\\\" va a buscar el application-dev.properties y por hay va a desplegar la aplicacion \");\n      i0.ɵɵelement(96, \"br\")(97, \"br\");\n      i0.ɵɵtext(98, \" * server.port=8090 // Podemos configurar el puerto por el cual se despliega el contenedor \");\n      i0.ɵɵelement(99, \"br\")(100, \"br\")(101, \"br\");\n      i0.ɵɵtext(102, \" * server.servlet.context-path=/usuarios/uno //Podemos modificar el contex path \");\n      i0.ɵɵelement(103, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(104, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(105, \"tr\")(106, \"td\");\n      i0.ɵɵtext(107, \"Project Structure \");\n      i0.ɵɵelement(108, \"br\")(109, \"br\");\n      i0.ɵɵtext(110, \"Orientado al dominio\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(111, \"td\");\n      i0.ɵɵtext(112, \" * la capa de Dominio: Donde estan los DTO y los objetos de Dominio \");\n      i0.ɵɵelement(113, \"br\");\n      i0.ɵɵtext(114, \" * la capa de Repositorios: Donde estan definida las clases \");\n      i0.ɵɵelement(115, \"br\");\n      i0.ɵɵtext(116, \" * la capa de servicios: esta encargada de ser puente entre los los controladores de la Api y la persistencia \");\n      i0.ɵɵelement(117, \"br\");\n      i0.ɵɵtext(118, \" * la capa web: es donde estan definido los controllers \");\n      i0.ɵɵelement(119, \"br\");\n      i0.ɵɵtext(120, \" * la capa de la persistencia: es la encargada de interacturar con la BD \");\n      i0.ɵɵelement(121, \"br\")(122, \"br\")(123, \"br\")(124, \"img\", 11)(125, \"br\")(126, \"br\")(127, \"br\");\n      i0.ɵɵtext(128, \" En la capa del dominio encontramos los entities que son las clases que mapean las tablas en la BD y la variable debe estar: \");\n      i0.ɵɵelement(129, \"br\")(130, \"br\");\n      i0.ɵɵtext(131);\n      i0.ɵɵelement(132, \"br\");\n      i0.ɵɵtext(133, \" * debe estar en camelCase(y como en el ejemplo el nombre de la columna cambio se debe utilizar el anotacion @Column) \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(134, \"td\");\n      i0.ɵɵelement(135, \"img\", 12)(136, \"br\")(137, \"br\")(138, \"img\", 13);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(139, \"tr\")(140, \"td\");\n      i0.ɵɵtext(141, \"Structure\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(142, \"td\", 14);\n      i0.ɵɵelement(143, \"img\", 15);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(144, \"tr\")(145, \"td\");\n      i0.ɵɵtext(146, \"build.gradle\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(147, \"td\");\n      i0.ɵɵtext(148, \" Es este archivo estaran \");\n      i0.ɵɵelement(149, \"br\")(150, \"br\");\n      i0.ɵɵtext(151, \" * los implementation que son la injeccion de dependencias o librerias que nos permite maven Reposory agregar al proyecto \");\n      i0.ɵɵelement(152, \"br\")(153, \"br\");\n      i0.ɵɵtext(154, \" * podemos indicar la BD \");\n      i0.ɵɵelementStart(155, \"strong\");\n      i0.ɵɵtext(156, \"runtimeOnly\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(157, \" por que solo la necesitamos en tiempo de ejecucion y entre ' ' agregamos la dependencia que nos brinda maven repository para la BD \");\n      i0.ɵɵelement(158, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(159, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(160, \"tr\")(161, \"td\");\n      i0.ɵɵtext(162, \"Imagenes importantes curso JAVA spring \");\n      i0.ɵɵelement(163, \"br\");\n      i0.ɵɵelementStart(164, \"a\", 16);\n      i0.ɵɵtext(165, \"repositorio\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(166, \"td\");\n      i0.ɵɵelement(167, \"img\", 17);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(168, \"td\");\n      i0.ɵɵelement(169, \"img\", 18);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(170, \"tr\")(171, \"td\", 19)(172, \"strong\");\n      i0.ɵɵtext(173, \"Spring Data\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(174, \"tr\")(175, \"td\");\n      i0.ɵɵtext(176, \"Que es??\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(177, \"td\");\n      i0.ɵɵtext(178, \" * Spring Data es un proyecto que usa JPA. \");\n      i0.ɵɵelement(179, \"br\");\n      i0.ɵɵtext(180, \" * Spring Data contiene varios sub-proyectos \");\n      i0.ɵɵelementStart(181, \"strong\");\n      i0.ɵɵtext(182, \"(ej. Spring Data JPA, Spring Data JDBC, Spring Data MongDB, Spring Data Kasandra).\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(183, \"br\");\n      i0.ɵɵtext(184, \" * Tiene Auditorias transparentes (guarda el registro de los querys). \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(185, \"td\")(186, \"strong\");\n      i0.ɵɵtext(187, \"implementation 'org.springframework.boot:spring-boot-starter-data-jpa'\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(188, \"tr\")(189, \"td\");\n      i0.ɵɵtext(190, \"Conectar postgreSql\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(191, \"td\");\n      i0.ɵɵtext(192, \"runtimeOnly 'org.postgresql:postgresql'\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(193, \"td\");\n      i0.ɵɵelement(194, \"img\", 20);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(195, \"tr\")(196, \"td\");\n      i0.ɵɵtext(197, \"Anotaciones\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(198, \"td\")(199, \"a\", 21);\n      i0.ɵɵtext(200, \"Ver inf @PostConstruct y @PreDestroy\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(201, \"br\")(202, \"br\");\n      i0.ɵɵelementStart(203, \"strong\");\n      i0.ɵɵtext(204);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(205);\n      i0.ɵɵelement(206, \"br\");\n      i0.ɵɵtext(207, \" El m\\u00E9todo anotado con \");\n      i0.ɵɵelementStart(208, \"strong\");\n      i0.ɵɵtext(209, \"@PostConstruct\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(210, \" puede tener cualquier nivel de acceso pero no puede ser est\\u00E1tico. Debe ser declarado despues de la injeccion de dependencias, solo es posible en \");\n      i0.ɵɵelementStart(211, \"strong\");\n      i0.ɵɵtext(212, \"Beans\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(213, \" que soporten la injeccion de dependencias \");\n      i0.ɵɵelement(214, \"br\")(215, \"br\");\n      i0.ɵɵelementStart(216, \"strong\");\n      i0.ɵɵtext(217);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(218);\n      i0.ɵɵelement(219, \"br\");\n      i0.ɵɵtext(220, \" Al igual que con \");\n      i0.ɵɵelementStart(221, \"strong\");\n      i0.ɵɵtext(222, \"@PostConstruct\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(223);\n      i0.ɵɵelement(224, \"br\");\n      i0.ɵɵtext(225, \"El prop\\u00F3sito de este m\\u00E9todo debe ser liberar recursos o realizar cualquier otra tarea de limpieza antes de que se destruya el bean, por ejemplo, cerrar una conexi\\u00F3n a la base de datos. \");\n      i0.ɵɵelement(226, \"br\")(227, \"br\");\n      i0.ɵɵelementStart(228, \"strong\");\n      i0.ɵɵtext(229, \"@SpringBootApplication\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(230, \" //declara la class main por donde inicia el project \");\n      i0.ɵɵelement(231, \"br\");\n      i0.ɵɵelementStart(232, \"strong\");\n      i0.ɵɵtext(233, \"@Service\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(234, \"// es el puente enter el controller y el repository \");\n      i0.ɵɵelement(235, \"br\");\n      i0.ɵɵelementStart(236, \"strong\");\n      i0.ɵɵtext(237, \"@RestController\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(238, \" //que la clase es un controller \");\n      i0.ɵɵelement(239, \"br\");\n      i0.ɵɵelementStart(240, \"strong\");\n      i0.ɵɵtext(241, \"@Autowired // Inversion de control\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(242, \" esto delega al framework como el encargado de crear e instanciar el objeto\");\n      i0.ɵɵelement(243, \"br\")(244, \"br\")(245, \"br\");\n      i0.ɵɵelementStart(246, \"mark\")(247, \"span\", 22);\n      i0.ɵɵtext(248, \"A nivel de controlador\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(249, \"br\");\n      i0.ɵɵelementStart(250, \"strong\");\n      i0.ɵɵtext(251);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(252, \" //define el path principal del controller \");\n      i0.ɵɵelement(253, \"br\");\n      i0.ɵɵelementStart(254, \"strong\");\n      i0.ɵɵtext(255);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(256, \" // define el path secundario del controlador \");\n      i0.ɵɵelement(257, \"br\");\n      i0.ɵɵelementStart(258, \"strong\");\n      i0.ɵɵtext(259);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(260, \" //Para hacer update de Registro. \");\n      i0.ɵɵelement(261, \"br\");\n      i0.ɵɵelementStart(262, \"strong\");\n      i0.ɵɵtext(263);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(264, \" //Para eliminar un Registro. \");\n      i0.ɵɵelement(265, \"br\")(266, \"br\");\n      i0.ɵɵelementStart(267, \"strong\");\n      i0.ɵɵtext(268);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(269, \" //Valor que viene por la URL. \");\n      i0.ɵɵelement(270, \"br\");\n      i0.ɵɵelementStart(271, \"strong\");\n      i0.ɵɵtext(272);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(273, \" //Objeto que viene por el body de Request. \");\n      i0.ɵɵelement(274, \"br\")(275, \"br\");\n      i0.ɵɵelementStart(276, \"mark\")(277, \"span\", 22);\n      i0.ɵɵtext(278, \"Documentar swagger\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(279, \"br\");\n      i0.ɵɵelementStart(280, \"strong\");\n      i0.ɵɵtext(281);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(282, \" //Descripcion de End-point. \");\n      i0.ɵɵelement(283, \"br\")(284, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(285, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(286, \"tr\")(287, \"td\");\n      i0.ɵɵtext(288, \"JPA\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(289, \"td\");\n      i0.ɵɵtext(290, \" Jpa es una especificaci\\u00F3n de Java o un standar, reglas que JAVA define para que cualquier framework que quiera interecatuar con una BD tiene que seguir, por medio de Anotaciones o Decoradores evitando hacer consultas de manera nativa o de manera SQL \");\n      i0.ɵɵelement(291, \"br\")(292, \"br\");\n      i0.ɵɵtext(293, \" Un Framework que implemente lo anterior se convierte en un ORM. \");\n      i0.ɵɵelementStart(294, \"strong\");\n      i0.ɵɵtext(295, \"Object Relation Mapping\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(296, \"br\")(297, \"br\");\n      i0.ɵɵtext(298, \" como por ejemplo Frameworks ORM son: \");\n      i0.ɵɵelement(299, \"br\");\n      i0.ɵɵtext(300, \" * Hibernate. \");\n      i0.ɵɵelement(301, \"br\");\n      i0.ɵɵtext(302, \" * TopLink. \");\n      i0.ɵɵelement(303, \"br\");\n      i0.ɵɵtext(304, \" * EclipseLink. \");\n      i0.ɵɵelement(305, \"br\");\n      i0.ɵɵtext(306, \" * ObjectDB. \");\n      i0.ɵɵelement(307, \"br\")(308, \"br\");\n      i0.ɵɵelementStart(309, \"strong\");\n      i0.ɵɵtext(310, \"@Entity\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(311, \" para indicar que una clase java representa una tabla en la base de datos\");\n      i0.ɵɵelement(312, \"br\");\n      i0.ɵɵelementStart(313, \"strong\");\n      i0.ɵɵtext(314, \"@Table\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(315, \" recible el nombre de la tabla\");\n      i0.ɵɵelement(316, \"br\");\n      i0.ɵɵelementStart(317, \"strong\");\n      i0.ɵɵtext(318, \"@Column\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(319, \" se le pone a los atributos de la clase y se usa cuando los nombres entre la tabla y la entidad no coinciden\");\n      i0.ɵɵelement(320, \"br\");\n      i0.ɵɵelementStart(321, \"strong\");\n      i0.ɵɵtext(322);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(323, \"br\");\n      i0.ɵɵelementStart(324, \"strong\");\n      i0.ɵɵtext(325, \"@Id y @EmbededId\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(326, \" representan la clave primaria, id para sencilla y embededId para compuesta\");\n      i0.ɵɵelement(327, \"br\");\n      i0.ɵɵelementStart(328, \"strong\");\n      i0.ɵɵtext(329, \"@GeneratedValue\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(330, \" genera valores automaticos para las llaves de las tablas\");\n      i0.ɵɵelement(331, \"br\");\n      i0.ɵɵelementStart(332, \"strong\");\n      i0.ɵɵtext(333, \"@OneToMany @ManyToOne\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(334, \" permite representar relaciones\");\n      i0.ɵɵelement(335, \"br\");\n      i0.ɵɵelementStart(336, \"u\")(337, \"a\", 23);\n      i0.ɵɵtext(338, \"Procedimiento Almacenado\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(339, \"br\")(340, \"br\");\n      i0.ɵɵelementStart(341, \"strong\");\n      i0.ɵɵtext(342, \"@Query\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(343, \"(nativeQuery = true) o con la anotaci\\u00F3n \");\n      i0.ɵɵelementStart(344, \"strong\");\n      i0.ɵɵtext(345, \"@Procedure\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(346, \".\");\n      i0.ɵɵelement(347, \"br\");\n      i0.ɵɵelementStart(348, \"strong\");\n      i0.ɵɵtext(349);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(350, \" Desde la interfaz del crud podemos implementar querys de manera nativa de esta manera\");\n      i0.ɵɵelement(351, \"br\");\n      i0.ɵɵelementStart(352, \"strong\");\n      i0.ɵɵtext(353, \"@Repository\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(354, \" Con este le indicamos a JavaSpring que la clase va a interacturar con la BD por que en esta clase estaran definidos los metodos que operaran con los registros de la BD. \");\n      i0.ɵɵelementStart(355, \"strong\");\n      i0.ɵɵtext(356, \"tambien es posible decorar nuestra clase no con @Repository sino @Component PERO ES MEJOR @Repository\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(357, \"br\")(358, \"br\");\n      i0.ɵɵtext(359, \" * El mismo caso ocurre que podemos usar @Service por @Compoonent \");\n      i0.ɵɵelementStart(360, \"strong\");\n      i0.ɵɵtext(361);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(362, \"td\");\n      i0.ɵɵtext(363, \"fdgfd \");\n      i0.ɵɵelementStart(364, \"strong\");\n      i0.ɵɵtext(365, \"@Embeddable\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(366, \" En el caso que la tabla tenga una Primary Key compuesta debemos \");\n      i0.ɵɵelement(367, \"br\")(368, \"br\");\n      i0.ɵɵelementStart(369, \"a\", 24);\n      i0.ɵɵtext(370, \"llaves PK Compuestas\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(371, \" 1. Que los dos campos primarios esten aparte en otra clase. \");\n      i0.ɵɵelement(372, \"br\");\n      i0.ɵɵtext(373, \" 2. Que usen la anotacion @EmbeddedId. \");\n      i0.ɵɵelement(374, \"br\");\n      i0.ɵɵtext(375, \" 3. Que la clase que contenga los dos datos primarios como en el ejemplo use la anotacion @Embeddable e implements Serializable. \");\n      i0.ɵɵelement(376, \"br\")(377, \"br\")(378, \"img\", 25);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(379, \"tr\")(380, \"td\")(381, \"a\", 26);\n      i0.ɵɵtext(382, \"query-methods\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(383, \"td\");\n      i0.ɵɵtext(384, \" ver mas info \");\n      i0.ɵɵelementStart(385, \"a\", 27);\n      i0.ɵɵtext(386, \"En el siguiente enlace\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(387, \"br\")(388, \"br\");\n      i0.ɵɵtext(389, \" En la siguiente imagen se muestra como usar en la opcion 1 el Query Methods sin necesidad de hacerlo de manera nativa como en la opcion 2 y 3 \");\n      i0.ɵɵelement(390, \"img\", 28);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(391, \"td\");\n      i0.ɵɵelement(392, \"img\", 29);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(393, \"tr\")(394, \"td\")(395, \"a\", 30);\n      i0.ɵɵtext(396, \"patron Data mapper\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(397, \"td\");\n      i0.ɵɵtext(398, \" Es la forma en la cual traducimos o convertimos una tabla en otra, esto con el fin de: \");\n      i0.ɵɵelement(399, \"br\")(400, \"br\");\n      i0.ɵɵtext(401, \" * tener tablas definidas en termino de la persistencia con sus semejantes en termino de dominio \");\n      i0.ɵɵelementStart(402, \"strong\");\n      i0.ɵɵtext(403, \"la respuesta mostrara la data que tenga las entidades en el dominio NO en la persistencia. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(404, \"br\")(405, \"br\");\n      i0.ɵɵtext(406, \" * Con esto descoplamos la BD de la Api. Ningun agente externo podra darse cuenta de que forma estan dise\\u00F1adas las tablas que mapean la BD. \");\n      i0.ɵɵelement(407, \"br\")(408, \"br\");\n      i0.ɵɵtext(409, \" * Mapeamos solo los campos que son necesarios y no todos los campo de las tablas ya que estos puede tener sentido de existencia \");\n      i0.ɵɵelementStart(410, \"strong\");\n      i0.ɵɵtext(411, \"SOLO en BD\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(412, \". \");\n      i0.ɵɵelement(413, \"br\")(414, \"br\");\n      i0.ɵɵtext(415, \" * De esta manera la Api podria cambiar de BD y no tendria conflicto con el codigo \");\n      i0.ɵɵelement(416, \"br\")(417, \"br\");\n      i0.ɵɵtext(418, \" Para usarlo debemos: \");\n      i0.ɵɵelement(419, \"br\")(420, \"br\");\n      i0.ɵɵtext(421, \" 1. Descargarlo \");\n      i0.ɵɵelementStart(422, \"a\", 31);\n      i0.ɵɵtext(423, \"En la pagina oficial\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(424, \"br\")(425, \"br\");\n      i0.ɵɵtext(426, \" 2. se debe instalar un plugin que autocompletara las structuras de mapstruc dentro de intellintIDea \");\n      i0.ɵɵelementStart(427, \"a\", 32)(428, \"strong\");\n      i0.ɵɵtext(429, \"Jet Brains\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(430, \"br\")(431, \"br\");\n      i0.ɵɵtext(432, \" Otra forma de instalar plugins en IntelliJ es ir a files > Settings o Ctrl + Alt + S / en Mac es con command + , (coma) En el panel izquierdo se selecciona \\\"plugins\\\" y solo queda buscar \\u201CMapStruct Support\\u201D e instalarlo \");\n      i0.ɵɵelement(433, \"br\")(434, \"br\");\n      i0.ɵɵtext(435, \"lo anterior es para que funcione con intelliJ IDE pero ademas se requiere descargar la dependencia. \");\n      i0.ɵɵelement(436, \"br\")(437, \"br\")(438, \"img\", 33);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(439, \"td\");\n      i0.ɵɵelement(440, \"img\", 34);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(441, \"tr\")(442, \"td\");\n      i0.ɵɵtext(443, \"MapStruct\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(444, \"td\")(445, \"strong\");\n      i0.ɵɵtext(446);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(447, \" indicara que la interface va a mapear la table del dominio y la identidad \");\n      i0.ɵɵelement(448, \"br\")(449, \"br\");\n      i0.ɵɵelementStart(450, \"strong\");\n      i0.ɵɵtext(451, \"@Mappings\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(452, \" grupo de traductor de campos entre tablas \");\n      i0.ɵɵelement(453, \"br\")(454, \"br\");\n      i0.ɵɵelementStart(455, \"strong\");\n      i0.ɵɵtext(456, \"@Mapping\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(457, \" van cruzados y es de donde va a sacar el valor y donde se lo va a poner \");\n      i0.ɵɵelement(458, \"br\");\n      i0.ɵɵelementStart(459, \"strong\");\n      i0.ɵɵtext(460);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(461, \" es para hacer de manera inversa la traduccion ya con esto ya no es necesario declaran nuevamente mappings\");\n      i0.ɵɵelement(462, \"br\")(463, \"br\");\n      i0.ɵɵtext(464, \" y como es posible de observer en la linea 27 le indicamos que ignore un campo al mapear de la capa de la entity en la persistencia al entity del dominio y se debe a que precisamente en el entity del dominio ese campo no es necesario \");\n      i0.ɵɵelementStart(465, \"strong\");\n      i0.ɵɵtext(466, \"Es neesario indicar que lo ignore sino genere error\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(467, \"br\")(468, \"br\");\n      i0.ɵɵtext(469, \" Y en la linea 12 indicamos que un mapper puede llamar a otro mapper con \");\n      i0.ɵɵelementStart(470, \"strong\");\n      i0.ɵɵtext(471);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(472, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(473, \"td\");\n      i0.ɵɵelement(474, \"img\", 35);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(475, \"tr\")(476, \"td\")(477, \"a\", 36);\n      i0.ɵɵtext(478, \"Base de datos\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(479, \"td\");\n      i0.ɵɵtext(480, \" Cuando en nuestro codigo estamos configurando la base de datos podemos indicar que al ejecutar el codigo este el back quien crea la BD o si la BD ya existe que la actualice \");\n      i0.ɵɵelement(481, \"br\")(482, \"br\");\n      i0.ɵɵtext(483, \"De la manera como lo indica la imagen \");\n      i0.ɵɵelement(484, \"br\")(485, \"br\");\n      i0.ɵɵelementStart(486, \"strong\");\n      i0.ɵɵtext(487, \"spring.jpa.hibernate.ddl-auto=update/none\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(488, \"td\");\n      i0.ɵɵelement(489, \"img\", 37);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(490, \"tr\")(491, \"td\")(492, \"a\", 38);\n      i0.ɵɵtext(493, \"Mapear relaciones entre clases\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(494, \"td\")(495, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(496, \"tr\")(497, \"td\");\n      i0.ɵɵtext(498, \"Spring Data Repositories\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(499, \"td\");\n      i0.ɵɵtext(500, \" Esta aca metido ya que hace parte de Spring Data y presisamente es como SpringBoot ofrece acceder a la informacion de la BD con metodos ya predeterminados para Create, Read, Update and Delete \");\n      i0.ɵɵelementStart(501, \"strong\");\n      i0.ɵɵtext(502, \"CRUD a registros\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(503, \"br\")(504, \"br\");\n      i0.ɵɵtext(505, \" * CrudRepository. \");\n      i0.ɵɵelement(506, \"br\");\n      i0.ɵɵtext(507, \" * PagingAndSortingRepository. //igual que el anterior + Paginacion y ordenamiento. \");\n      i0.ɵɵelement(508, \"br\");\n      i0.ɵɵtext(509, \" * JPARepository //Contiene tareas de JPA como flush (guardar en memoria). \");\n      i0.ɵɵelement(510, \"br\")(511, \"br\");\n      i0.ɵɵtext(512);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(513, \"td\");\n      i0.ɵɵelement(514, \"img\", 39);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(515, \"tr\");\n      i0.ɵɵelement(516, \"td\")(517, \"td\")(518, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(519, \"tr\");\n      i0.ɵɵelement(520, \"td\")(521, \"td\")(522, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(523, \"tr\");\n      i0.ɵɵelement(524, \"td\")(525, \"td\")(526, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(527, \"tr\");\n      i0.ɵɵelement(528, \"td\")(529, \"td\")(530, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(531, \"tr\");\n      i0.ɵɵelement(532, \"td\")(533, \"td\")(534, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(535, \"tr\");\n      i0.ɵɵelement(536, \"td\")(537, \"td\")(538, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(539, \"tr\");\n      i0.ɵɵelement(540, \"td\")(541, \"td\")(542, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(543, \"tr\");\n      i0.ɵɵelement(544, \"td\")(545, \"td\")(546, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(547, \"tr\");\n      i0.ɵɵelement(548, \"td\")(549, \"td\")(550, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(551, \"tr\");\n      i0.ɵɵelement(552, \"td\")(553, \"td\")(554, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(555, \"tr\");\n      i0.ɵɵelement(556, \"td\")(557, \"td\")(558, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(559, \"tr\");\n      i0.ɵɵelement(560, \"td\")(561, \"td\")(562, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(563, \"tr\");\n      i0.ɵɵelement(564, \"td\")(565, \"td\")(566, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(567, \"tr\");\n      i0.ɵɵelement(568, \"td\")(569, \"td\")(570, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(571, \"tr\");\n      i0.ɵɵelement(572, \"td\")(573, \"td\")(574, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(575, \"tr\");\n      i0.ɵɵelement(576, \"td\")(577, \"td\")(578, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(579, \"tr\");\n      i0.ɵɵelement(580, \"td\")(581, \"td\")(582, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(583, \"tr\");\n      i0.ɵɵelement(584, \"td\")(585, \"td\")(586, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(587, \"tr\");\n      i0.ɵɵelement(588, \"td\")(589, \"td\")(590, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(591, \"tr\");\n      i0.ɵɵelement(592, \"td\")(593, \"td\")(594, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(595, \"tr\");\n      i0.ɵɵelement(596, \"td\")(597, \"td\")(598, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(599, \"tr\");\n      i0.ɵɵelement(600, \"td\")(601, \"td\")(602, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(603, \"tr\");\n      i0.ɵɵelement(604, \"td\")(605, \"td\")(606, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(607, \"tr\");\n      i0.ɵɵelement(608, \"td\")(609, \"td\")(610, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(611, \"tr\");\n      i0.ɵɵelement(612, \"td\")(613, \"td\")(614, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(615, \"tr\");\n      i0.ɵɵelement(616, \"td\")(617, \"td\")(618, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(619, \"tr\");\n      i0.ɵɵelement(620, \"td\")(621, \"td\")(622, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(623, \"tr\");\n      i0.ɵɵelement(624, \"td\")(625, \"td\")(626, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(627, \"tr\");\n      i0.ɵɵelement(628, \"td\")(629, \"td\")(630, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(631, \"tr\");\n      i0.ɵɵelement(632, \"td\")(633, \"td\")(634, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(635, \"tr\");\n      i0.ɵɵelement(636, \"td\")(637, \"td\")(638, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(639, \"tr\");\n      i0.ɵɵelement(640, \"td\")(641, \"td\")(642, \"td\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(131);\n      i0.ɵɵtextInterpolate2(\" * Con el dato Clases Envolventes \", ctx.abreParentesis, \" Wrapper\", ctx.cierraParentesis, \". \");\n      i0.ɵɵadvance(73);\n      i0.ɵɵtextInterpolate1(\"\", ctx.arroba, \"PostConstruct\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" //Spring llama a los m\\u00E9todos anotados con \", ctx.arroba, \"PostConstruct solo una vez, justo despu\\u00E9s de la inicializaci\\u00F3n de las propiedades del bean . Tenga en cuenta que estos m\\u00E9todos se ejecutar\\u00E1n incluso si no hay nada que inicializar. \");\n      i0.ɵɵadvance(12);\n      i0.ɵɵtextInterpolate1(\"\", ctx.arroba, \"PreDestroy\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" //Un m\\u00E9todo anotado con \", ctx.arroba, \"PreDestroy se ejecuta solo una vez, justo antes de que Spring elimine nuestro bean del contexto de la aplicaci\\u00F3n. \");\n      i0.ɵɵadvance(5);\n      i0.ɵɵtextInterpolate1(\" , los m\\u00E9todos anotados con \", ctx.arroba, \"PreDestroy pueden tener cualquier nivel de acceso, pero no pueden ser est\\u00E1ticos. \");\n      i0.ɵɵadvance(28);\n      i0.ɵɵtextInterpolate2(\"* @RequestMapping\", ctx.abreParentesis, \"\\\"/saludar\\\"\", ctx.cierraParentesis, \"\");\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate2(\"* @GetMapping\", ctx.abreParentesis, \"\\\"/hola\\\"\", ctx.cierraParentesis, \"\");\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate2(\"* @PostMapping\", ctx.abreParentesis, \"\\\"/Save\\\"\", ctx.cierraParentesis, \"\\\"\");\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate4(\"* @DeleteMapping\", ctx.abreParentesis, \"\\\"/delete/\", ctx.abrellave, \"id\", ctx.cierrallave, \"\\\"\", ctx.cierraParentesis, \"\");\n      i0.ɵɵadvance(5);\n      i0.ɵɵtextInterpolate2(\"* @PathVariable\", ctx.abreParentesis, \"\\\"id\\\" int productId\", ctx.cierraParentesis, \"\");\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate2(\"* @RequestBody\", ctx.abreParentesis, \"Product product\", ctx.cierraParentesis, \"\");\n      i0.ɵɵadvance(9);\n      i0.ɵɵtextInterpolate2(\"* @ApiOperation\", ctx.abreParentesis, \"\\\"Select One Specific Product\\\"\", ctx.cierraParentesis, \"\\\"\");\n      i0.ɵɵadvance(41);\n      i0.ɵɵtextInterpolate2(\"@Column\", ctx.abreParentesis, \"unique = true, nullable= false\", ctx.cierraParentesis, \" //para los campos Id o campos que son unicos y no permite valores nulos\");\n      i0.ɵɵadvance(27);\n      i0.ɵɵtextInterpolate2(\"@Query \", ctx.abreParentesis, \"value = \\\" SELECT * FROM categorias WHERE id_categoria = ? \\\", nativeQuery = true \", ctx.cierraParentesis, \".\");\n      i0.ɵɵadvance(12);\n      i0.ɵɵtextInterpolate1(\"PERO es mejor usar \", ctx.arroba, \"Service esto es asi por que nos da una diferenciacion semantica de cual es la finalidad de existir ya sea de la clase o interfaz \");\n      i0.ɵɵadvance(85);\n      i0.ɵɵtextInterpolate2(\"@Mapper\", ctx.abreParentesis, \"componentModel = \\\"spring\\\"\", ctx.cierraParentesis, \"\");\n      i0.ɵɵadvance(14);\n      i0.ɵɵtextInterpolate1(\"\", ctx.arroba, \"InheritInverseConfiguration\");\n      i0.ɵɵadvance(11);\n      i0.ɵɵtextInterpolate2(\"uses = \", ctx.abrellave, \" CategoryMapper.class \", ctx.cierrallave, \"\");\n      i0.ɵɵadvance(41);\n      i0.ɵɵtextInterpolate2(\" Para implementar lo anterior debemos crear una interfaz que extienda de la clase CrudRepository el cual recibe 2 parametros \", ctx.abreDiamante, \"el nombre de la tabla, tipo de dato de la primary key \", ctx.cierraDiamante, \". \");\n    }\n  },\n  styles: [\".titulo[_ngcontent-%COMP%] {\\n  text-align: center;\\n  font-size: 25px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29yZS9jb21wb25lbnRzL2ZyYW1ld29rcy9zcHJpbmdib290L3NwcmluZ2Jvb3QuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxrQkFBQTtFQUNBLGVBQUE7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIi50aXR1bG97XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIGZvbnQtc2l6ZTogMjVweDtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["SpringbootComponent","constructor","abrellave","cierrallave","abreDiamante","cierraDiamante","abreParentesis","cierraParentesis","abreCuadro","cierraCuadro","arroba","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\HP\\Desktop\\JuanTafur\\Support-FrontEnd-Angular-full\\src\\app\\core\\components\\framewoks\\springboot\\springboot.component.ts","C:\\Users\\HP\\Desktop\\JuanTafur\\Support-FrontEnd-Angular-full\\src\\app\\core\\components\\framewoks\\springboot\\springboot.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-springboot',\r\n  templateUrl: './springboot.component.html',\r\n  styleUrls: ['./springboot.component.scss']\r\n})\r\nexport class SpringbootComponent {\r\n\r\n  public abrellave: string;\r\n  public cierrallave: string;\r\n  public abreDiamante: string;\r\n  public cierraDiamante: string;\r\n  public abreParentesis: string;\r\n  public cierraParentesis: string;\r\n  public abreCuadro: string;\r\n  public cierraCuadro: string;\r\n  public arroba: string;\r\n\r\n  constructor() {\r\n    this.abrellave= \"{\";\r\n    this.cierrallave=\"}\";\r\n    this.abreDiamante= \"<\";\r\n    this.cierraDiamante= \">\";\r\n    this.abreParentesis= \"(\";\r\n    this.cierraParentesis= \")\";\r\n    this.abreCuadro= \"[\";\r\n    this.cierraCuadro= \"]\";\r\n    this.arroba= \"@\";\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <table class=\"table table-striped table-hover table-bordered align-middle\">\r\n      <thead>\r\n          <tr>\r\n              <th scope=\"col\">Referencia</th>\r\n              <th scope=\"col\">Descripcion</th>\r\n              <th scope=\"col\">Ejemplo</th>\r\n          </tr>\r\n      </thead>\r\n      <tbody>\r\n          <tr>\r\n              <td><strong>Hay varios tipos de Java</strong></td>\r\n              <td>\r\n                  Actualmente hay dos tipos de Java: <br><br>\r\n                  1. Java de Oracle es la version de pago <br><br>\r\n                  2. OpenJDK que es la version openJava que ofrece Oracle free de empresas independientes <br><br>\r\n                  3. <a href=\"https://docs.aws.amazon.com/es_es/corretto/latest/corretto-11-ug/what-is-corretto-11.html\"> Correto </a>: que es la version que ofrece Amazon free, dispone de una certificacion de Java SE y con soporte a larga plazo <br><br>\r\n                  4. <a href=\"https://www.redhat.com/es/topics/cloud-native-apps/what-is-a-Java-runtime-environment\">RedHat</a> que tambien tiene openJDK <br><br>\r\n                  Esto es debido a que oracle al ser de pago compañias independientes como <strong>Red hat con OpenJDK, Amazon Correto... entre otros </strong>ofrecen un Java que tecnicamente es igual al de oracle <br>\r\n              </td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td>Arquitectura</td>\r\n              <td>\r\n                  Es posible encontrar una aplicacion donde contenga todos los servicios necesarios para que funcione lo cual se llama <strong>servidor de aplicaciones</strong> y una aplicacion que este compuesta por varios servicios o microservicios a esto se le llama <strong>aplicacion autocontenida</strong>\r\n              </td>\r\n              <td>\r\n                  <img\r\n                  src=\"../../../../../assets/backend/JavaSpring/aplicacionAutocontenida.png\"\r\n                  alt=\"aplicacionAutocontenida\"\r\n                  title=\"aplicacionAutocontenida\">\r\n              </td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td>\r\n                  <a href=\"https://start.spring.io/\">Spring Initializr</a><br><br>\r\n                  Ahora para descargar Repositorios <strong><br><br><a href=\"https://mvnrepository.com/\">Maven Repository</a></strong>\r\n              </td>\r\n              <td>\r\n                  Es el framework de Java para crear aplicaciones autocontenidas <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.spring-application\">PARA VER LA DOCUMENTACIO</a> y <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html\">tambien en este espacio</a><br><br>\r\n                  Herramienta de construcción con Maven = gestionan las dependencias con archivos XML <br>\r\n                  Herramienta de construcción con Grandle = gestionan las dependencias con archivos Grovy <br>\r\n              </td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html\">aplicacion.properties</a><br><br><a href=\"https://www.javatpoint.com/spring-boot-properties\">Ver tambien</a></td>\r\n              <td>\r\n                  En este archivo podemos configurar diversos entornos para el desarrollo como un entrono de <strong>desarrollo, produccion, stage(prepoduccion....)</strong> <br><br>\r\n                  * spring.profiles.active = dev // esto quiere decir que el applicacion.properties \"principal\" va a buscar el application-dev.properties y por hay va a desplegar la aplicacion <br><br>\r\n                  * server.port=8090 // Podemos configurar el puerto por el cual se despliega el contenedor <br>\r\n                  <br><br>\r\n                  * server.servlet.context-path=/usuarios/uno //Podemos modificar el contex path <br>\r\n              </td>\r\n              <td></td>\r\n          </tr>\r\n          <tr>\r\n              <td>Project Structure <br><br>Orientado al dominio</td>\r\n              <td>\r\n                  * la capa de Dominio: Donde estan los DTO y los objetos de Dominio <br>\r\n                  * la capa de Repositorios: Donde estan definida las clases <br>\r\n                  * la capa de servicios: esta encargada de ser puente entre los los controladores de la Api y la persistencia <br>\r\n                  * la capa web: es donde estan definido los controllers <br>\r\n                  * la capa de la persistencia: es la encargada de interacturar con la BD <br><br><br>\r\n                  <img\r\n                  src=\"../../../../../assets/backend/JavaSpring/projectStructure.png\"\r\n                  alt=\"projectStructure\"\r\n                  title=\"projectStructure\"><br><br><br>\r\n                  En la capa del dominio encontramos los entities que son las clases que mapean las tablas en la BD y la variable debe estar: <br><br>\r\n                  * Con el dato Clases Envolventes {{abreParentesis}} Wrapper{{cierraParentesis}}. <br>\r\n                  * debe estar en camelCase(y como en el ejemplo el nombre de la columna cambio se debe utilizar el anotacion @Column)\r\n\r\n              </td>\r\n              <td>\r\n                  <img\r\n                  src=\"../../../../../assets/backend/JavaSpring/Structure.png\"\r\n                  alt=\"Structure\"\r\n                  title=\"Structure\"><br><br>\r\n                  <img\r\n                  src=\"../../../../../assets/framework/JavaSpringBoot/Entity.PNG\"\r\n                  alt=\"Entity\"\r\n                  title=\"Entity\">\r\n              </td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td>Structure</td>\r\n              <td colspan=\"2\">\r\n                  <img\r\n                  src=\"../../../../../assets/backend/JavaSpring/structure2.png\"\r\n                  alt=\"structure2\"\r\n                  title=\"structure2\">\r\n              </td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td>build.gradle</td>\r\n              <td>\r\n                  Es este archivo estaran  <br><br>\r\n                  * los implementation que son la injeccion de dependencias o librerias que nos permite maven Reposory agregar al proyecto <br><br>\r\n                  * podemos indicar la BD <strong>runtimeOnly</strong> por que solo la necesitamos en tiempo de ejecucion y entre ' ' agregamos la dependencia que nos brinda maven repository para la BD <br>\r\n              </td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td>Imagenes importantes curso JAVA spring <br>\r\n              <a href=\"https://github.com/lucasmoy-dev/Curso-de-Springboot-Hibernate/tree/main/src/main/java/com/cursojava/curso\">repositorio</a>\r\n              </td>\r\n              <td><img src=\"../../../../../assets/framework/javaSpring/MVC.png\" alt=\"MVC\"></td>\r\n              <td><img src=\"../../../../../assets/framework/javaSpring/estrutura.png\" alt=\"estrutura url\"></td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td colspan=\"3\" class=\"titulo\"><strong>Spring Data</strong></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td>Que es??</td>\r\n              <td>\r\n                * Spring Data es un proyecto que usa JPA. <br>\r\n                * Spring Data contiene varios sub-proyectos <strong>(ej. Spring Data JPA, Spring Data JDBC, Spring Data MongDB, Spring Data Kasandra).</strong><br>\r\n                * Tiene Auditorias transparentes (guarda el registro de los querys).\r\n              </td>\r\n              <td>\r\n                <strong>implementation 'org.springframework.boot:spring-boot-starter-data-jpa'</strong>\r\n              </td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td>Conectar postgreSql</td>\r\n              <td>runtimeOnly 'org.postgresql:postgresql'</td>\r\n              <td><img src=\"../../../../../assets/framework/JavaSpringBoot/postgresSQL.PNG\" alt=\"postgresSQL url\"></td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>Anotaciones</td>\r\n            <td>\r\n                <a href=\"https://www.baeldung.com/spring-postconstruct-predestroy\">Ver inf @PostConstruct y @PreDestroy</a> <br><br>\r\n                <strong>{{arroba}}PostConstruct</strong> //Spring llama a los métodos anotados con {{arroba}}PostConstruct solo una vez, justo después de la inicialización de las propiedades del bean . Tenga en cuenta que estos métodos se ejecutarán incluso si no hay nada que inicializar. <br>\r\n                El método anotado con <strong>@PostConstruct</strong> puede tener cualquier nivel de acceso pero no puede ser estático. Debe ser declarado despues de la injeccion de dependencias, solo es posible en <strong>Beans</strong> que soporten la injeccion de dependencias <br>\r\n                <br>\r\n                <strong>{{arroba}}PreDestroy</strong> //Un método anotado con {{arroba}}PreDestroy se ejecuta solo una vez, justo antes de que Spring elimine nuestro bean del contexto de la aplicación.\r\n                <br>\r\n                Al igual que con <strong>@PostConstruct</strong> , los métodos anotados con {{arroba}}PreDestroy pueden tener cualquier nivel de acceso, pero no pueden ser estáticos.\r\n                <br>El propósito de este método debe ser liberar recursos o realizar cualquier otra tarea de limpieza antes de que se destruya el bean, por ejemplo, cerrar una conexión a la base de datos. <br><br>\r\n                <strong>@SpringBootApplication</strong> //declara la class main por donde inicia el project <br>\r\n                <strong>@Service</strong>// es el puente enter el controller y el repository <br>\r\n                <strong>@RestController</strong>  //que la clase es un controller <br>\r\n                <strong>@Autowired // Inversion de control</strong> esto delega al framework como el encargado de crear e instanciar el objeto<br><br><br>\r\n\r\n                <mark><span style = \"background-color: #FFFF00;\">A nivel de controlador</span></mark><br>\r\n                <strong>* @RequestMapping{{abreParentesis}}\"/saludar\"{{cierraParentesis}}</strong>  //define el path principal del controller <br>\r\n                <strong>* @GetMapping{{abreParentesis}}\"/hola\"{{cierraParentesis}}</strong> // define el path secundario del controlador <br>\r\n                <strong>* @PostMapping{{abreParentesis}}\"/Save\"{{cierraParentesis}}\"</strong> //Para hacer update de Registro. <br>\r\n                <strong>* @DeleteMapping{{abreParentesis}}\"/delete/{{abrellave}}id{{cierrallave}}\"{{cierraParentesis}}</strong> //Para eliminar un Registro. <br><br>\r\n                <strong>* @PathVariable{{abreParentesis}}\"id\" int productId{{cierraParentesis}}</strong> //Valor que viene por la URL. <br>\r\n                <strong>* @RequestBody{{abreParentesis}}Product product{{cierraParentesis}}</strong> //Objeto que viene por el body de Request. <br><br>\r\n\r\n                <mark><span style = \"background-color: #FFFF00;\">Documentar swagger</span></mark><br>\r\n                <strong>* @ApiOperation{{abreParentesis}}\"Select One Specific Product\"{{cierraParentesis}}\"</strong> //Descripcion de End-point. <br><br>\r\n            </td>\r\n            <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>JPA</td>\r\n            <td>\r\n                Jpa es una especificación de Java o un standar, reglas que JAVA define para que cualquier framework que quiera interecatuar con una BD tiene que seguir, por medio de Anotaciones o Decoradores evitando hacer consultas de manera nativa o de manera SQL <br><br>\r\n                Un Framework  que implemente lo anterior se convierte en un ORM. <strong>Object Relation Mapping</strong><br><br>\r\n                como por ejemplo Frameworks ORM son: <br>\r\n                * Hibernate. <br>\r\n                * TopLink. <br>\r\n                * EclipseLink. <br>\r\n                * ObjectDB. <br><br>\r\n                <strong>@Entity</strong> para indicar que una clase java representa una tabla en la base de datos<br>\r\n                <strong>@Table</strong> recible el nombre de la tabla<br>\r\n                <strong>@Column</strong> se le pone a los atributos de la clase y se usa cuando los nombres entre la tabla y la entidad no coinciden<br>\r\n                <strong>@Column{{abreParentesis}}unique = true, nullable= false{{cierraParentesis}} //para los campos Id o campos que son unicos y no permite valores nulos</strong> <br>\r\n                <strong>@Id y @EmbededId</strong> representan la clave primaria, id para sencilla y embededId para compuesta<br>\r\n                <strong>@GeneratedValue</strong> genera valores automaticos para las llaves de las tablas<br>\r\n                <strong>@OneToMany @ManyToOne</strong> permite representar relaciones<br>\r\n                <u><a href=\"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.stored-procedures\">Procedimiento Almacenado</a></u><br><br>\r\n                <strong>@Query</strong>(nativeQuery = true) o con la anotación <strong>@Procedure</strong>.<br>\r\n                <strong>@Query {{abreParentesis}}value = \" SELECT * FROM categorias WHERE id_categoria = ? \", nativeQuery = true {{cierraParentesis}}.</strong> Desde la interfaz del crud podemos implementar querys de manera nativa de esta manera<br>\r\n                <strong>@Repository</strong> Con este le indicamos a JavaSpring que la clase va a interacturar con la BD por que en esta clase estaran definidos los metodos que operaran con los registros de la BD. <strong>tambien es posible decorar nuestra clase no con @Repository sino @Component PERO ES MEJOR @Repository</strong><br><br>\r\n                * El mismo caso ocurre que podemos usar @Service por @Compoonent <strong>PERO es mejor usar {{arroba}}Service esto es asi por que nos da una diferenciacion semantica de cual es la finalidad de existir ya sea de la clase o interfaz </strong>\r\n            </td>\r\n            <td>fdgfd\r\n              <strong>@Embeddable</strong> En el caso que la tabla tenga una Primary Key compuesta debemos <br><br>\r\n\r\n              <a href=\"https://platzi.com/clases/1996-java-spring/31505-crear-entity-cuando-su-clave-primaria-es-compuesta/\">llaves PK Compuestas</a>\r\n\r\n              1. Que los dos campos primarios esten aparte en otra clase. <br>\r\n              2. Que usen la anotacion @EmbeddedId. <br>\r\n              3. Que la clase que contenga los dos datos primarios como en el ejemplo use la anotacion @Embeddable e implements Serializable. <br><br>\r\n\r\n              <img\r\n              src=\"../../../../../assets/framework/JavaSpringBoot/Primary Key Compuesta.png\"\r\n              alt=\"Primary Key Compuesta\"\r\n              title=\"Primary Key Compuesta\">\r\n            </td>\r\n          </tr>\r\n\r\n\r\n          <tr>\r\n              <td>\r\n                <a href=\"https://platzi.com/clases/1996-java-spring/31508-query-methods/\">query-methods</a>\r\n              </td>\r\n              <td>\r\n                  ver mas info <a href=\"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods\">En el siguiente enlace</a><br><br>\r\n                  En la siguiente imagen se muestra como usar en la opcion 1 el Query Methods sin necesidad de hacerlo de manera nativa como en la opcion 2 y 3\r\n                  <img\r\n                  src=\"../../../../../assets/framework/JavaSpringBoot/QueriesMethods.PNG\"\r\n                  alt=\"QueriesMethods\"\r\n                  title=\"QueriesMethods\">\r\n              </td>\r\n              <td>\r\n                  <img\r\n                  src=\"../../../../../assets/backend/JavaSpring/springData.png\"\r\n                  alt=\"springData\"\r\n                  title=\"springData\">\r\n              </td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td><a href=\"https://platzi.com/clases/1996-java-spring/31510-que-es-el-patron-data-mapper-y-que-resuelve/\">patron Data mapper</a></td>\r\n            <td>\r\n                Es la forma en la cual traducimos o convertimos una tabla en otra, esto con el fin de: <br><br>\r\n                * tener tablas definidas en termino de la persistencia con sus semejantes en termino de dominio <strong>la respuesta mostrara la data que tenga las entidades en el dominio NO en la persistencia. </strong><br><br>\r\n                * Con esto descoplamos la BD de la Api. Ningun agente externo podra darse cuenta de que forma estan diseñadas las tablas que mapean la BD. <br><br>\r\n                * Mapeamos solo los campos que son necesarios y no todos los campo de las tablas ya que estos puede tener sentido de existencia <strong>SOLO en BD</strong>. <br><br>\r\n                * De esta manera la Api podria cambiar de BD y no tendria conflicto con el codigo <br><br>\r\n                Para usarlo debemos: <br><br>\r\n                1. Descargarlo <a href=\"https://mapstruct.org/\">En la pagina oficial</a> <br><br>\r\n                2. se debe instalar un plugin que autocompletara las structuras de mapstruc dentro de intellintIDea <a href=\"https://plugins.jetbrains.com/plugin/10036-mapstruct-support/versions\"><strong>Jet Brains</strong></a><br><br>\r\n\r\n                Otra forma de instalar plugins en IntelliJ es ir a files > Settings o Ctrl + Alt + S / en Mac es con command + , (coma) En el panel izquierdo se selecciona \"plugins\" y solo queda buscar “MapStruct Support” e instalarlo <br><br>lo anterior es para que funcione con intelliJ IDE pero ademas se requiere descargar la dependencia. <br><br>\r\n                <img\r\n                src=\"../../../../../assets/backend/JavaSpring/mapStruct.PNG\"\r\n                alt=\"mapStruct\"\r\n                title=\"mapStruct\">\r\n            </td>\r\n            <td>\r\n                <img\r\n                src=\"../../../../../assets/framework/JavaSpringBoot/DataMapper.png\"\r\n                alt=\"DataMapper\"\r\n                title=\"DataMapper\">\r\n            </td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>MapStruct</td>\r\n            <td>\r\n              <strong>@Mapper{{abreParentesis}}componentModel = \"spring\"{{cierraParentesis}}</strong> indicara que la interface va a mapear la table del dominio y la identidad <br><br>\r\n              <strong>@Mappings</strong> grupo de traductor de campos entre tablas <br><br>\r\n              <strong>@Mapping</strong> van cruzados y es de donde va a sacar el valor y donde se lo va a poner <br>\r\n              <strong>{{arroba}}InheritInverseConfiguration</strong> es para hacer de manera inversa la traduccion ya con esto ya no es necesario declaran nuevamente mappings<br><br>\r\n              y como es posible de observer en la linea 27 le indicamos que ignore un campo al mapear de la capa de la entity en la persistencia al entity del dominio y se debe a que precisamente en el entity del dominio ese campo no es necesario <strong>Es neesario indicar que lo ignore sino genere error</strong> <br><br>\r\n              Y en la linea 12 indicamos que un mapper puede llamar a otro mapper con <strong>uses = {{abrellave}} CategoryMapper.class {{cierrallave}}</strong> <br>\r\n            </td>\r\n            <td>\r\n              <img\r\n              src=\"../../../../../assets/framework/JavaSpringBoot/Mapper.PNG\"\r\n              alt=\"Mapper\"\r\n              title=\"Mapper\">\r\n            </td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td><a href=\"https://www.youtube.com/watch?v=vTu2HQrXtyw\">Base de datos</a></td>\r\n              <td>\r\n                Cuando en nuestro codigo estamos configurando la base de datos podemos indicar que al ejecutar el codigo este el back quien crea la BD o si la BD ya existe que la actualice <br><br>De la manera como lo indica la imagen <br><br>\r\n                <strong>spring.jpa.hibernate.ddl-auto=update/none</strong>\r\n              </td>\r\n              <td>\r\n                <img\r\n                src=\"../../../../../assets/backend/JavaSpring/CreateObjectDBEntity.png\"\r\n                alt=\"CreateObjectDBEntity\"\r\n                title=\"CreateObjectDBEntity\">\r\n              </td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td><a href=\"https://platzi.com/new-home/clases/1996-java-spring/31506-mapear-relaciones-entre-clases/\">Mapear relaciones entre clases</a></td>\r\n            <td></td>\r\n            <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td>Spring Data Repositories</td>\r\n              <td>\r\n                Esta aca metido ya que hace parte de Spring Data y presisamente es como SpringBoot ofrece acceder a la informacion de la BD con metodos ya predeterminados para Create, Read, Update and Delete <strong>CRUD a registros</strong><br><br>\r\n                * CrudRepository. <br>\r\n                * PagingAndSortingRepository. //igual que el anterior + Paginacion y ordenamiento. <br>\r\n                * JPARepository //Contiene tareas de JPA como flush (guardar en memoria). <br><br>\r\n                Para implementar lo anterior debemos crear una interfaz que extienda de la clase CrudRepository el cual recibe 2 parametros {{abreDiamante}}el nombre de la tabla, tipo de dato de la primary key {{cierraDiamante}}.\r\n\r\n              </td>\r\n              <td>\r\n                <img\r\n                src=\"../../../../../assets/framework/JavaSpringBoot/CrudRepository.PNG\"\r\n                alt=\"CrudRepository\"\r\n                title=\"CrudRepository\">\r\n              </td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n\r\n          <tr>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n          </tr>\r\n      </tbody>\r\n  </table>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}