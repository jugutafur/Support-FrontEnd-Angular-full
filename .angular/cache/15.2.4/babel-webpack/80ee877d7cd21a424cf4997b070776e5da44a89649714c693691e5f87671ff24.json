{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/router\";\nfunction MainBackEndComponent_li_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\")(1, \"a\", 7);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const menu_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"routerLink\", \"/\", menu_r1, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(menu_r1);\n  }\n}\nexport class MainBackEndComponent {\n  constructor() {\n    this.lista = [\"Go\", \"Csharp\", \"Php\", \"Nodejs\", \"TypeScript\", \"JAVABasico\", \"JAVAIntermedio\", \"JAVAAvanzado\", \"VB\", \"C#\", \"F#\"];\n  }\n}\nMainBackEndComponent.ɵfac = function MainBackEndComponent_Factory(t) {\n  return new (t || MainBackEndComponent)();\n};\nMainBackEndComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MainBackEndComponent,\n  selectors: [[\"app-main-back-end\"]],\n  decls: 182,\n  vars: 1,\n  consts: [[4, \"ngFor\", \"ngForOf\"], [1, \"container\"], [1, \"table\", \"table-striped\", \"table-hover\", \"table-bordered\", \"align-middle\"], [\"scope\", \"col\"], [\"src\", \"../../../../../assets/backend/injectar.png\", \"alt\", \"injectar\", \"title\", \"injectar\"], [\"href\", \"https://platzi.com/clases/1630-mejor-codigo/22211-dependency-inversion-principle/\"], [\"href\", \"https://www.youtube.com/watch?v=lOg2IuQIp-s\"], [\"routerLinkActive\", \"active\", 3, \"routerLink\"]],\n  template: function MainBackEndComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"nav\")(2, \"ul\");\n      i0.ɵɵtemplate(3, MainBackEndComponent_li_3_Template, 3, 2, \"li\", 0);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(4, \"div\", 1)(5, \"table\", 2)(6, \"thead\")(7, \"tr\")(8, \"th\", 3);\n      i0.ɵɵtext(9, \"Referencia\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"th\", 3);\n      i0.ɵɵtext(11, \"Descripcion\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"th\", 3);\n      i0.ɵɵtext(13, \"Ejemplo\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(14, \"tbody\")(15, \"tr\")(16, \"td\");\n      i0.ɵɵtext(17, \"Cuatro pilares de la POO\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"td\");\n      i0.ɵɵtext(19, \" 1. Extencion o herencia \");\n      i0.ɵɵelement(20, \"br\");\n      i0.ɵɵtext(21, \" 2. Poliformismo \");\n      i0.ɵɵelement(22, \"br\");\n      i0.ɵɵtext(23, \" 3. Encapsulamiento \");\n      i0.ɵɵelement(24, \"br\");\n      i0.ɵɵtext(25, \" 4. Abstraccion \");\n      i0.ɵɵelement(26, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(27, \"td\");\n      i0.ɵɵtext(28, \" Beneficios \");\n      i0.ɵɵelement(29, \"br\");\n      i0.ɵɵtext(30, \" 1. Modularidad \");\n      i0.ɵɵelement(31, \"br\");\n      i0.ɵɵtext(32, \" 2. Informacion oculta \");\n      i0.ɵɵelement(33, \"br\");\n      i0.ɵɵtext(34, \" 3. Reutilizacion de codigo \");\n      i0.ɵɵelement(35, \"br\");\n      i0.ɵɵtext(36, \" 4. Mnatenimiento \");\n      i0.ɵɵelement(37, \"br\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(38, \"tr\")(39, \"td\");\n      i0.ɵɵtext(40, \"Consideraciones\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(41, \"td\");\n      i0.ɵɵtext(42, \" interface ---- extends \");\n      i0.ɵɵelement(43, \"br\");\n      i0.ɵɵtext(44, \" class ---- implements(interface, interface, ...) extends(class) \");\n      i0.ɵɵelement(45, \"br\")(46, \"br\");\n      i0.ɵɵtext(47, \" Una clase puede implementar cuantas interfaces quiera \");\n      i0.ɵɵelementStart(48, \"strong\");\n      i0.ɵɵtext(49, \"PEROOO\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(50, \" solo puede extender 1 \");\n      i0.ɵɵelement(51, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(52, \"td\");\n      i0.ɵɵelement(53, \"img\", 4)(54, \"br\")(55, \"br\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(56, \"tr\")(57, \"td\");\n      i0.ɵɵtext(58, \"Principio \");\n      i0.ɵɵelementStart(59, \"strong\")(60, \"a\", 5);\n      i0.ɵɵtext(61, \"SOLID\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(62, \"td\")(63, \"a\", 6);\n      i0.ɵɵtext(64, \"Ver mas info\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(65, \"br\")(66, \"br\");\n      i0.ɵɵelementStart(67, \"u\");\n      i0.ɵɵtext(68, \"*S: Single Responsibility Principle (SRP)\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(69, \"br\");\n      i0.ɵɵtext(70, \" Principio de responsabilidad unica o tambien conocido como principio de alta cohesion \");\n      i0.ɵɵelement(71, \"br\")(72, \"br\");\n      i0.ɵɵtext(73, \" Una clase solo debe tener una razon para existir y una unica responsabilidad \");\n      i0.ɵɵelement(74, \"br\")(75, \"br\");\n      i0.ɵɵelementStart(76, \"u\");\n      i0.ɵɵtext(77, \"*O: Open/Closed Principle (OCP)\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(78, \"br\");\n      i0.ɵɵtext(79, \" Principio de abierto y cerrado \");\n      i0.ɵɵelement(80, \"br\")(81, \"br\");\n      i0.ɵɵtext(82, \" Una entidad de software debe quedar abierta para su extension y cerrada para su modificacion \");\n      i0.ɵɵelement(83, \"br\")(84, \"br\");\n      i0.ɵɵelementStart(85, \"u\");\n      i0.ɵɵtext(86, \"*L: Liskov Substitution Principle (LSP)\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(87, \"br\");\n      i0.ɵɵtext(88, \" Principio de sustitucion de Liskov \");\n      i0.ɵɵelement(89, \"br\")(90, \"br\");\n      i0.ɵɵtext(91, \" Cada clase que hereda de otra puede usarse como su padre sin necesidad de conocer las diferencias entre ellas. La idea es que un padre herada a un hijo y ya .... el principio de sustitucion de Liskov aparece cuando en algun punto del codigo uno objeto requiera del padre y en esta caso pueda usar al hijo para funcionar ya que no habria diferncia \");\n      i0.ɵɵelement(92, \"br\")(93, \"br\");\n      i0.ɵɵelementStart(94, \"u\");\n      i0.ɵɵtext(95, \"*I: Interface Segregation Principle (ISP)\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(96, \"br\");\n      i0.ɵɵtext(97, \" El principio de segregaci\\u00F3n de la interfaz \");\n      i0.ɵɵelement(98, \"br\")(99, \"br\");\n      i0.ɵɵtext(100, \" establece que los clientes de un programa dado s\\u00F3lo deber\\u00EDan conocer de \\u00E9ste aquellos m\\u00E9todos que realmente usan, y no aquellos que no necesitan usar. \");\n      i0.ɵɵelement(101, \"br\")(102, \"br\");\n      i0.ɵɵelementStart(103, \"u\");\n      i0.ɵɵtext(104, \"*D: Dependency Inversion Principle (DIP)\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(105, \"br\");\n      i0.ɵɵtext(106, \" Una abstracci\\u00F3n se enfoca en la visi\\u00F3n externa de un objeto, separa el comportamiento espec\\u00EDfico de un objeto, a esta divisi\\u00F3n que realiza se le conoce como la barrera de abstracci\\u00F3n, la cu\\u00E1l se consigue aplicando el principio de m\\u00EDnimo compromiso. . \");\n      i0.ɵɵelement(107, \"br\")(108, \"br\");\n      i0.ɵɵtext(109, \" Pero\\u2026 \\u00BFQu\\u00E9 es el principio de m\\u00EDnimo compromiso? Se refiere al proceso por el cu\\u00E1l la interfaz de un objeto muestra su comportamiento espec\\u00EDfico y nada m\\u00E1s, absolutamente nada m\\u00E1s. \");\n      i0.ɵɵelement(110, \"br\")(111, \"br\");\n      i0.ɵɵtext(112, \" Ahora bien hay clases de alto nivel y otras de bajo nivel, las clases de alto nivel son las encargadas de llevar a cabo la logica del negocio y las de bajo nivel existen para ayudar a las de alto nivel cumplan con su proposito \");\n      i0.ɵɵelement(113, \"br\")(114, \"br\");\n      i0.ɵɵtext(115, \"Los modulos o clases de alto nivel no deben depender de los de bajo nivel ambos deben depender de abstracciones \");\n      i0.ɵɵelement(116, \"br\")(117, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(118, \"td\");\n      i0.ɵɵtext(119, \" S: Single Responsibility Principle (SRP)\");\n      i0.ɵɵelement(120, \"br\");\n      i0.ɵɵtext(121, \" O: Open/Closed Principle (OCP)\");\n      i0.ɵɵelement(122, \"br\");\n      i0.ɵɵtext(123, \" L: Liskov Substitution Principle (LSP)\");\n      i0.ɵɵelement(124, \"br\");\n      i0.ɵɵtext(125, \" I: Interface Segregation Principle (ISP)\");\n      i0.ɵɵelement(126, \"br\");\n      i0.ɵɵtext(127, \" D: Dependency Inversion Principle (DIP)\");\n      i0.ɵɵelement(128, \"br\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(129, \"tr\")(130, \"td\");\n      i0.ɵɵtext(131, \"inyeccion de depencias(DI)\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(132, \"td\");\n      i0.ɵɵtext(133, \" Inyectar una depedencia es pasar la depedencia a la clase que lo necesita en lugar de crearla dentro del mismo componente o clase \");\n      i0.ɵɵelement(134, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(135, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(136, \"tr\")(137, \"td\");\n      i0.ɵɵtext(138, \"Inversion de Control (IoC)\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(139, \"td\");\n      i0.ɵɵtext(140, \" Se trata de que un frameworl toma el control de los objetos y sea el quien cree o instacie los objetos \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(141, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(142, \"tr\");\n      i0.ɵɵelement(143, \"td\")(144, \"td\")(145, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(146, \"tr\");\n      i0.ɵɵelement(147, \"td\")(148, \"td\")(149, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(150, \"tr\");\n      i0.ɵɵelement(151, \"td\")(152, \"td\")(153, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(154, \"tr\");\n      i0.ɵɵelement(155, \"td\")(156, \"td\")(157, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(158, \"tr\");\n      i0.ɵɵelement(159, \"td\")(160, \"td\")(161, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(162, \"tr\");\n      i0.ɵɵelement(163, \"td\")(164, \"td\")(165, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(166, \"tr\");\n      i0.ɵɵelement(167, \"td\")(168, \"td\")(169, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(170, \"tr\");\n      i0.ɵɵelement(171, \"td\")(172, \"td\")(173, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(174, \"tr\");\n      i0.ɵɵelement(175, \"td\")(176, \"td\")(177, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(178, \"tr\");\n      i0.ɵɵelement(179, \"td\")(180, \"td\")(181, \"td\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.lista);\n    }\n  },\n  dependencies: [i1.NgForOf, i2.RouterLink, i2.RouterLinkActive],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","MainBackEndComponent","constructor","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\HP\\Desktop\\JuanTafur\\Support-FrontEnd-Angular-full\\src\\app\\core\\components\\BackEnd\\main-back-end\\main-back-end.component.html","C:\\Users\\HP\\Desktop\\JuanTafur\\Support-FrontEnd-Angular-full\\src\\app\\core\\components\\BackEnd\\main-back-end\\main-back-end.component.ts"],"sourcesContent":["<div>\r\n    <nav>\r\n        <ul>\r\n            <li *ngFor=\"let menu of lista\">\r\n                <a\r\n                    routerLink=\"/{{menu}}\"\r\n                    routerLinkActive=\"active\"\r\n                >{{menu}}</a>\r\n            </li>\r\n        </ul>\r\n    </nav>\r\n</div>\r\n\r\n\r\n<div class=\"container\">\r\n    <table class=\"table table-striped table-hover table-bordered align-middle\">\r\n        <thead>\r\n            <tr>\r\n                <th scope=\"col\">Referencia</th>\r\n                <th scope=\"col\">Descripcion</th>\r\n                <th scope=\"col\">Ejemplo</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr>\r\n                <td>Cuatro pilares de la POO</td>\r\n                <td>\r\n                  1. Extencion o herencia <br>\r\n                  2. Poliformismo <br>\r\n                  3. Encapsulamiento <br>\r\n                  4. Abstraccion <br>\r\n                </td>\r\n                <td>\r\n                  Beneficios <br>\r\n                  1. Modularidad <br>\r\n                  2. Informacion oculta <br>\r\n                  3. Reutilizacion de codigo <br>\r\n                  4. Mnatenimiento <br>\r\n                </td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td>Consideraciones</td>\r\n                <td>\r\n                    interface ---- extends <br>\r\n                    class ---- implements(interface, interface, ...) extends(class) <br><br>\r\n                    Una clase puede implementar cuantas interfaces quiera <strong>PEROOO</strong> solo puede extender 1 <br>\r\n                </td>\r\n                <td>\r\n                    <img\r\n                    src=\"../../../../../assets/backend/injectar.png\"\r\n                    alt=\"injectar\"\r\n                    title=\"injectar\"><br><br>\r\n                </td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td>Principio <strong><a href=\"https://platzi.com/clases/1630-mejor-codigo/22211-dependency-inversion-principle/\">SOLID</a></strong></td>\r\n                <td>\r\n                    <a href=\"https://www.youtube.com/watch?v=lOg2IuQIp-s\">Ver mas info</a> <br><br>\r\n                    <u>*S: Single Responsibility Principle (SRP)</u><br>\r\n                    Principio de responsabilidad unica o tambien conocido como principio de alta cohesion  <br><br>\r\n                    Una clase solo debe tener una razon para existir y una unica responsabilidad <br><br>\r\n                    <u>*O: Open/Closed Principle (OCP)</u><br>\r\n                    Principio de abierto y cerrado <br><br>\r\n                    Una entidad de software debe quedar abierta para su extension y cerrada para su modificacion <br><br>\r\n                    <u>*L: Liskov Substitution Principle (LSP)</u><br>\r\n                    Principio de sustitucion de Liskov <br><br>\r\n                    Cada clase que hereda de otra puede usarse como su padre sin necesidad de conocer las diferencias entre ellas. La idea es que un padre herada a un hijo y ya .... el principio de sustitucion de Liskov aparece cuando en algun punto del codigo uno objeto requiera del padre y en esta caso pueda usar al hijo para funcionar ya que no habria diferncia <br><br>\r\n                    <u>*I: Interface Segregation Principle (ISP)</u><br>\r\n                    El principio de segregación de la interfaz <br><br>\r\n                    establece que los clientes de un programa dado sólo deberían conocer de éste aquellos métodos que realmente usan, y no aquellos que no necesitan usar. <br><br>\r\n                    <u>*D: Dependency Inversion Principle (DIP)</u><br>\r\n                    Una abstracción se enfoca en la visión externa de un objeto, separa el comportamiento específico de un objeto, a esta división que realiza se le conoce como la barrera de abstracción, la cuál se consigue aplicando el principio de mínimo compromiso.\r\n                    . <br><br>\r\n                    Pero… ¿Qué es el principio de mínimo compromiso? Se refiere al proceso por el cuál la interfaz de un objeto muestra su comportamiento específico y nada más, absolutamente nada más. <br><br>\r\n                    Ahora bien hay clases de alto nivel y otras de bajo nivel, las clases de alto nivel son las encargadas de llevar a cabo la logica del negocio y las de bajo nivel existen para ayudar a las de alto nivel cumplan con su proposito <br><br>Los modulos o clases de alto nivel no deben depender de los de bajo nivel ambos deben depender de abstracciones  <br><br>\r\n                </td>\r\n                <td>\r\n                    S: Single Responsibility Principle (SRP)<br>\r\n                    O: Open/Closed Principle (OCP)<br>\r\n                    L: Liskov Substitution Principle (LSP)<br>\r\n                    I: Interface Segregation Principle (ISP)<br>\r\n                    D: Dependency Inversion Principle (DIP)<br>\r\n                </td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td>inyeccion de depencias(DI)</td>\r\n                <td>\r\n                    Inyectar una depedencia es pasar la depedencia a la clase que lo necesita en lugar de crearla dentro del mismo componente o clase <br>\r\n                </td>\r\n                <td></td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td>Inversion de Control (IoC)</td>\r\n                <td>\r\n                    Se trata de que un frameworl toma el control de los objetos y sea el quien cree o instacie los objetos\r\n                </td>\r\n                <td></td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td></td>\r\n                <td></td>\r\n                <td></td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td></td>\r\n                <td></td>\r\n                <td></td>\r\n            </tr>\r\n            <tr>\r\n                <td></td>\r\n                <td></td>\r\n                <td></td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td></td>\r\n                <td></td>\r\n                <td></td>\r\n            </tr>\r\n            <tr>\r\n                <td></td>\r\n                <td></td>\r\n                <td></td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td></td>\r\n                <td></td>\r\n                <td></td>\r\n            </tr>\r\n            <tr>\r\n                <td></td>\r\n                <td></td>\r\n                <td></td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td></td>\r\n                <td></td>\r\n                <td></td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td></td>\r\n                <td></td>\r\n                <td></td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td></td>\r\n                <td></td>\r\n                <td></td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-main-back-end',\r\n  templateUrl: './main-back-end.component.html',\r\n  styleUrls: ['./main-back-end.component.scss']\r\n})\r\nexport class MainBackEndComponent {\r\n\r\n  lista = [\"Go\",\"Csharp\",\"Php\",\"Nodejs\",\"TypeScript\", \"JAVABasico\", \"JAVAIntermedio\", \"JAVAAvanzado\",\r\n  \"VB\" , \"C#\", \"F#\", ];\r\n\r\n  constructor() { }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}