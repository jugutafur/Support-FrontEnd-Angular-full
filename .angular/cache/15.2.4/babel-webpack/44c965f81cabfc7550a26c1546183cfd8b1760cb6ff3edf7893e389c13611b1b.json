{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class SpringbootComponent {\n  constructor() {\n    this.abrellave = \"{\";\n    this.cierrallave = \"}\";\n    this.abreDiamante = \"<\";\n    this.cierraDiamante = \">\";\n    this.abreParentesis = \"(\";\n    this.cierraParentesis = \")\";\n    this.abreCuadro = \"[\";\n    this.cierraCuadro = \"]\";\n  }\n}\nSpringbootComponent.ɵfac = function SpringbootComponent_Factory(t) {\n  return new (t || SpringbootComponent)();\n};\nSpringbootComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SpringbootComponent,\n  selectors: [[\"app-springboot\"]],\n  decls: 538,\n  vars: 12,\n  consts: [[1, \"container\"], [1, \"table\", \"table-striped\", \"table-hover\", \"table-bordered\", \"align-middle\"], [\"scope\", \"col\"], [\"href\", \"https://docs.aws.amazon.com/es_es/corretto/latest/corretto-11-ug/what-is-corretto-11.html\"], [\"href\", \"https://www.redhat.com/es/topics/cloud-native-apps/what-is-a-Java-runtime-environment\"], [\"src\", \"../../../../../assets/backend/JavaSpring/aplicacionAutocontenida.png\", \"alt\", \"aplicacionAutocontenida\", \"title\", \"aplicacionAutocontenida\"], [\"href\", \"https://start.spring.io/\"], [\"href\", \"https://mvnrepository.com/\"], [\"href\", \"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.spring-application\"], [\"href\", \"https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html\"], [\"href\", \"https://www.javatpoint.com/spring-boot-properties\"], [\"src\", \"../../../../../assets/backend/JavaSpring/projectStructure.png\", \"alt\", \"projectStructure\", \"title\", \"projectStructure\"], [\"src\", \"../../../../../assets/backend/JavaSpring/Structure.png\", \"alt\", \"Structure\", \"title\", \"Structure\"], [\"colspan\", \"2\"], [\"src\", \"../../../../../assets/backend/JavaSpring/structure2.png\", \"alt\", \"structure2\", \"title\", \"structure2\"], [\"href\", \"https://github.com/lucasmoy-dev/Curso-de-Springboot-Hibernate/tree/main/src/main/java/com/cursojava/curso\"], [\"src\", \"../../../../../assets/framework/javaSpring/MVC.png\", \"alt\", \"MVC\"], [\"src\", \"../../../../../assets/framework/javaSpring/estrutura.png\", \"alt\", \"estrutura url\"], [\"colspan\", \"3\", 1, \"titulo\"], [\"src\", \"../../../../../assets/framework/JavaSpringBoot/postgresSQL.PNG\", \"alt\", \"postgresSQL url\"], [\"href\", \"https://www.baeldung.com/spring-postconstruct-predestroy\"], [\"href\", \"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.stored-procedures\"], [\"href\", \"https://platzi.com/clases/1996-java-spring/31508-query-methods/\"], [\"href\", \"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods\"], [\"src\", \"../../../../../assets/backend/JavaSpring/springData.png\", \"alt\", \"springData\", \"title\", \"springData\"], [\"href\", \"https://platzi.com/clases/1996-java-spring/31510-que-es-el-patron-data-mapper-y-que-resuelve/\"], [\"href\", \"https://mapstruct.org/\"], [\"href\", \"https://plugins.jetbrains.com/plugin/10036-mapstruct-support/versions\"], [\"src\", \"../../../../../assets/backend/JavaSpring/mapStruct.PNG\", \"alt\", \"mapStruct\", \"title\", \"mapStruct\"], [\"href\", \"https://www.youtube.com/watch?v=vTu2HQrXtyw\"], [\"src\", \"../../../../../assets/backend/JavaSpring/CreateObjectDBEntity.png\", \"alt\", \"CreateObjectDBEntity\", \"title\", \"CreateObjectDBEntity\"], [\"href\", \"https://platzi.com/clases/1996-java-spring/31505-crear-entity-cuando-su-clave-primaria-es-compuesta/\"]],\n  template: function SpringbootComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"table\", 1)(2, \"thead\")(3, \"tr\")(4, \"th\", 2);\n      i0.ɵɵtext(5, \"Referencia\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"th\", 2);\n      i0.ɵɵtext(7, \"Descripcion\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"th\", 2);\n      i0.ɵɵtext(9, \"Ejemplo\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(10, \"tbody\")(11, \"tr\")(12, \"td\")(13, \"strong\");\n      i0.ɵɵtext(14, \"Hay varios tipos de Java\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"td\");\n      i0.ɵɵtext(16, \" Actualmente hay dos tipos de Java: \");\n      i0.ɵɵelement(17, \"br\")(18, \"br\");\n      i0.ɵɵtext(19, \" 1. Java de Oracle es la version de pago \");\n      i0.ɵɵelement(20, \"br\")(21, \"br\");\n      i0.ɵɵtext(22, \" 2. OpenJDK que es la version openJava que ofrece Oracle free de empresas independientes \");\n      i0.ɵɵelement(23, \"br\")(24, \"br\");\n      i0.ɵɵtext(25, \" 3. \");\n      i0.ɵɵelementStart(26, \"a\", 3);\n      i0.ɵɵtext(27, \" Correto \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(28, \": que es la version que ofrece Amazon free, dispone de una certificacion de Java SE y con soporte a larga plazo \");\n      i0.ɵɵelement(29, \"br\")(30, \"br\");\n      i0.ɵɵtext(31, \" 4. \");\n      i0.ɵɵelementStart(32, \"a\", 4);\n      i0.ɵɵtext(33, \"RedHat\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(34, \" que tambien tiene openJDK \");\n      i0.ɵɵelement(35, \"br\")(36, \"br\");\n      i0.ɵɵtext(37, \" Esto es debido a que oracle al ser de pago compa\\u00F1ias independientes como \");\n      i0.ɵɵelementStart(38, \"strong\");\n      i0.ɵɵtext(39, \"Red hat con OpenJDK, Amazon Correto... entre otros \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(40, \"ofrecen un Java que tecnicamente es igual al de oracle \");\n      i0.ɵɵelement(41, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(42, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(43, \"tr\")(44, \"td\");\n      i0.ɵɵtext(45, \"Arquitectura\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(46, \"td\");\n      i0.ɵɵtext(47, \" Es posible encontrar una aplicacion donde contenga todos los servicios necesarios para que funcione lo cual se llama \");\n      i0.ɵɵelementStart(48, \"strong\");\n      i0.ɵɵtext(49, \"servidor de aplicaciones\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(50, \" y una aplicacion que este compuesta por varios servicios o microservicios a esto se le llama \");\n      i0.ɵɵelementStart(51, \"strong\");\n      i0.ɵɵtext(52, \"aplicacion autocontenida\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(53, \"td\");\n      i0.ɵɵelement(54, \"img\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(55, \"tr\")(56, \"td\")(57, \"a\", 6);\n      i0.ɵɵtext(58, \"Spring Initializr\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(59, \"br\")(60, \"br\");\n      i0.ɵɵtext(61, \" Ahora para descargar Repositorios \");\n      i0.ɵɵelementStart(62, \"strong\");\n      i0.ɵɵelement(63, \"br\")(64, \"br\");\n      i0.ɵɵelementStart(65, \"a\", 7);\n      i0.ɵɵtext(66, \"Maven Repository\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(67, \"td\");\n      i0.ɵɵtext(68, \" Es el framework de Java para crear aplicaciones autocontenidas \");\n      i0.ɵɵelementStart(69, \"a\", 8);\n      i0.ɵɵtext(70, \"PARA VER LA DOCUMENTACIO\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(71, \" y \");\n      i0.ɵɵelementStart(72, \"a\", 9);\n      i0.ɵɵtext(73, \"tambien en este espacio\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(74, \"br\")(75, \"br\");\n      i0.ɵɵtext(76, \" Herramienta de construcci\\u00F3n con Maven = gestionan las dependencias con archivos XML \");\n      i0.ɵɵelement(77, \"br\");\n      i0.ɵɵtext(78, \" Herramienta de construcci\\u00F3n con Grandle = gestionan las dependencias con archivos Grovy \");\n      i0.ɵɵelement(79, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(80, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(81, \"tr\")(82, \"td\")(83, \"a\", 9);\n      i0.ɵɵtext(84, \"aplicacion.properties\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(85, \"br\")(86, \"br\");\n      i0.ɵɵelementStart(87, \"a\", 10);\n      i0.ɵɵtext(88, \"Ver tambien\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(89, \"td\");\n      i0.ɵɵtext(90, \" En este archivo podemos configurar diversos entornos para el desarrollo como un entrono de \");\n      i0.ɵɵelementStart(91, \"strong\");\n      i0.ɵɵtext(92, \"desarrollo, produccion, stage(prepoduccion....)\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(93, \"br\")(94, \"br\");\n      i0.ɵɵtext(95, \" * spring.profiles.active = dev // esto quiere decir que el applicacion.properties \\\"principal\\\" va a buscar el application-dev.properties y por hay va a desplegar la aplicacion \");\n      i0.ɵɵelement(96, \"br\")(97, \"br\");\n      i0.ɵɵtext(98, \" * server.port=8090 // Podemos configurar el puerto por el cual se despliega el contenedor \");\n      i0.ɵɵelement(99, \"br\")(100, \"br\")(101, \"br\");\n      i0.ɵɵtext(102, \" * server.servlet.context-path=/usuarios/uno //Podemos modificar el contex path \");\n      i0.ɵɵelement(103, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(104, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(105, \"tr\")(106, \"td\");\n      i0.ɵɵtext(107, \"Project Structure \");\n      i0.ɵɵelement(108, \"br\")(109, \"br\");\n      i0.ɵɵtext(110, \"Orientado al dominio\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(111, \"td\");\n      i0.ɵɵtext(112, \" * la capa de Dominio: Donde estan los DTO y los objetos de Dominio \");\n      i0.ɵɵelement(113, \"br\");\n      i0.ɵɵtext(114, \" * la capa de Repositorios: Donde estan definida las clases \");\n      i0.ɵɵelement(115, \"br\");\n      i0.ɵɵtext(116, \" * la capa de servicios: esta encargada de ser puente entre los los controladores de la Api y la persistencia \");\n      i0.ɵɵelement(117, \"br\");\n      i0.ɵɵtext(118, \" * la capa web: es donde estan definido los controllers \");\n      i0.ɵɵelement(119, \"br\");\n      i0.ɵɵtext(120, \" * la capa de la persistencia: es la encargada de interacturar con la BD \");\n      i0.ɵɵelement(121, \"br\")(122, \"br\")(123, \"br\")(124, \"img\", 11)(125, \"br\")(126, \"br\")(127, \"br\");\n      i0.ɵɵtext(128, \" En la capa del dominio encontramos los entities que son las clases que mapean las tablas en la BD y la variable debe estar: \");\n      i0.ɵɵelement(129, \"br\")(130, \"br\");\n      i0.ɵɵtext(131);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(132, \"td\");\n      i0.ɵɵelement(133, \"img\", 12);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(134, \"tr\")(135, \"td\");\n      i0.ɵɵtext(136, \"Structure\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(137, \"td\", 13);\n      i0.ɵɵelement(138, \"img\", 14);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(139, \"tr\")(140, \"td\");\n      i0.ɵɵtext(141, \"build.gradle\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(142, \"td\");\n      i0.ɵɵtext(143, \" Es este archivo estaran \");\n      i0.ɵɵelement(144, \"br\")(145, \"br\");\n      i0.ɵɵtext(146, \" * los implementation que son la injeccion de dependencias o librerias que nos permite maven Reposory agregar al proyecto \");\n      i0.ɵɵelement(147, \"br\")(148, \"br\");\n      i0.ɵɵtext(149, \" * podemos indicar la BD \");\n      i0.ɵɵelementStart(150, \"strong\");\n      i0.ɵɵtext(151, \"runtimeOnly\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(152, \" por que solo la necesitamos en tiempo de ejecucion y entre ' ' agregamos la dependencia que nos brinda maven repository para la BD \");\n      i0.ɵɵelement(153, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(154, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(155, \"tr\")(156, \"td\");\n      i0.ɵɵtext(157, \"Imagenes importantes curso JAVA spring \");\n      i0.ɵɵelement(158, \"br\");\n      i0.ɵɵelementStart(159, \"a\", 15);\n      i0.ɵɵtext(160, \"repositorio\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(161, \"td\");\n      i0.ɵɵelement(162, \"img\", 16);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(163, \"td\");\n      i0.ɵɵelement(164, \"img\", 17);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(165, \"tr\")(166, \"td\", 18)(167, \"strong\");\n      i0.ɵɵtext(168, \"Spring Data\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(169, \"tr\")(170, \"td\");\n      i0.ɵɵtext(171, \"Que es??\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(172, \"td\");\n      i0.ɵɵtext(173, \" * Spring Data es un proyecto que usa JPA. \");\n      i0.ɵɵelement(174, \"br\");\n      i0.ɵɵtext(175, \" * Spring Data contiene varios sub-proyectos \");\n      i0.ɵɵelementStart(176, \"strong\");\n      i0.ɵɵtext(177, \"(ej. Spring Data JPA, Spring Data JDBC, Spring Data MongDB, Spring Data Kasandra).\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(178, \"br\");\n      i0.ɵɵtext(179, \" * Tiene Auditorias transparentes (guarda el registro de los querys). \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(180, \"td\")(181, \"strong\");\n      i0.ɵɵtext(182, \"implementation 'org.springframework.boot:spring-boot-starter-data-jpa'\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(183, \"tr\")(184, \"td\");\n      i0.ɵɵtext(185, \"Conectar postgreSql\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(186, \"td\");\n      i0.ɵɵtext(187, \"runtimeOnly 'org.postgresql:postgresql'\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(188, \"td\");\n      i0.ɵɵelement(189, \"img\", 19);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(190, \"tr\")(191, \"td\");\n      i0.ɵɵtext(192, \"Anotaciones\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(193, \"td\")(194, \"a\", 20);\n      i0.ɵɵtext(195, \"Ver inf @PostConstruct y @PreDestroy\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(196, \"br\")(197, \"br\");\n      i0.ɵɵelementStart(198, \"strong\");\n      i0.ɵɵtext(199, \"@PostConstruct\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(200, \" //Spring llama a los m\\u00E9todos anotados con @PostConstruct solo una vez, justo despu\\u00E9s de la inicializaci\\u00F3n de las propiedades del bean . Tenga en cuenta que estos m\\u00E9todos se ejecutar\\u00E1n incluso si no hay nada que inicializar. \");\n      i0.ɵɵelement(201, \"br\");\n      i0.ɵɵtext(202, \" El m\\u00E9todo anotado con \");\n      i0.ɵɵelementStart(203, \"strong\");\n      i0.ɵɵtext(204, \"@PostConstruct\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(205, \" puede tener cualquier nivel de acceso pero no puede ser est\\u00E1tico. Debe ser declarado despues de la injeccion de dependencias, solo es posible en \");\n      i0.ɵɵelementStart(206, \"strong\");\n      i0.ɵɵtext(207, \"Beans\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(208, \" que soporten la injeccion de dependencias \");\n      i0.ɵɵelement(209, \"br\")(210, \"br\");\n      i0.ɵɵelementStart(211, \"strong\");\n      i0.ɵɵtext(212, \"@PreDestroy\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(213, \" //Un m\\u00E9todo anotado con @PreDestroy se ejecuta solo una vez, justo antes de que Spring elimine nuestro bean del contexto de la aplicaci\\u00F3n. \");\n      i0.ɵɵelement(214, \"br\");\n      i0.ɵɵtext(215, \" Al igual que con \");\n      i0.ɵɵelementStart(216, \"strong\");\n      i0.ɵɵtext(217, \"@PostConstruct\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(218, \" , los m\\u00E9todos anotados con @PreDestroy pueden tener cualquier nivel de acceso, pero no pueden ser est\\u00E1ticos. \");\n      i0.ɵɵelement(219, \"br\");\n      i0.ɵɵtext(220, \"El prop\\u00F3sito de este m\\u00E9todo debe ser liberar recursos o realizar cualquier otra tarea de limpieza antes de que se destruya el bean, por ejemplo, cerrar una conexi\\u00F3n a la base de datos. \");\n      i0.ɵɵelement(221, \"br\")(222, \"br\");\n      i0.ɵɵelementStart(223, \"strong\");\n      i0.ɵɵtext(224, \"@SpringBootApplication\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(225, \" //declara la class main por donde inicia el project \");\n      i0.ɵɵelement(226, \"br\");\n      i0.ɵɵelementStart(227, \"strong\");\n      i0.ɵɵtext(228, \"@Service\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(229, \"// es el puente enter el controller y el repository \");\n      i0.ɵɵelement(230, \"br\");\n      i0.ɵɵelementStart(231, \"strong\");\n      i0.ɵɵtext(232, \"@RestController\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(233, \" //que la clase es un controller \");\n      i0.ɵɵelement(234, \"br\");\n      i0.ɵɵelementStart(235, \"strong\");\n      i0.ɵɵtext(236, \"@Autowired // Inversion de control\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(237, \" esto delega al framework como el encargado de crear e instanciar el objeto\");\n      i0.ɵɵelement(238, \"br\");\n      i0.ɵɵelementStart(239, \"strong\");\n      i0.ɵɵtext(240);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(241, \" //define el path principal del controller \");\n      i0.ɵɵelement(242, \"br\");\n      i0.ɵɵelementStart(243, \"strong\");\n      i0.ɵɵtext(244);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(245, \" // define el path secundario del controlador \");\n      i0.ɵɵelement(246, \"br\")(247, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(248, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(249, \"tr\")(250, \"td\");\n      i0.ɵɵtext(251, \"MapStruct\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(252, \"td\")(253, \"strong\");\n      i0.ɵɵtext(254);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(255, \" indicara que la interface va a mapear la table del dominio y la identidad \");\n      i0.ɵɵelement(256, \"br\")(257, \"br\");\n      i0.ɵɵelementStart(258, \"strong\");\n      i0.ɵɵtext(259, \"@Mappings\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(260, \" grupo de traductor de campos entre tablas \");\n      i0.ɵɵelement(261, \"br\")(262, \"br\");\n      i0.ɵɵelementStart(263, \"strong\");\n      i0.ɵɵtext(264, \"@Mapping\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(265, \" van cruzados y es de donde va a sacar el valor y donde se lo va a poner \");\n      i0.ɵɵelement(266, \"br\");\n      i0.ɵɵelementStart(267, \"strong\");\n      i0.ɵɵtext(268, \"@InheritInverseConfiguration\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(269, \" es para hacer de manera inversa la traduccion ya con esto ya no es necesario declaran nuevamente mappings\");\n      i0.ɵɵelement(270, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(271, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(272, \"tr\")(273, \"td\");\n      i0.ɵɵtext(274, \"JPA\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(275, \"td\");\n      i0.ɵɵtext(276, \" Jpa es una especificaci\\u00F3n de Java o un standar, reglas que JAVA define para que cualquier framework que quiera interecatuar con una BD tiene que seguir, por medio de Anotaciones o Decoradores evitando hacer consultas de manera nativa o de manera SQL \");\n      i0.ɵɵelement(277, \"br\")(278, \"br\");\n      i0.ɵɵtext(279, \" Un Framework que implemente lo anterior se convierte en un ORM. \");\n      i0.ɵɵelementStart(280, \"strong\");\n      i0.ɵɵtext(281, \"Object Relation Mapping\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(282, \"br\")(283, \"br\");\n      i0.ɵɵtext(284, \" como por ejemplo Frameworks ORM son: \");\n      i0.ɵɵelement(285, \"br\");\n      i0.ɵɵtext(286, \" * Hibernate. \");\n      i0.ɵɵelement(287, \"br\");\n      i0.ɵɵtext(288, \" * TopLink. \");\n      i0.ɵɵelement(289, \"br\");\n      i0.ɵɵtext(290, \" * EclipseLink. \");\n      i0.ɵɵelement(291, \"br\");\n      i0.ɵɵtext(292, \" * ObjectDB. \");\n      i0.ɵɵelement(293, \"br\")(294, \"br\");\n      i0.ɵɵelementStart(295, \"strong\");\n      i0.ɵɵtext(296, \"@Entity\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(297, \" para indicar que una clase java representa una tabla en la base de datos\");\n      i0.ɵɵelement(298, \"br\");\n      i0.ɵɵelementStart(299, \"strong\");\n      i0.ɵɵtext(300, \"@Table\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(301, \" recible el nombre de la tabla\");\n      i0.ɵɵelement(302, \"br\");\n      i0.ɵɵelementStart(303, \"strong\");\n      i0.ɵɵtext(304, \"@Column\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(305, \" se le pone a los atributos de la clase y se usa cuando los nombres entre la tabla y la entidad no coinciden\");\n      i0.ɵɵelement(306, \"br\");\n      i0.ɵɵelementStart(307, \"strong\");\n      i0.ɵɵtext(308);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(309, \"br\");\n      i0.ɵɵelementStart(310, \"strong\");\n      i0.ɵɵtext(311, \"@Id y @EmbededId\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(312, \" representan la clave primaria, id para sencilla y embededId para compuesta\");\n      i0.ɵɵelement(313, \"br\");\n      i0.ɵɵelementStart(314, \"strong\");\n      i0.ɵɵtext(315, \"@GeneratedValue\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(316, \" genera valores automaticos para las llaves de las tablas\");\n      i0.ɵɵelement(317, \"br\");\n      i0.ɵɵelementStart(318, \"strong\");\n      i0.ɵɵtext(319, \"@OneToMany @ManyToOne\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(320, \" permite representar relaciones\");\n      i0.ɵɵelement(321, \"br\");\n      i0.ɵɵelementStart(322, \"u\")(323, \"a\", 21);\n      i0.ɵɵtext(324, \"Procedimiento Almacenado\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(325, \"br\")(326, \"br\");\n      i0.ɵɵelementStart(327, \"strong\");\n      i0.ɵɵtext(328, \"@Query\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(329, \"(nativeQuery = true) o con la anotaci\\u00F3n \");\n      i0.ɵɵelementStart(330, \"strong\");\n      i0.ɵɵtext(331, \"@Procedure\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(332, \".\");\n      i0.ɵɵelement(333, \"br\");\n      i0.ɵɵelementStart(334, \"strong\");\n      i0.ɵɵtext(335);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(336, \" Desde la interfaz del crud podemos implementar querys de manera nativa de esta manera\");\n      i0.ɵɵelement(337, \"br\");\n      i0.ɵɵelementStart(338, \"strong\");\n      i0.ɵɵtext(339, \"@Repository\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(340, \" Con este le indicamos a JavaSpring que la clase va a interacturar con la BD por que en esta clase estaran definidos los metodos que operaran con los registros de la BD.\");\n      i0.ɵɵelement(341, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(342, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(343, \"tr\")(344, \"td\")(345, \"a\", 22);\n      i0.ɵɵtext(346, \"query-methods\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(347, \"td\");\n      i0.ɵɵtext(348, \" ver mas info \");\n      i0.ɵɵelementStart(349, \"a\", 23);\n      i0.ɵɵtext(350, \"En el siguiente enlace\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(351, \"td\");\n      i0.ɵɵelement(352, \"img\", 24);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(353, \"tr\")(354, \"td\")(355, \"a\", 25);\n      i0.ɵɵtext(356, \"patron Data mapper\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(357, \"td\");\n      i0.ɵɵtext(358, \" Es la forma en la cual traducimos o convertimos una tabla en otra, esto con el fin de tener tablas definidas en termino de la persistencia con sus semejantes en termino de dominio \");\n      i0.ɵɵelement(359, \"br\")(360, \"br\");\n      i0.ɵɵtext(361, \" Con esto descoplamos la BD de la Api \");\n      i0.ɵɵelement(362, \"br\");\n      i0.ɵɵtext(363, \" mapeamos solo los campos que son necesarios y no todos los campo de las tablas ya que estos puede tener sentido de existencia en BD \");\n      i0.ɵɵelement(364, \"br\");\n      i0.ɵɵtext(365, \" De esta manera la Api podria cambiar de BD y no tendria conflicto con el codigo \");\n      i0.ɵɵelement(366, \"br\")(367, \"br\");\n      i0.ɵɵtext(368, \" Para usarlo debemos: \");\n      i0.ɵɵelement(369, \"br\")(370, \"br\");\n      i0.ɵɵtext(371, \" 1. Descargarlo \");\n      i0.ɵɵelementStart(372, \"a\", 26);\n      i0.ɵɵtext(373, \"En la pagina oficial\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(374, \"br\")(375, \"br\");\n      i0.ɵɵtext(376, \" 2. se debe instalar un plugin que autocompletara las structuras de mapstruc dentro de intellintIDea \");\n      i0.ɵɵelementStart(377, \"a\", 27)(378, \"strong\");\n      i0.ɵɵtext(379, \"Jet Brains\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(380, \"br\")(381, \"br\");\n      i0.ɵɵtext(382, \" Otra forma de instalar plugins en IntelliJ es ir a files > Settings o Ctrl + Alt + S / en Mac es con command + , (coma) En el panel izquierdo se selecciona \\\"plugins\\\" y solo queda buscar \\u201CMapStruct Support\\u201D e instalarlo \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(383, \"td\");\n      i0.ɵɵelement(384, \"img\", 28);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(385, \"tr\")(386, \"td\")(387, \"a\", 29);\n      i0.ɵɵtext(388, \"Base de datos\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(389, \"td\");\n      i0.ɵɵtext(390, \" Cuando en nuestro codigo estamos configurando la base de datos podemos indicar que al ejecutar el codigo este el back quien crea la BD o si la BD ya existe que la actualice \");\n      i0.ɵɵelement(391, \"br\")(392, \"br\");\n      i0.ɵɵtext(393, \"De la manera como lo indica la imagen \");\n      i0.ɵɵelement(394, \"br\")(395, \"br\");\n      i0.ɵɵelementStart(396, \"strong\");\n      i0.ɵɵtext(397, \"spring.jpa.hibernate.ddl-auto=update/none\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(398, \"td\");\n      i0.ɵɵelement(399, \"img\", 30);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(400, \"tr\")(401, \"td\")(402, \"a\", 31);\n      i0.ɵɵtext(403, \"llaves PK Compuestas\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(404, \"td\")(405, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(406, \"tr\");\n      i0.ɵɵelement(407, \"td\")(408, \"td\")(409, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(410, \"tr\");\n      i0.ɵɵelement(411, \"td\")(412, \"td\")(413, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(414, \"tr\");\n      i0.ɵɵelement(415, \"td\")(416, \"td\")(417, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(418, \"tr\");\n      i0.ɵɵelement(419, \"td\")(420, \"td\")(421, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(422, \"tr\");\n      i0.ɵɵelement(423, \"td\")(424, \"td\")(425, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(426, \"tr\");\n      i0.ɵɵelement(427, \"td\")(428, \"td\")(429, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(430, \"tr\");\n      i0.ɵɵelement(431, \"td\")(432, \"td\")(433, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(434, \"tr\");\n      i0.ɵɵelement(435, \"td\")(436, \"td\")(437, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(438, \"tr\");\n      i0.ɵɵelement(439, \"td\")(440, \"td\")(441, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(442, \"tr\");\n      i0.ɵɵelement(443, \"td\")(444, \"td\")(445, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(446, \"tr\");\n      i0.ɵɵelement(447, \"td\")(448, \"td\")(449, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(450, \"tr\");\n      i0.ɵɵelement(451, \"td\")(452, \"td\")(453, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(454, \"tr\");\n      i0.ɵɵelement(455, \"td\")(456, \"td\")(457, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(458, \"tr\");\n      i0.ɵɵelement(459, \"td\")(460, \"td\")(461, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(462, \"tr\");\n      i0.ɵɵelement(463, \"td\")(464, \"td\")(465, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(466, \"tr\");\n      i0.ɵɵelement(467, \"td\")(468, \"td\")(469, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(470, \"tr\");\n      i0.ɵɵelement(471, \"td\")(472, \"td\")(473, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(474, \"tr\");\n      i0.ɵɵelement(475, \"td\")(476, \"td\")(477, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(478, \"tr\");\n      i0.ɵɵelement(479, \"td\")(480, \"td\")(481, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(482, \"tr\");\n      i0.ɵɵelement(483, \"td\")(484, \"td\")(485, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(486, \"tr\");\n      i0.ɵɵelement(487, \"td\")(488, \"td\")(489, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(490, \"tr\");\n      i0.ɵɵelement(491, \"td\")(492, \"td\")(493, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(494, \"tr\");\n      i0.ɵɵelement(495, \"td\")(496, \"td\")(497, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(498, \"tr\");\n      i0.ɵɵelement(499, \"td\")(500, \"td\")(501, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(502, \"tr\");\n      i0.ɵɵelement(503, \"td\")(504, \"td\")(505, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(506, \"tr\");\n      i0.ɵɵelement(507, \"td\")(508, \"td\")(509, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(510, \"tr\");\n      i0.ɵɵelement(511, \"td\")(512, \"td\")(513, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(514, \"tr\");\n      i0.ɵɵelement(515, \"td\")(516, \"td\")(517, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(518, \"tr\");\n      i0.ɵɵelement(519, \"td\")(520, \"td\")(521, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(522, \"tr\");\n      i0.ɵɵelement(523, \"td\")(524, \"td\")(525, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(526, \"tr\");\n      i0.ɵɵelement(527, \"td\")(528, \"td\")(529, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(530, \"tr\");\n      i0.ɵɵelement(531, \"td\")(532, \"td\")(533, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(534, \"tr\");\n      i0.ɵɵelement(535, \"td\")(536, \"td\")(537, \"td\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(131);\n      i0.ɵɵtextInterpolate2(\" * Con el dato Clases Envolventes \", ctx.abreParentesis, \" Wrapper\", ctx.cierraParentesis, \" * debe estar en camelCase(y como en el ejemplo el nombre de la columna cambio se debe utilizar el anotacion @Column) \");\n      i0.ɵɵadvance(109);\n      i0.ɵɵtextInterpolate2(\"@RequestMapping\", ctx.abreParentesis, \"\\\"/saludar\\\"\", ctx.cierraParentesis, \"\");\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate2(\"@GetMapping\", ctx.abreParentesis, \"\\\"/hola\\\"\", ctx.cierraParentesis, \"\");\n      i0.ɵɵadvance(10);\n      i0.ɵɵtextInterpolate2(\"@Mapper\", ctx.abreParentesis, \"componentModel = \\\"spring\\\"\", ctx.cierraParentesis, \"\");\n      i0.ɵɵadvance(54);\n      i0.ɵɵtextInterpolate2(\"@Column\", ctx.abreParentesis, \"unique = true, nullable= false\", ctx.cierraParentesis, \" //para los campos Id o campos que son unicos y no permite valores nulos\");\n      i0.ɵɵadvance(27);\n      i0.ɵɵtextInterpolate2(\"@Query \", ctx.abreParentesis, \"value = \\\" SELECT * FROM categorias WHERE id_categoria = ? \\\", nativeQuery = true \", ctx.cierraParentesis, \".\");\n    }\n  },\n  styles: [\".titulo[_ngcontent-%COMP%] {\\n  text-align: center;\\n  font-size: 25px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29yZS9jb21wb25lbnRzL2ZyYW1ld29rcy9zcHJpbmdib290L3NwcmluZ2Jvb3QuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxrQkFBQTtFQUNBLGVBQUE7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIi50aXR1bG97XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIGZvbnQtc2l6ZTogMjVweDtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":";AAOA,OAAM,MAAOA,mBAAmB;EAW9BC;IACE,IAAI,CAACC,SAAS,GAAE,GAAG;IACnB,IAAI,CAACC,WAAW,GAAC,GAAG;IACpB,IAAI,CAACC,YAAY,GAAE,GAAG;IACtB,IAAI,CAACC,cAAc,GAAE,GAAG;IACxB,IAAI,CAACC,cAAc,GAAE,GAAG;IACxB,IAAI,CAACC,gBAAgB,GAAE,GAAG;IAC1B,IAAI,CAACC,UAAU,GAAE,GAAG;IACpB,IAAI,CAACC,YAAY,GAAE,GAAG;EACxB;;;mBApBWT,mBAAmB;AAAA;;QAAnBA,mBAAmB;EAAAU;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCPhCC,8BAAuB;MAIOA,0BAAU;MAAAA,iBAAK;MAC/BA,6BAAgB;MAAAA,2BAAW;MAAAA,iBAAK;MAChCA,6BAAgB;MAAAA,uBAAO;MAAAA,iBAAK;MAGpCA,8BAAO;MAEaA,yCAAwB;MAAAA,iBAAS;MAC7CA,2BAAI;MACAA,qDAAmC;MAAAA,sBAAI;MACvCA,0DAAwC;MAAAA,sBAAI;MAC5CA,0GAAwF;MAAAA,sBAAI;MAC5FA,qBAAG;MAAAA,6BAAoG;MAACA,0BAAQ;MAAAA,iBAAI;MAAAA,iIAAgH;MAAAA,sBAAI;MACxOA,qBAAG;MAAAA,6BAAgG;MAAAA,uBAAM;MAAAA,iBAAI;MAACA,4CAA0B;MAAAA,sBAAI;MAC5IA,gGAAyE;MAAAA,+BAAQ;MAAAA,oEAAmD;MAAAA,iBAAS;MAAAA,wEAAuD;MAAAA,sBAAI;MAC5MA,iBAAK;MACLA,sBAAS;MACbA,iBAAK;MAELA,2BAAI;MACIA,6BAAY;MAAAA,iBAAK;MACrBA,2BAAI;MACAA,uIAAqH;MAAAA,+BAAQ;MAAAA,yCAAwB;MAAAA,iBAAS;MAACA,+GAA6F;MAAAA,+BAAQ;MAAAA,yCAAwB;MAAAA,iBAAS;MAEzSA,2BAAI;MACAA,0BAGgC;MACpCA,iBAAK;MAGTA,2BAAI;MAEuCA,kCAAiB;MAAAA,iBAAI;MAAAA,sBAAI;MAC5DA,oDAAkC;MAAAA,+BAAQ;MAAAA,sBAAI;MAAIA,6BAAqC;MAAAA,iCAAgB;MAAAA,iBAAI;MAE/GA,2BAAI;MACAA,iFAA+D;MAAAA,6BAAmH;MAAAA,yCAAwB;MAAAA,iBAAI;MAACA,oBAAE;MAAAA,6BAAqG;MAAAA,wCAAuB;MAAAA,iBAAI;MAAAA,sBAAI;MACrVA,2GAAoF;MAAAA,sBAAI;MACxFA,+GAAwF;MAAAA,sBAAI;MAChGA,iBAAK;MACLA,sBAAS;MACbA,iBAAK;MAELA,2BAAI;MACyGA,sCAAqB;MAAAA,iBAAI;MAAAA,sBAAI;MAAIA,8BAA4D;MAAAA,4BAAW;MAAAA,iBAAI;MACrNA,2BAAI;MACAA,6GAA2F;MAAAA,+BAAQ;MAAAA,gEAA+C;MAAAA,iBAAS;MAACA,sBAAI;MAChKA,mMAA+K;MAAAA,sBAAI;MACnLA,4GAA0F;MAAAA,sBAAI;MAE9FA,kGAA+E;MAAAA,uBAAI;MACvFA,iBAAK;MACLA,uBAAS;MACbA,iBAAK;MACLA,4BAAI;MACIA,oCAAkB;MAAAA,uBAAI;MAAIA,sCAAoB;MAAAA,iBAAK;MACvDA,4BAAI;MACAA,sFAAmE;MAAAA,uBAAI;MACvEA,8EAA2D;MAAAA,uBAAI;MAC/DA,gIAA6G;MAAAA,uBAAI;MACjHA,0EAAuD;MAAAA,uBAAI;MAC3DA,2FAAwE;MAAAA,uBAAI;MAK5EA,+IAA4H;MAAAA,uBAAI;MAChIA,cAGJ;MAAAA,iBAAK;MACLA,4BAAI;MACAA,4BAGkB;MACtBA,iBAAK;MAGTA,4BAAI;MACIA,2BAAS;MAAAA,iBAAK;MAClBA,gCAAgB;MACZA,4BAGmB;MACvBA,iBAAK;MAGTA,4BAAI;MACIA,8BAAY;MAAAA,iBAAK;MACrBA,4BAAI;MACAA,2CAAyB;MAAAA,uBAAI;MAC7BA,4IAAyH;MAAAA,uBAAI;MAC7HA,2CAAwB;MAAAA,gCAAQ;MAAAA,6BAAW;MAAAA,iBAAS;MAACA,sJAAmI;MAAAA,uBAAI;MAChMA,iBAAK;MACLA,uBAAS;MACbA,iBAAK;MAELA,4BAAI;MACIA,yDAAuC;MAAAA,uBAAI;MAC/CA,+BAAoH;MAAAA,6BAAW;MAAAA,iBAAI;MAEnIA,4BAAI;MAAAA,4BAAwE;MAAAA,iBAAK;MACjFA,4BAAI;MAAAA,4BAAwF;MAAAA,iBAAK;MAGrGA,4BAAI;MACqCA,6BAAW;MAAAA,iBAAS;MAG7DA,4BAAI;MACIA,0BAAQ;MAAAA,iBAAK;MACjBA,4BAAI;MACFA,6DAA0C;MAAAA,uBAAI;MAC9CA,+DAA4C;MAAAA,gCAAQ;MAAAA,oGAAkF;MAAAA,iBAAS;MAAAA,uBAAI;MACnJA,wFACF;MAAAA,iBAAK;MACLA,4BAAI;MACMA,wFAAsE;MAAAA,iBAAS;MAI7FA,4BAAI;MACIA,qCAAmB;MAAAA,iBAAK;MAC5BA,4BAAI;MAAAA,yDAAuC;MAAAA,iBAAK;MAChDA,4BAAI;MAAAA,4BAAgG;MAAAA,iBAAK;MAG7GA,4BAAI;MACEA,6BAAW;MAAAA,iBAAK;MACpBA,4BAAI;MACmEA,sDAAoC;MAAAA,iBAAI;MAACA,uBAAI;MAChHA,gCAAQ;MAAAA,gCAAc;MAAAA,iBAAS;MAACA,4QAAgO;MAAAA,uBAAI;MACpQA,8CAAsB;MAAAA,gCAAQ;MAAAA,gCAAc;MAAAA,iBAAS;MAACA,yKAAiJ;MAAAA,gCAAQ;MAAAA,uBAAK;MAAAA,iBAAS;MAACA,6DAA0C;MAAAA,uBAAI;MAE5QA,gCAAQ;MAAAA,6BAAW;MAAAA,iBAAS;MAACA,wKAC7B;MAAAA,uBAAI;MACJA,oCAAiB;MAAAA,gCAAQ;MAAAA,gCAAc;MAAAA,iBAAS;MAACA,0IACjD;MAAAA,uBAAI;MAAAA,0NAAyL;MAAAA,uBAAI;MACjMA,gCAAQ;MAAAA,wCAAsB;MAAAA,iBAAS;MAACA,uEAAoD;MAAAA,uBAAI;MAChGA,gCAAQ;MAAAA,0BAAQ;MAAAA,iBAAS;MAAAA,sEAAoD;MAAAA,uBAAI;MACjFA,gCAAQ;MAAAA,iCAAe;MAAAA,iBAAS;MAAEA,mDAAgC;MAAAA,uBAAI;MACtEA,gCAAQ;MAAAA,oDAAkC;MAAAA,iBAAS;MAACA,6FAA0E;MAAAA,uBAAI;MAClIA,gCAAQ;MAAAA,cAA+D;MAAAA,iBAAS;MAAEA,6DAA0C;MAAAA,uBAAI;MAChIA,gCAAQ;MAAAA,cAAwD;MAAAA,iBAAS;MAACA,gEAA6C;MAAAA,uBAAI;MAC/HA,iBAAK;MACLA,uBAAS;MACXA,iBAAK;MAELA,4BAAI;MACEA,2BAAS;MAAAA,iBAAK;MAClBA,4BAAI;MACMA,cAAsE;MAAAA,iBAAS;MAACA,6FAA0E;MAAAA,uBAAI;MACtKA,gCAAQ;MAAAA,2BAAS;MAAAA,iBAAS;MAACA,6DAA0C;MAAAA,uBAAI;MACzEA,gCAAQ;MAAAA,0BAAQ;MAAAA,iBAAS;MAACA,2FAAwE;MAAAA,uBAAI;MACtGA,gCAAQ;MAAAA,8CAA4B;MAAAA,iBAAS;MAACA,4HAAyG;MAAAA,uBAAI;MAC7JA,iBAAK;MACLA,uBAAS;MACXA,iBAAK;MAELA,4BAAI;MACEA,qBAAG;MAAAA,iBAAK;MACZA,4BAAI;MACAA,kRAA0P;MAAAA,uBAAI;MAC9PA,mFAAiE;MAAAA,gCAAQ;MAAAA,yCAAuB;MAAAA,iBAAS;MAAAA,uBAAI;MAC7GA,wDAAqC;MAAAA,uBAAI;MACzCA,gCAAa;MAAAA,uBAAI;MACjBA,8BAAW;MAAAA,uBAAI;MACfA,kCAAe;MAAAA,uBAAI;MACnBA,+BAAY;MAAAA,uBAAI;MAChBA,gCAAQ;MAAAA,yBAAO;MAAAA,iBAAS;MAACA,2FAAwE;MAAAA,uBAAI;MACrGA,gCAAQ;MAAAA,wBAAM;MAAAA,iBAAS;MAACA,gDAA6B;MAAAA,uBAAI;MACzDA,gCAAQ;MAAAA,yBAAO;MAAAA,iBAAS;MAACA,8HAA2G;MAAAA,uBAAI;MACxIA,gCAAQ;MAAAA,cAAmJ;MAAAA,iBAAS;MAACA,uBAAI;MACzKA,gCAAQ;MAAAA,kCAAgB;MAAAA,iBAAS;MAACA,6FAA0E;MAAAA,uBAAI;MAChHA,gCAAQ;MAAAA,iCAAe;MAAAA,iBAAS;MAACA,2EAAwD;MAAAA,uBAAI;MAC7FA,gCAAQ;MAAAA,uCAAqB;MAAAA,iBAAS;MAACA,iDAA8B;MAAAA,uBAAI;MACzEA,2BAAG;MAAoGA,0CAAwB;MAAAA,iBAAI;MAAIA,uBAAI;MAC3IA,gCAAQ;MAAAA,wBAAM;MAAAA,iBAAS;MAAAA,+DAAwC;MAAAA,gCAAQ;MAAAA,4BAAU;MAAAA,iBAAS;MAAAA,mBAAC;MAAAA,uBAAI;MAC/FA,gCAAQ;MAAAA,cAA8H;MAAAA,iBAAS;MAACA,wGAAqF;MAAAA,uBAAI;MACzOA,gCAAQ;MAAAA,6BAAW;MAAAA,iBAAS;MAACA,2LAAwK;MAAAA,uBAAI;MAC7MA,iBAAK;MACLA,uBAAS;MACXA,iBAAK;MAGLA,4BAAI;MAE4EA,+BAAa;MAAAA,iBAAI;MAE7FA,4BAAI;MACAA,gCAAa;MAAAA,+BAAgG;MAAAA,wCAAsB;MAAAA,iBAAI;MAE3IA,4BAAI;MACAA,4BAGmB;MACvBA,iBAAK;MAGTA,4BAAI;MAC0GA,oCAAkB;MAAAA,iBAAI;MAClIA,4BAAI;MACAA,uMAAoL;MAAAA,uBAAI;MACxLA,wDAAqC;MAAAA,uBAAI;MACzCA,uJAAoI;MAAAA,uBAAI;MACxIA,mGAAgF;MAAAA,uBAAI;MACpFA,wCAAqB;MAAAA,uBAAI;MACzBA,kCAAe;MAAAA,+BAAiC;MAAAA,sCAAoB;MAAAA,iBAAI;MAACA,uBAAI;MAC7EA,uHAAoG;MAAAA,+BAAgF;MAAQA,4BAAU;MAAAA,iBAAS;MAAIA,uBAAI;MAEvNA,0PAGJ;MAAAA,iBAAK;MACLA,4BAAI;MACAA,4BAGkB;MACtBA,iBAAK;MAGPA,4BAAI;MAC0DA,+BAAa;MAAAA,iBAAI;MAC3EA,4BAAI;MACFA,gMAA6K;MAAAA,uBAAI;MAAIA,wDAAsC;MAAAA,uBAAI;MAC/NA,gCAAQ;MAAAA,2DAAyC;MAAAA,iBAAS;MAE5DA,4BAAI;MACFA,4BAG6B;MAC/BA,iBAAK;MAGTA,4BAAI;MACiHA,sCAAoB;MAAAA,iBAAI;MAC3IA,uBAEK;MAEPA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;;;MAxXGA,iBAGJ;MAHIA,2OAGJ;MA0EUA,iBAA+D;MAA/DA,sGAA+D;MAC/DA,eAAwD;MAAxDA,+FAAwD;MAQ1DA,gBAAsE;MAAtEA,6GAAsE;MAqBpEA,gBAAmJ;MAAnJA,wLAAmJ;MAMnJA,gBAA8H;MAA9HA,qKAA8H","names":["SpringbootComponent","constructor","abrellave","cierrallave","abreDiamante","cierraDiamante","abreParentesis","cierraParentesis","abreCuadro","cierraCuadro","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\HP\\Desktop\\juanTafur\\jugutafur\\Support-FrontEnd-Angular-full\\src\\app\\core\\components\\framewoks\\springboot\\springboot.component.ts","C:\\Users\\HP\\Desktop\\juanTafur\\jugutafur\\Support-FrontEnd-Angular-full\\src\\app\\core\\components\\framewoks\\springboot\\springboot.component.html"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-springboot',\n  templateUrl: './springboot.component.html',\n  styleUrls: ['./springboot.component.scss']\n})\nexport class SpringbootComponent {\n\n  public abrellave: string;\n  public cierrallave: string;\n  public abreDiamante: string;\n  public cierraDiamante: string;\n  public abreParentesis: string;\n  public cierraParentesis: string;\n  public abreCuadro: string;\n  public cierraCuadro: string;\n\n  constructor() {\n    this.abrellave= \"{\";\n    this.cierrallave=\"}\";\n    this.abreDiamante= \"<\";\n    this.cierraDiamante= \">\";\n    this.abreParentesis= \"(\";\n    this.cierraParentesis= \")\";\n    this.abreCuadro= \"[\";\n    this.cierraCuadro= \"]\";\n  }\n}\n","<div class=\"container\">\n  <table class=\"table table-striped table-hover table-bordered align-middle\">\n      <thead>\n          <tr>\n              <th scope=\"col\">Referencia</th>\n              <th scope=\"col\">Descripcion</th>\n              <th scope=\"col\">Ejemplo</th>\n          </tr>\n      </thead>\n      <tbody>\n          <tr>\n              <td><strong>Hay varios tipos de Java</strong></td>\n              <td>\n                  Actualmente hay dos tipos de Java: <br><br>\n                  1. Java de Oracle es la version de pago <br><br>\n                  2. OpenJDK que es la version openJava que ofrece Oracle free de empresas independientes <br><br>\n                  3. <a href=\"https://docs.aws.amazon.com/es_es/corretto/latest/corretto-11-ug/what-is-corretto-11.html\"> Correto </a>: que es la version que ofrece Amazon free, dispone de una certificacion de Java SE y con soporte a larga plazo <br><br>\n                  4. <a href=\"https://www.redhat.com/es/topics/cloud-native-apps/what-is-a-Java-runtime-environment\">RedHat</a> que tambien tiene openJDK <br><br>\n                  Esto es debido a que oracle al ser de pago compañias independientes como <strong>Red hat con OpenJDK, Amazon Correto... entre otros </strong>ofrecen un Java que tecnicamente es igual al de oracle <br>\n              </td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td>Arquitectura</td>\n              <td>\n                  Es posible encontrar una aplicacion donde contenga todos los servicios necesarios para que funcione lo cual se llama <strong>servidor de aplicaciones</strong> y una aplicacion que este compuesta por varios servicios o microservicios a esto se le llama <strong>aplicacion autocontenida</strong>\n              </td>\n              <td>\n                  <img\n                  src=\"../../../../../assets/backend/JavaSpring/aplicacionAutocontenida.png\"\n                  alt=\"aplicacionAutocontenida\"\n                  title=\"aplicacionAutocontenida\">\n              </td>\n          </tr>\n\n          <tr>\n              <td>\n                  <a href=\"https://start.spring.io/\">Spring Initializr</a><br><br>\n                  Ahora para descargar Repositorios <strong><br><br><a href=\"https://mvnrepository.com/\">Maven Repository</a></strong>\n              </td>\n              <td>\n                  Es el framework de Java para crear aplicaciones autocontenidas <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.spring-application\">PARA VER LA DOCUMENTACIO</a> y <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html\">tambien en este espacio</a><br><br>\n                  Herramienta de construcción con Maven = gestionan las dependencias con archivos XML <br>\n                  Herramienta de construcción con Grandle = gestionan las dependencias con archivos Grovy <br>\n              </td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html\">aplicacion.properties</a><br><br><a href=\"https://www.javatpoint.com/spring-boot-properties\">Ver tambien</a></td>\n              <td>\n                  En este archivo podemos configurar diversos entornos para el desarrollo como un entrono de <strong>desarrollo, produccion, stage(prepoduccion....)</strong> <br><br>\n                  * spring.profiles.active = dev // esto quiere decir que el applicacion.properties \"principal\" va a buscar el application-dev.properties y por hay va a desplegar la aplicacion <br><br>\n                  * server.port=8090 // Podemos configurar el puerto por el cual se despliega el contenedor <br>\n                  <br><br>\n                  * server.servlet.context-path=/usuarios/uno //Podemos modificar el contex path <br>\n              </td>\n              <td></td>\n          </tr>\n          <tr>\n              <td>Project Structure <br><br>Orientado al dominio</td>\n              <td>\n                  * la capa de Dominio: Donde estan los DTO y los objetos de Dominio <br>\n                  * la capa de Repositorios: Donde estan definida las clases <br>\n                  * la capa de servicios: esta encargada de ser puente entre los los controladores de la Api y la persistencia <br>\n                  * la capa web: es donde estan definido los controllers <br>\n                  * la capa de la persistencia: es la encargada de interacturar con la BD <br><br><br>\n                  <img\n                  src=\"../../../../../assets/backend/JavaSpring/projectStructure.png\"\n                  alt=\"projectStructure\"\n                  title=\"projectStructure\"><br><br><br>\n                  En la capa del dominio encontramos los entities que son las clases que mapean las tablas en la BD y la variable debe estar: <br><br>\n                  * Con el dato Clases Envolventes {{abreParentesis}} Wrapper{{cierraParentesis}}\n                  * debe estar en camelCase(y como en el ejemplo el nombre de la columna cambio se debe utilizar el anotacion @Column)\n\n              </td>\n              <td>\n                  <img\n                  src=\"../../../../../assets/backend/JavaSpring/Structure.png\"\n                  alt=\"Structure\"\n                  title=\"Structure\">\n              </td>\n          </tr>\n\n          <tr>\n              <td>Structure</td>\n              <td colspan=\"2\">\n                  <img\n                  src=\"../../../../../assets/backend/JavaSpring/structure2.png\"\n                  alt=\"structure2\"\n                  title=\"structure2\">\n              </td>\n          </tr>\n\n          <tr>\n              <td>build.gradle</td>\n              <td>\n                  Es este archivo estaran  <br><br>\n                  * los implementation que son la injeccion de dependencias o librerias que nos permite maven Reposory agregar al proyecto <br><br>\n                  * podemos indicar la BD <strong>runtimeOnly</strong> por que solo la necesitamos en tiempo de ejecucion y entre ' ' agregamos la dependencia que nos brinda maven repository para la BD <br>\n              </td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td>Imagenes importantes curso JAVA spring <br>\n              <a href=\"https://github.com/lucasmoy-dev/Curso-de-Springboot-Hibernate/tree/main/src/main/java/com/cursojava/curso\">repositorio</a>\n              </td>\n              <td><img src=\"../../../../../assets/framework/javaSpring/MVC.png\" alt=\"MVC\"></td>\n              <td><img src=\"../../../../../assets/framework/javaSpring/estrutura.png\" alt=\"estrutura url\"></td>\n          </tr>\n\n          <tr>\n            <td colspan=\"3\" class=\"titulo\"><strong>Spring Data</strong></td>\n          </tr>\n\n          <tr>\n              <td>Que es??</td>\n              <td>\n                * Spring Data es un proyecto que usa JPA. <br>\n                * Spring Data contiene varios sub-proyectos <strong>(ej. Spring Data JPA, Spring Data JDBC, Spring Data MongDB, Spring Data Kasandra).</strong><br>\n                * Tiene Auditorias transparentes (guarda el registro de los querys).\n              </td>\n              <td>\n                <strong>implementation 'org.springframework.boot:spring-boot-starter-data-jpa'</strong>\n              </td>\n          </tr>\n\n          <tr>\n              <td>Conectar postgreSql</td>\n              <td>runtimeOnly 'org.postgresql:postgresql'</td>\n              <td><img src=\"../../../../../assets/framework/JavaSpringBoot/postgresSQL.PNG\" alt=\"postgresSQL url\"></td>\n          </tr>\n\n          <tr>\n            <td>Anotaciones</td>\n            <td>\n                <a href=\"https://www.baeldung.com/spring-postconstruct-predestroy\">Ver inf @PostConstruct y @PreDestroy</a> <br><br>\n                <strong>@PostConstruct</strong> //Spring llama a los métodos anotados con @PostConstruct solo una vez, justo después de la inicialización de las propiedades del bean . Tenga en cuenta que estos métodos se ejecutarán incluso si no hay nada que inicializar. <br>\n                El método anotado con <strong>@PostConstruct</strong> puede tener cualquier nivel de acceso pero no puede ser estático. Debe ser declarado despues de la injeccion de dependencias, solo es posible en <strong>Beans</strong> que soporten la injeccion de dependencias <br>\n                <br>\n                <strong>@PreDestroy</strong> //Un método anotado con @PreDestroy se ejecuta solo una vez, justo antes de que Spring elimine nuestro bean del contexto de la aplicación.\n                <br>\n                Al igual que con <strong>@PostConstruct</strong> , los métodos anotados con @PreDestroy pueden tener cualquier nivel de acceso, pero no pueden ser estáticos.\n                <br>El propósito de este método debe ser liberar recursos o realizar cualquier otra tarea de limpieza antes de que se destruya el bean, por ejemplo, cerrar una conexión a la base de datos. <br><br>\n                <strong>@SpringBootApplication</strong> //declara la class main por donde inicia el project <br>\n                <strong>@Service</strong>// es el puente enter el controller y el repository <br>\n                <strong>@RestController</strong>  //que la clase es un controller <br>\n                <strong>@Autowired // Inversion de control</strong> esto delega al framework como el encargado de crear e instanciar el objeto<br>\n                <strong>@RequestMapping{{abreParentesis}}\"/saludar\"{{cierraParentesis}}</strong>  //define el path principal del controller <br>\n                <strong>@GetMapping{{abreParentesis}}\"/hola\"{{cierraParentesis}}</strong> // define el path secundario del controlador <br><br>\n            </td>\n            <td></td>\n          </tr>\n\n          <tr>\n            <td>MapStruct</td>\n            <td>\n              <strong>@Mapper{{abreParentesis}}componentModel = \"spring\"{{cierraParentesis}}</strong> indicara que la interface va a mapear la table del dominio y la identidad <br><br>\n              <strong>@Mappings</strong> grupo de traductor de campos entre tablas <br><br>\n              <strong>@Mapping</strong> van cruzados y es de donde va a sacar el valor y donde se lo va a poner <br>\n              <strong>@InheritInverseConfiguration</strong> es para hacer de manera inversa la traduccion ya con esto ya no es necesario declaran nuevamente mappings<br>\n            </td>\n            <td></td>\n          </tr>\n\n          <tr>\n            <td>JPA</td>\n            <td>\n                Jpa es una especificación de Java o un standar, reglas que JAVA define para que cualquier framework que quiera interecatuar con una BD tiene que seguir, por medio de Anotaciones o Decoradores evitando hacer consultas de manera nativa o de manera SQL <br><br>\n                Un Framework  que implemente lo anterior se convierte en un ORM. <strong>Object Relation Mapping</strong><br><br>\n                como por ejemplo Frameworks ORM son: <br>\n                * Hibernate. <br>\n                * TopLink. <br>\n                * EclipseLink. <br>\n                * ObjectDB. <br><br>\n                <strong>@Entity</strong> para indicar que una clase java representa una tabla en la base de datos<br>\n                <strong>@Table</strong> recible el nombre de la tabla<br>\n                <strong>@Column</strong> se le pone a los atributos de la clase y se usa cuando los nombres entre la tabla y la entidad no coinciden<br>\n                <strong>@Column{{abreParentesis}}unique = true, nullable= false{{cierraParentesis}} //para los campos Id o campos que son unicos y no permite valores nulos</strong> <br>\n                <strong>@Id y @EmbededId</strong> representan la clave primaria, id para sencilla y embededId para compuesta<br>\n                <strong>@GeneratedValue</strong> genera valores automaticos para las llaves de las tablas<br>\n                <strong>@OneToMany @ManyToOne</strong> permite representar relaciones<br>\n                <u><a href=\"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.stored-procedures\">Procedimiento Almacenado</a></u><br><br>\n                <strong>@Query</strong>(nativeQuery = true) o con la anotación <strong>@Procedure</strong>.<br>\n                <strong>@Query {{abreParentesis}}value = \" SELECT * FROM categorias WHERE id_categoria = ? \", nativeQuery = true {{cierraParentesis}}.</strong> Desde la interfaz del crud podemos implementar querys de manera nativa de esta manera<br>\n                <strong>@Repository</strong> Con este le indicamos a JavaSpring que la clase va a interacturar con la BD por que en esta clase estaran definidos los metodos que operaran con los registros de la BD.<br>\n            </td>\n            <td></td>\n          </tr>\n\n\n          <tr>\n              <td>\n                <a href=\"https://platzi.com/clases/1996-java-spring/31508-query-methods/\">query-methods</a>\n              </td>\n              <td>\n                  ver mas info <a href=\"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods\">En el siguiente enlace</a>\n              </td>\n              <td>\n                  <img\n                  src=\"../../../../../assets/backend/JavaSpring/springData.png\"\n                  alt=\"springData\"\n                  title=\"springData\">\n              </td>\n          </tr>\n\n          <tr>\n            <td><a href=\"https://platzi.com/clases/1996-java-spring/31510-que-es-el-patron-data-mapper-y-que-resuelve/\">patron Data mapper</a></td>\n            <td>\n                Es la forma en la cual traducimos o convertimos una tabla en otra, esto con el fin de tener tablas definidas en termino de la persistencia con sus semejantes en termino de dominio <br><br>\n                Con esto descoplamos la BD de la Api <br>\n                mapeamos solo los campos que son necesarios y no todos los campo de las tablas ya que estos puede tener sentido de existencia en BD <br>\n                De esta manera la Api podria cambiar de BD y no tendria conflicto con el codigo <br><br>\n                Para usarlo debemos: <br><br>\n                1. Descargarlo <a href=\"https://mapstruct.org/\">En la pagina oficial</a> <br><br>\n                2. se debe instalar un plugin que autocompletara las structuras de mapstruc dentro de intellintIDea <a href=\"https://plugins.jetbrains.com/plugin/10036-mapstruct-support/versions\"><strong>Jet Brains</strong></a><br><br>\n\n                Otra forma de instalar plugins en IntelliJ es ir a files > Settings o Ctrl + Alt + S / en Mac es con command + , (coma)\n                    En el panel izquierdo se selecciona \"plugins\"\n                    y solo queda buscar “MapStruct Support” e instalarlo\n            </td>\n            <td>\n                <img\n                src=\"../../../../../assets/backend/JavaSpring/mapStruct.PNG\"\n                alt=\"mapStruct\"\n                title=\"mapStruct\">\n            </td>\n          </tr>\n\n          <tr>\n              <td><a href=\"https://www.youtube.com/watch?v=vTu2HQrXtyw\">Base de datos</a></td>\n              <td>\n                Cuando en nuestro codigo estamos configurando la base de datos podemos indicar que al ejecutar el codigo este el back quien crea la BD o si la BD ya existe que la actualice <br><br>De la manera como lo indica la imagen <br><br>\n                <strong>spring.jpa.hibernate.ddl-auto=update/none</strong>\n              </td>\n              <td>\n                <img\n                src=\"../../../../../assets/backend/JavaSpring/CreateObjectDBEntity.png\"\n                alt=\"CreateObjectDBEntity\"\n                title=\"CreateObjectDBEntity\">\n              </td>\n          </tr>\n\n          <tr>\n            <td><a href=\"https://platzi.com/clases/1996-java-spring/31505-crear-entity-cuando-su-clave-primaria-es-compuesta/\">llaves PK Compuestas</a></td>\n            <td>\n\n            </td>\n            <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n      </tbody>\n  </table>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}