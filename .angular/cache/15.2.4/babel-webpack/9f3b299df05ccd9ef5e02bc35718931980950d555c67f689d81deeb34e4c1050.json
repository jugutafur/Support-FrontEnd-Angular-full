{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class TestJavaComponent {\n  constructor() {}\n  ngOnInit() {}\n}\nTestJavaComponent.ɵfac = function TestJavaComponent_Factory(t) {\n  return new (t || TestJavaComponent)();\n};\nTestJavaComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TestJavaComponent,\n  selectors: [[\"app-test-java\"]],\n  decls: 137,\n  vars: 0,\n  consts: [[\"href\", \"https://www.vogella.com/tutorials/JUnit/article.html\"], [1, \"container\"], [1, \"table\", \"table-striped\", \"table-hover\", \"table-bordered\", \"align-middle\"], [\"scope\", \"col\"], [\"src\", \"../../../../../../assets/transversales/testing-java/procesoTesing.png\", \"alt\", \"procesoTesing\"], [\"src\", \"../../../../../../assets/transversales/testing-java/tiposTesting.png\", \"alt\", \"tiposTesting\"], [\"src\", \"../../../../../../assets/transversales/testing-java/partesTest.png\", \"alt\", \"partesTest\"], [\"src\", \"../../../../../../assets/transversales/testing-java/cicloTDD.png\", \"alt\", \"cicloTDD\"], [\"colspan\", \"3\"], [\"src\", \"../../../../../../assets/transversales/testing-java/que es requirimiento.png\", \"alt\", \"que es requirimiento\"], [\"src\", \"../../../../../../assets/transversales/testing-java/requirimiento.png\", \"alt\", \"los roles que participan en requirimiento\"], [\"src\", \"./../../../../../../assets/transversales/testing-java/ejemplos de requerimientos Funcionales .png\", \"alt\", \"ejemplos\"]],\n  template: function TestJavaComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"a\", 0);\n      i0.ɵɵtext(2, \" informacion util JUnit\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(3, \"div\", 1)(4, \"table\", 2)(5, \"thead\")(6, \"tr\")(7, \"th\", 3);\n      i0.ɵɵtext(8, \"Referencia\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"th\", 3);\n      i0.ɵɵtext(10, \"Descripcion\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"th\", 3);\n      i0.ɵɵtext(12, \"Ejemplo\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(13, \"tbody\")(14, \"tr\")(15, \"td\");\n      i0.ɵɵtext(16, \"test\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"td\")(18, \"strong\");\n      i0.ɵɵtext(19, \"Beneficios\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(20, \"br\");\n      i0.ɵɵtext(21, \" * comprobar los requerimientos y asi identificar errores de desarollo\");\n      i0.ɵɵelement(22, \"br\");\n      i0.ɵɵtext(23, \" * Documentacion/ejemplos, logramos que sea fiable nuestro desarrollo\");\n      i0.ɵɵelement(24, \"br\");\n      i0.ɵɵtext(25, \" * Ayuda en el dise\\u00F1o (TDD) Desarrollo guiado por pruebas de software, o Test-driven development \");\n      i0.ɵɵelement(26, \"br\");\n      i0.ɵɵtext(27, \" * confianza al desarollar y confianza para factorizar(evitando duda tecnica) \");\n      i0.ɵɵelement(28, \"br\");\n      i0.ɵɵtext(29, \" * Menores costos de mantenimiento y reducece errores en producion \");\n      i0.ɵɵelement(30, \"br\")(31, \"br\");\n      i0.ɵɵelementStart(32, \"strong\");\n      i0.ɵɵtext(33, \" Existen test autom\\u00E1ticos y manuales\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(34, \" los autom\\u00E1ticos van a requerir tiempo de desarrollo y algunas veces no ser\\u00E1n tan viables, pero de ser posible siempre trata de hacer test autom\\u00E1ticos ya que: \");\n      i0.ɵɵelement(35, \"br\");\n      i0.ɵɵtext(36, \" *Son m\\u00E1s r\\u00E1pidos, Son m\\u00E1s fiables ySon incrementales. \");\n      i0.ɵɵelement(37, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(38, \"td\");\n      i0.ɵɵelement(39, \"img\", 4);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(40, \"tr\")(41, \"td\")(42, \"strong\");\n      i0.ɵɵtext(43, \"Tipos de test\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(44, \"td\")(45, \"strong\");\n      i0.ɵɵtext(46, \" Unitario:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(47, \" realizan pruebas a una funci\\u00F3n o clase muy concreta de nuestro proyecto. \");\n      i0.ɵɵelement(48, \"br\");\n      i0.ɵɵelementStart(49, \"strong\");\n      i0.ɵɵtext(50, \"Integraci\\u00F3n:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(51, \" prueban c\\u00F3mo se conectan diferentes componentes de nuestro proyecto. \");\n      i0.ɵɵelement(52, \"br\");\n      i0.ɵɵelementStart(53, \"strong\");\n      i0.ɵɵtext(54, \"Funcionales:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(55, \" prueban una funcionalidad de nuestro proyecto, pueden involucrarse varias clases. \");\n      i0.ɵɵelement(56, \"br\");\n      i0.ɵɵelementStart(57, \"strong\");\n      i0.ɵɵtext(58, \"Inicio a fin:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(59, \" prueba todo un proceso del proyecto. \");\n      i0.ɵɵelement(60, \"br\");\n      i0.ɵɵelementStart(61, \"strong\");\n      i0.ɵɵtext(62, \"Estr\\u00E9s:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(63, \" \\u00FAtil para probar si nuestra aplicaci\\u00F3n puede soportar grandes cantidades de procesos y peticiones a la vez. \");\n      i0.ɵɵelement(64, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(65, \"td\");\n      i0.ɵɵelement(66, \"img\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(67, \"tr\")(68, \"td\")(69, \"strong\");\n      i0.ɵɵtext(70, \"Buenas praticas Test \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(71, \"td\");\n      i0.ɵɵtext(72, \" * La forma correcta de separar nuestras pruebas es realizar cada una en su propia funci\\u00F3n. \");\n      i0.ɵɵelement(73, \"br\");\n      i0.ɵɵtext(74, \" * adem\\u00E1s, el nombre de la funci\\u00F3n debe describir que estamos probando. principio de utilitario \");\n      i0.ɵɵelement(75, \"br\");\n      i0.ɵɵtext(76, \" * Nos podemos apoiyar en las Exepciones en java para describir mejor la traza error y razon para ser mostradada \");\n      i0.ɵɵelement(77, \"br\");\n      i0.ɵɵtext(78, \" * En el objecto Assert.assertEquals() de la liberia JUnit nos permite realizar diferentes comparaciones. valor: Esperado y actual \");\n      i0.ɵɵelement(79, \"br\");\n      i0.ɵɵtext(80, \" * Mockito core nos va a servir para simular clases mientras probamos, para no interferir en otras capas del negocio como en un sitema de pagos. tendra scope : test en pom.xml. ademas me permite que sean independientes a otras clases\");\n      i0.ɵɵelement(81, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(82, \"td\");\n      i0.ɵɵelement(83, \"img\", 6);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(84, \"tr\")(85, \"td\")(86, \"strong\");\n      i0.ɵɵtext(87, \"TDD: test Driven development o desarollo guiado por test\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(88, \"td\")(89, \"Strong\");\n      i0.ɵɵtext(90, \"consiste en crear primero los test antes que las clases permitiendonos ver si el dise\\u00F1o de una clase es el mas adecuado \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(91, \"br\");\n      i0.ɵɵelementStart(92, \"strong\");\n      i0.ɵɵtext(93, \"El ciclo del TDD: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(94, \"br\");\n      i0.ɵɵtext(95, \" * Red: escribe un test hastq ue falle. \");\n      i0.ɵɵelement(96, \"br\");\n      i0.ɵɵtext(97, \" * Green: escribe el codigo necesarrio para que el test pase. \");\n      i0.ɵɵelement(98, \"br\");\n      i0.ɵɵtext(99, \" * Refactor: mejora el codigo \");\n      i0.ɵɵelement(100, \"br\");\n      i0.ɵɵelementStart(101, \"Strong\");\n      i0.ɵɵtext(102, \"Reglas\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(103, \"br\");\n      i0.ɵɵtext(104, \" 1. solo escribiras codigo de tets hasta que falle. \");\n      i0.ɵɵelement(105, \"br\");\n      i0.ɵɵtext(106, \" 2. solo escribiras codigo de producion para pasar el test \");\n      i0.ɵɵelement(107, \"br\");\n      i0.ɵɵtext(108, \" 3. no escribiras mas codigo de producion del necesarrio \");\n      i0.ɵɵelement(109, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(110, \"td\");\n      i0.ɵɵelement(111, \"img\", 7);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(112, \"tr\")(113, \"td\", 8);\n      i0.ɵɵelement(114, \"img\", 9);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(115, \"tr\")(116, \"td\", 8);\n      i0.ɵɵelement(117, \"img\", 10);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(118, \"tr\")(119, \"td\", 8);\n      i0.ɵɵelement(120, \"img\", 11);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(121, \"tr\");\n      i0.ɵɵelement(122, \"td\")(123, \"td\")(124, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(125, \"tr\");\n      i0.ɵɵelement(126, \"td\")(127, \"td\")(128, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(129, \"tr\");\n      i0.ɵɵelement(130, \"td\")(131, \"td\")(132, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(133, \"tr\");\n      i0.ɵɵelement(134, \"td\")(135, \"td\")(136, \"td\");\n      i0.ɵɵelementEnd()()()();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";AAOA,OAAM,MAAOA,iBAAiB;EAE5BC,eAAgB;EAEhBC,QAAQ,IACR;;;mBALWF,iBAAiB;AAAA;;QAAjBA,iBAAiB;EAAAG;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCN9BC,2BAAK;MACkEA,uCAAsB;MAAAA,iBAAI;MAEjGA,8BAAuB;MAICA,0BAAU;MAAAA,iBAAK;MAC/BA,6BAAgB;MAAAA,4BAAW;MAAAA,iBAAK;MAChCA,8BAAgB;MAAAA,wBAAO;MAAAA,iBAAK;MAGhCA,8BAAO;MAECA,qBAAI;MAAAA,iBAAK;MACbA,2BAAI;MACMA,2BAAU;MAAAA,iBAAS;MAACA,sBAAM;MAClCA,uFACS;MAAAA,sBAAM;MACfA,sFACU;MAAAA,sBAAM;MAChBA,uHAC0B;MAAAA,sBAAM;MAChCA,+FACS;MAAAA,sBAAM;MACfA,oFACA;MAAAA,sBAAM;MACNA,+BAAQ;MAACA,0DAAmC;MAAAA,iBAAS;MAACA,+LAG9C;MAAAA,sBAAM;MACdA,uFAAsD;MAAAA,sBAAM;MAC9DA,iBAAK;MACLA,2BAAI;MACFA,0BAGE;MACJA,iBAAK;MAGPA,2BAAI;MACUA,8BAAa;MAAAA,iBAAS;MAClCA,2BAAI;MACOA,2BAAS;MAAAA,iBAAS;MAACA,gGACG;MAAAA,sBAAI;MAClCA,+BAAQ;MAAAA,kCAAY;MAAAA,iBAAS;MAAEA,4FACY;MAAAA,sBAAI;MAC/CA,+BAAQ;MAAAA,6BAAY;MAAAA,iBAAS;MAACA,oGACuC;MAAAA,sBAAI;MACzEA,+BAAQ;MAAAA,8BAAa;MAAAA,iBAAS;MAACA,uDAAqC;MAAAA,sBAAI;MACxEA,+BAAQ;MAAAA,6BAAO;MAAAA,iBAAS;MAACA,wIACM;MAAAA,sBAAI;MACtCA,iBAAK;MACLA,2BAAI;MAAAA,0BAAmG;MAAAA,iBAAK;MAG9GA,2BAAI;MACYA,sCAAqB;MAAAA,iBAAS;MAC1CA,2BAAI;MACAA,kHAA2F;MAAAA,sBAAI;MAC/FA,2HAA+F;MAAAA,sBAAI;MACnGA,kIAAgH;MAAAA,sBAAI;MACpHA,oJAAmI;MAAAA,sBAAI;MACvIA,0PACgH;MAAAA,sBAAI;MACxHA,iBAAK;MACLA,2BAAI;MAAAA,0BAA+F;MAAAA,iBAAK;MAG5GA,2BAAI;MACUA,yEAAwD;MAAAA,iBAAS;MAC7EA,2BAAI;MAAQA,8IAC4C;MAAAA,iBAAS;MAACA,sBAAI;MAE3DA,+BAAQ;MAAAA,mCAAkB;MAAAA,iBAAS;MAACA,sBAAI;MACxCA,yDAAuC;MAAAA,sBAAI;MAC3CA,+EAA6D;MAAAA,sBAAI;MACjEA,+CAA6B;MAAAA,uBAAI;MAEjCA,gCAAQ;MAAAA,wBAAM;MAAAA,iBAAS;MAACA,uBAAI;MAC5BA,sEAAmD;MAAAA,uBAAI;MACvDA,6EAA0D;MAAAA,uBAAI;MAC9DA,2EAAwD;MAAAA,uBAAI;MAC7DA,iBAAK;MACfA,4BAAI;MAAAA,2BAA2F;MAAAA,iBAAK;MAItGA,4BAAI;MAEAA,2BAGE;MACJA,iBAAK;MAGPA,4BAAI;MAEeA,4BAAiI;MAAAA,iBAAK;MAGzJA,4BAAI;MACcA,4BAA4H;MAAAA,iBAAK;MAEnJA,4BAAI;MACFA,uBAAS;MAGXA,iBAAK;MAELA,4BAAI;MACFA,uBAAS;MAGXA,iBAAK;MACLA,4BAAI;MACFA,uBAAS;MAGXA,iBAAK;MAELA,4BAAI;MACFA,uBAAS;MAGXA,iBAAK","names":["TestJavaComponent","constructor","ngOnInit","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\HP\\Desktop\\juanTafur\\jugutafur\\Support-FrontEnd-Angular-full\\src\\app\\core\\components\\testing\\components\\test-java\\test-java.component.ts","C:\\Users\\HP\\Desktop\\juanTafur\\jugutafur\\Support-FrontEnd-Angular-full\\src\\app\\core\\components\\testing\\components\\test-java\\test-java.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-test-java',\r\n  templateUrl: './test-java.component.html',\r\n  styleUrls: ['./test-java.component.scss']\r\n})\r\nexport class TestJavaComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","\r\n<div>\r\n    <a href=\"https://www.vogella.com/tutorials/JUnit/article.html\">    informacion util JUnit</a>\r\n</div>\r\n<div class=\"container\">\r\n  <table class=\"table table-striped table-hover table-bordered align-middle\">\r\n    <thead>\r\n      <tr>\r\n        <th scope=\"col\">Referencia</th>\r\n        <th scope=\"col\">Descripcion</th>\r\n        <th scope=\"col\">Ejemplo</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr>\r\n        <td>test</td>\r\n        <td>\r\n          <strong>Beneficios</strong> <br />\r\n          * comprobar los requerimientos y asi identificar errores de\r\n          desarollo<br />\r\n          * Documentacion/ejemplos, logramos que sea fiable nuestro\r\n          desarrollo<br />\r\n          * Ayuda en el diseño (TDD) Desarrollo guiado por pruebas de software,\r\n          o Test-driven development <br />\r\n          * confianza al desarollar y confianza para factorizar(evitando duda\r\n          tecnica) <br />\r\n          * Menores costos de mantenimiento y reducece errores en producion\r\n          <br /><br />\r\n          <strong> Existen test automáticos y manuales</strong> los automáticos\r\n          van a requerir tiempo de desarrollo y algunas veces no serán tan\r\n          viables,  pero de ser posible siempre trata de hacer test automáticos\r\n          ya que: <br />\r\n          *Son más rápidos, Son más fiables ySon incrementales. <br />\r\n        </td>\r\n        <td>\r\n          <img\r\n            src=\"../../../../../../assets/transversales/testing-java/procesoTesing.png\"\r\n            alt=\"procesoTesing\"\r\n          />\r\n        </td>\r\n      </tr>\r\n      \r\n      <tr>\r\n        <td><strong>Tipos de test</strong></td>\r\n        <td>\r\n          <strong> Unitario:</strong> realizan pruebas a una función o clase muy\r\n           concreta de nuestro proyecto. <br>\r\n           <strong>Integración:</strong>  prueban cómo se conectan\r\n          diferentes componentes de nuestro proyecto. <br> \r\n           <strong>Funcionales:</strong> prueban una\r\n          funcionalidad de nuestro proyecto, pueden involucrarse varias clases. <br>\r\n           <strong>Inicio a fin:</strong> prueba todo un proceso del proyecto. <br> \r\n           <strong>Estrés:</strong> útil para probar si nuestra aplicación puede soportar grandes cantidades de\r\n          procesos y peticiones a la vez. <br>\r\n        </td>\r\n        <td><img src=\"../../../../../../assets/transversales/testing-java/tiposTesting.png\" alt=\"tiposTesting\"></td>\r\n      </tr>\r\n\r\n      <tr>\r\n          <td><strong>Buenas praticas Test </strong></td>\r\n          <td>\r\n              * La forma correcta de separar nuestras pruebas es realizar cada una en su propia función. <br>\r\n              * además, el nombre de la función debe describir que estamos probando. principio de utilitario <br>\r\n              * Nos podemos apoiyar en las Exepciones en java para describir mejor la traza error y razon para ser mostradada <br>\r\n              * En el objecto Assert.assertEquals() de la liberia JUnit nos permite realizar diferentes comparaciones.  valor: Esperado y actual <br>\r\n              * Mockito core nos va a servir para simular clases mientras probamos, para no interferir en otras capas del negocio como\r\n               en un sitema de pagos. tendra scope : test en pom.xml. ademas me permite que sean independientes a otras clases<br> \r\n          </td>\r\n          <td><img src=\"../../../../../../assets/transversales/testing-java/partesTest.png\" alt=\"partesTest\"></td>\r\n      </tr>\r\n\r\n      <tr>\r\n        <td><strong>TDD: test Driven development o desarollo guiado por test</strong></td>\r\n        <td><Strong>consiste en crear primero los test antes que las clases permitiendonos ver \r\n                   si el diseño de una clase es el mas adecuado </Strong> <br>\r\n                  \r\n                   <strong>El ciclo del TDD: </strong> <br>\r\n                   * Red: escribe un test hastq ue falle. <br>\r\n                   * Green: escribe el codigo necesarrio para que el test pase. <br>\r\n                   * Refactor: mejora el codigo <br>\r\n\r\n                   <Strong>Reglas</Strong> <br>\r\n                   1. solo escribiras codigo de tets hasta que falle. <br>\r\n                   2. solo escribiras codigo de producion para pasar el test <br>\r\n                   3. no escribiras mas codigo de producion del necesarrio <br>\r\n                  </td>\r\n        <td><img src=\"../../../../../../assets/transversales/testing-java/cicloTDD.png\" alt=\"cicloTDD\"></td>\r\n      </tr>\r\n\r\n\r\n      <tr>\r\n        <td colspan=\"3\">\r\n          <img\r\n            src=\"../../../../../../assets/transversales/testing-java/que es requirimiento.png\"\r\n            alt=\"que es requirimiento\"\r\n          />\r\n        </td>\r\n      </tr>\r\n\r\n      <tr>\r\n        \r\n        <td colspan=\"3\"> <img src=\"../../../../../../assets/transversales/testing-java/requirimiento.png\" alt=\"los roles que participan en requirimiento\"></td>\r\n      </tr>\r\n\r\n      <tr>\r\n        <td colspan=\"3\"><img src=\"./../../../../../../assets/transversales/testing-java/ejemplos de requerimientos Funcionales .png\" alt=\"ejemplos\"></td>\r\n      </tr>\r\n      <tr>\r\n        <td></td>\r\n        <td></td>\r\n        <td></td>\r\n      </tr>\r\n\r\n      <tr>\r\n        <td></td>\r\n        <td></td>\r\n        <td></td>\r\n      </tr>\r\n      <tr>\r\n        <td></td>\r\n        <td></td>\r\n        <td></td>\r\n      </tr>\r\n\r\n      <tr>\r\n        <td></td>\r\n        <td></td>\r\n        <td></td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}