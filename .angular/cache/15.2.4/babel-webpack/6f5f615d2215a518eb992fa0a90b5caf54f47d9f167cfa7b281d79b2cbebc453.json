{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class SpringbootComponent {}\nSpringbootComponent.ɵfac = function SpringbootComponent_Factory(t) {\n  return new (t || SpringbootComponent)();\n};\nSpringbootComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SpringbootComponent,\n  selectors: [[\"app-springboot\"]],\n  decls: 567,\n  vars: 0,\n  consts: [[1, \"container\"], [1, \"table\", \"table-striped\", \"table-hover\", \"table-bordered\", \"align-middle\"], [\"scope\", \"col\"], [\"href\", \"https://docs.aws.amazon.com/es_es/corretto/latest/corretto-11-ug/what-is-corretto-11.html\"], [\"href\", \"https://www.redhat.com/es/topics/cloud-native-apps/what-is-a-Java-runtime-environment\"], [\"src\", \"../../../../../assets/backend/JavaSpring/aplicacionAutocontenida.png\", \"alt\", \"aplicacionAutocontenida\", \"title\", \"aplicacionAutocontenida\"], [\"href\", \"https://start.spring.io/\"], [\"href\", \"https://mvnrepository.com/\"], [\"href\", \"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.spring-application\"], [\"href\", \"https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html\"], [\"href\", \"https://www.baeldung.com/spring-postconstruct-predestroy\"], [\"href\", \"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.stored-procedures\"], [\"href\", \"https://www.javatpoint.com/spring-boot-properties\"], [\"src\", \"../../../../../assets/backend/JavaSpring/projectStructure.png\", \"alt\", \"projectStructure\", \"title\", \"projectStructure\"], [\"src\", \"../../../../../assets/backend/JavaSpring/Structure.png\", \"alt\", \"Structure\", \"title\", \"Structure\"], [\"colspan\", \"2\"], [\"src\", \"../../../../../assets/backend/JavaSpring/structure2.png\", \"alt\", \"structure2\", \"title\", \"structure2\"], [\"href\", \"https://platzi.com/clases/1996-java-spring/31508-query-methods/\"], [\"href\", \"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods\"], [\"src\", \"../../../../../assets/backend/JavaSpring/springData.png\", \"alt\", \"springData\", \"title\", \"springData\"], [\"href\", \"https://platzi.com/clases/1996-java-spring/31505-crear-entity-cuando-su-clave-primaria-es-compuesta/\"], [\"href\", \"https://platzi.com/clases/1996-java-spring/31510-que-es-el-patron-data-mapper-y-que-resuelve/\"], [\"href\", \"https://mapstruct.org/\"], [\"href\", \"https://plugins.jetbrains.com/plugin/10036-mapstruct-support/versions\"], [\"src\", \"../../../../../assets/backend/JavaSpring/mapStruct.PNG\", \"alt\", \"mapStruct\", \"title\", \"mapStruct\"], [\"href\", \"https://www.youtube.com/watch?v=vTu2HQrXtyw\"], [\"src\", \"../../../../../assets/backend/JavaSpring/CreateObjectDBEntity.png\", \"alt\", \"CreateObjectDBEntity\", \"title\", \"CreateObjectDBEntity\"], [\"href\", \"https://github.com/lucasmoy-dev/Curso-de-Springboot-Hibernate/tree/main/src/main/java/com/cursojava/curso\"], [\"src\", \"../../../../../assets/framework/javaSpring/MVC.png\", \"alt\", \"MVC\"], [\"src\", \"../../../../../assets/framework/javaSpring/estrutura.png\", \"alt\", \"estrutura url\"]],\n  template: function SpringbootComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"table\", 1)(2, \"thead\")(3, \"tr\")(4, \"th\", 2);\n      i0.ɵɵtext(5, \"Referencia\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"th\", 2);\n      i0.ɵɵtext(7, \"Descripcion\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"th\", 2);\n      i0.ɵɵtext(9, \"Ejemplo\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(10, \"tbody\");\n      i0.ɵɵelement(11, \"tr\");\n      i0.ɵɵelementStart(12, \"tr\")(13, \"td\")(14, \"strong\");\n      i0.ɵɵtext(15, \"Hay varios tipos de Java\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(16, \"td\");\n      i0.ɵɵtext(17, \" Actualmente hay dos tipos de Java: \");\n      i0.ɵɵelement(18, \"br\")(19, \"br\");\n      i0.ɵɵtext(20, \" 1. Java de Oracle es la version de pago \");\n      i0.ɵɵelement(21, \"br\")(22, \"br\");\n      i0.ɵɵtext(23, \" 2. OpenJDK que es la version openJava que ofrece Oracle free de empresas independientes \");\n      i0.ɵɵelement(24, \"br\")(25, \"br\");\n      i0.ɵɵtext(26, \" 3. \");\n      i0.ɵɵelementStart(27, \"a\", 3);\n      i0.ɵɵtext(28, \" Correto \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(29, \": que es la version que ofrece Amazon free, dispone de una certificacion de Java SE y con soporte a larga plazo \");\n      i0.ɵɵelement(30, \"br\")(31, \"br\");\n      i0.ɵɵtext(32, \" 4. \");\n      i0.ɵɵelementStart(33, \"a\", 4);\n      i0.ɵɵtext(34, \"RedHat\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(35, \" que tambien tiene openJDK \");\n      i0.ɵɵelement(36, \"br\")(37, \"br\");\n      i0.ɵɵtext(38, \" Esto es debido a que oracle al ser de pago compa\\u00F1ias independientes como \");\n      i0.ɵɵelementStart(39, \"strong\");\n      i0.ɵɵtext(40, \"Red hat con OpenJDK, Amazon Correto... entre otros \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(41, \"ofrecen un Java que tecnicamente es igual al de oracle \");\n      i0.ɵɵelement(42, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(43, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(44, \"tr\")(45, \"td\");\n      i0.ɵɵtext(46, \"Arquitectura\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(47, \"td\");\n      i0.ɵɵtext(48, \" Es posible encontrar una aplicacion donde contenga todos los servicios necesarios para que funcione lo cual se llama \");\n      i0.ɵɵelementStart(49, \"strong\");\n      i0.ɵɵtext(50, \"servidor de aplicaciones\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(51, \" y una aplicacion que este compuesta por varios servicios o microservicios a esto se le llama \");\n      i0.ɵɵelementStart(52, \"strong\");\n      i0.ɵɵtext(53, \"aplicacion autocontenida\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(54, \"td\");\n      i0.ɵɵelement(55, \"img\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(56, \"tr\")(57, \"td\");\n      i0.ɵɵtext(58, \"Contenedor de aplicaciones\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(59, \"td\");\n      i0.ɵɵtext(60, \" Java spring emplea como contenedor de aplicaciones o contenedor de servlet por defecto \");\n      i0.ɵɵelementStart(61, \"strong\");\n      i0.ɵɵtext(62, \"Tomcat Y Jetty O Undertow\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(63, \"br\")(64, \"br\");\n      i0.ɵɵelementStart(65, \"strong\");\n      i0.ɵɵtext(66, \"Docker y Kubernetes\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(67, \"br\");\n      i0.ɵɵtext(68, \" Para Despliege de Apps: Son plataformas para despliegue de aplicaciones de microservicios, \");\n      i0.ɵɵelementStart(69, \"strong\");\n      i0.ɵɵtext(70, \"Docker\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(71, \" crea un container en el cual se puede ejecutar la aplicacion y \");\n      i0.ɵɵelementStart(72, \"strong\");\n      i0.ɵɵtext(73, \"kubernete\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(74, \" toma el contenedor para desplegar la aplicacion con un escalamiento de forma horizontal \");\n      i0.ɵɵelementStart(75, \"strong\");\n      i0.ɵɵtext(76, \"informacion todama de go.ts\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(77, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(78, \"tr\")(79, \"td\")(80, \"a\", 6);\n      i0.ɵɵtext(81, \"Spring Initializr\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(82, \"br\")(83, \"br\");\n      i0.ɵɵtext(84, \" Ahora para descargar Repositorios \");\n      i0.ɵɵelementStart(85, \"strong\");\n      i0.ɵɵelement(86, \"br\")(87, \"br\");\n      i0.ɵɵelementStart(88, \"a\", 7);\n      i0.ɵɵtext(89, \"Maven Repository\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(90, \"td\");\n      i0.ɵɵtext(91, \" Es el framework de Java para crear aplicaciones autocontenidas \");\n      i0.ɵɵelementStart(92, \"a\", 8);\n      i0.ɵɵtext(93, \"PARA VER LA DOCUMENTACIO\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(94, \" y \");\n      i0.ɵɵelementStart(95, \"a\", 9);\n      i0.ɵɵtext(96, \"tambien en este espacio\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(97, \"br\")(98, \"br\");\n      i0.ɵɵtext(99, \" Herramienta de construcci\\u00F3n con Maven = gestionan las dependencias con archivos XML \");\n      i0.ɵɵelement(100, \"br\");\n      i0.ɵɵtext(101, \" Herramienta de construcci\\u00F3n con Grandle = gestionan las dependencias con archivos Grovy \");\n      i0.ɵɵelement(102, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(103, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(104, \"tr\")(105, \"td\");\n      i0.ɵɵtext(106, \"Anotaciones\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(107, \"td\")(108, \"a\", 10);\n      i0.ɵɵtext(109, \"Ver inf @PostConstruct y @PreDestroy\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(110, \"br\")(111, \"br\");\n      i0.ɵɵelementStart(112, \"strong\");\n      i0.ɵɵtext(113, \"@PostConstruct\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(114, \" //Spring llama a los m\\u00E9todos anotados con @PostConstruct solo una vez, justo despu\\u00E9s de la inicializaci\\u00F3n de las propiedades del bean . Tenga en cuenta que estos m\\u00E9todos se ejecutar\\u00E1n incluso si no hay nada que inicializar. \");\n      i0.ɵɵelement(115, \"br\");\n      i0.ɵɵtext(116, \" El m\\u00E9todo anotado con \");\n      i0.ɵɵelementStart(117, \"strong\");\n      i0.ɵɵtext(118, \"@PostConstruct\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(119, \" puede tener cualquier nivel de acceso pero no puede ser est\\u00E1tico. Debe ser declarado despues de la injeccion de dependencias, solo es posible en \");\n      i0.ɵɵelementStart(120, \"strong\");\n      i0.ɵɵtext(121, \"Beans\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(122, \" que soporten la injeccion de dependencias \");\n      i0.ɵɵelement(123, \"br\")(124, \"br\");\n      i0.ɵɵelementStart(125, \"strong\");\n      i0.ɵɵtext(126, \"@PreDestroy\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(127, \" //Un m\\u00E9todo anotado con @PreDestroy se ejecuta solo una vez, justo antes de que Spring elimine nuestro bean del contexto de la aplicaci\\u00F3n. \");\n      i0.ɵɵelement(128, \"br\");\n      i0.ɵɵtext(129, \" Al igual que con \");\n      i0.ɵɵelementStart(130, \"strong\");\n      i0.ɵɵtext(131, \"@PostConstruct\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(132, \" , los m\\u00E9todos anotados con @PreDestroy pueden tener cualquier nivel de acceso, pero no pueden ser est\\u00E1ticos. \");\n      i0.ɵɵelement(133, \"br\");\n      i0.ɵɵtext(134, \"El prop\\u00F3sito de este m\\u00E9todo debe ser liberar recursos o realizar cualquier otra tarea de limpieza antes de que se destruya el bean, por ejemplo, cerrar una conexi\\u00F3n a la base de datos. \");\n      i0.ɵɵelement(135, \"br\")(136, \"br\");\n      i0.ɵɵelementStart(137, \"strong\");\n      i0.ɵɵtext(138, \"@SpringBootApplication\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(139, \" //declara la class main por donde inicia el project \");\n      i0.ɵɵelement(140, \"br\");\n      i0.ɵɵelementStart(141, \"strong\");\n      i0.ɵɵtext(142, \"@RestController\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(143, \" //que la clase es un controller \");\n      i0.ɵɵelement(144, \"br\");\n      i0.ɵɵelementStart(145, \"strong\");\n      i0.ɵɵtext(146, \"@RequestMapping(\\\"/saludar\\\")\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(147, \" //define el path principal del controller \");\n      i0.ɵɵelement(148, \"br\");\n      i0.ɵɵelementStart(149, \"strong\");\n      i0.ɵɵtext(150, \"@GetMapping(\\\"/hola\\\")\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(151, \" // define el path secundario del controlador \");\n      i0.ɵɵelement(152, \"br\")(153, \"br\");\n      i0.ɵɵtext(154, \" JPA : Jpa es una especificaci\\u00F3n de Java, standar, para un framework ORM. \");\n      i0.ɵɵelementStart(155, \"strong\");\n      i0.ɵɵtext(156, \"Object Relation Mapping\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(157, \" Quiere decir que son ua aserie de reglas que Java define para que cualquier framework que quiera interactura con la BD de Java, tenga que seguir. \");\n      i0.ɵɵelement(158, \"br\")(159, \"br\");\n      i0.ɵɵelementStart(160, \"strong\");\n      i0.ɵɵtext(161, \"@Entity\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(162, \" para indicar que una clase java representa una tabla en la base de datos\");\n      i0.ɵɵelement(163, \"br\");\n      i0.ɵɵelementStart(164, \"strong\");\n      i0.ɵɵtext(165, \"@Table\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(166, \" recible el nombre de la tabla\");\n      i0.ɵɵelement(167, \"br\");\n      i0.ɵɵelementStart(168, \"strong\");\n      i0.ɵɵtext(169, \"@Column\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(170, \" se le pone a los atributos de la clase y se usa cuando los nombres entre la tabla y la entidad no coinciden \");\n      i0.ɵɵelementStart(171, \"strong\");\n      i0.ɵɵtext(172, \"@Column(unique = true, nullable= false) //para los campos Id o campos que son unicos y no permite valores nulos\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(173, \"br\");\n      i0.ɵɵelementStart(174, \"strong\");\n      i0.ɵɵtext(175, \"@Id y @EmbededId\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(176, \" representan la clave primaria, id para sencilla y embeded para compuesta\");\n      i0.ɵɵelement(177, \"br\");\n      i0.ɵɵelementStart(178, \"strong\");\n      i0.ɵɵtext(179, \"@GeneratedValue\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(180, \" genera valores automaticos para las llaves de las tablas\");\n      i0.ɵɵelement(181, \"br\");\n      i0.ɵɵelementStart(182, \"strong\");\n      i0.ɵɵtext(183, \"@OneToMany @ManyToOne\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(184, \" permite representar relaciones\");\n      i0.ɵɵelement(185, \"br\")(186, \"br\");\n      i0.ɵɵelementStart(187, \"u\")(188, \"a\", 11);\n      i0.ɵɵtext(189, \"Procedimiento Almacenado\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(190, \"br\")(191, \"br\");\n      i0.ɵɵelementStart(192, \"strong\");\n      i0.ɵɵtext(193, \"@Query\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(194, \"(nativeQuery = true) o con la anotaci\\u00F3n \");\n      i0.ɵɵelementStart(195, \"strong\");\n      i0.ɵɵtext(196, \"@Procedure\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(197, \".\");\n      i0.ɵɵelement(198, \"br\");\n      i0.ɵɵelementStart(199, \"strong\");\n      i0.ɵɵtext(200, \"@Query (value = \\\" SELECT * FROM categorias WHERE id_categoria = ? \\\", nativeQuery = true ).\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(201, \" Desde la interfaz del crud podemos implementar querys de manera nativa de esta manera\");\n      i0.ɵɵelement(202, \"br\");\n      i0.ɵɵelementStart(203, \"strong\");\n      i0.ɵɵtext(204, \"@Repository\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(205, \" Con este le indicamos a JavaSpring que la clase va a interacturar con la BD por que en esta clase estaran definidos los metodos que operaran con los registros de la BD.\");\n      i0.ɵɵelement(206, \"br\")(207, \"br\");\n      i0.ɵɵtext(208, \" MapStruct \");\n      i0.ɵɵelement(209, \"br\")(210, \"br\");\n      i0.ɵɵtext(211, \" @Mapper(componentModel = \\\"spring\\\") indicara que la interface va a mapear la table del dominio y la identidad \");\n      i0.ɵɵelement(212, \"br\");\n      i0.ɵɵtext(213, \" @Mappings grupo de traductor de campos entre tablas \");\n      i0.ɵɵelement(214, \"br\")(215, \"br\");\n      i0.ɵɵtext(216, \" @Mapping van cruzados y es de donde va a sacar el valor y donde se lo va a poner \");\n      i0.ɵɵelement(217, \"br\");\n      i0.ɵɵtext(218, \" @InheritInverseConfiguration es para hacer de manera inversa la traduccion ya con esto ya no es necesario declaran nuevamente mappings\");\n      i0.ɵɵelement(219, \"br\");\n      i0.ɵɵtext(220, \" @Autowired \");\n      i0.ɵɵelementStart(221, \"strong\");\n      i0.ɵɵtext(222, \"Inversion de control\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(223, \" esto es que el framework es el encargado de crear o instanciar objetos \");\n      i0.ɵɵelement(224, \"br\");\n      i0.ɵɵtext(225, \" @Service es el puente enter el controller y el repository \");\n      i0.ɵɵelement(226, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(227, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(228, \"tr\")(229, \"td\")(230, \"a\", 9);\n      i0.ɵɵtext(231, \"aplicacion.properties\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(232, \"br\")(233, \"br\");\n      i0.ɵɵelementStart(234, \"a\", 12);\n      i0.ɵɵtext(235, \"Ver tambien\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(236, \"td\");\n      i0.ɵɵtext(237, \" En este archivo podemos configurar diversos entornos para el desarrollo como un entrono de \");\n      i0.ɵɵelementStart(238, \"strong\");\n      i0.ɵɵtext(239, \"desarrollo, produccion, stage(prepoduccion....)\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(240, \"br\")(241, \"br\");\n      i0.ɵɵtext(242, \" * spring.profiles.active = dev // esto quiere decir que el applicacion.properties \\\"principal\\\" va a buscar el application-dev.properties y por hay va a desplegar la aplicacion \");\n      i0.ɵɵelement(243, \"br\")(244, \"br\");\n      i0.ɵɵtext(245, \" * server.port=8090 // Podemos configurar el puerto por el cual se despliega el contenedor \");\n      i0.ɵɵelement(246, \"br\")(247, \"br\")(248, \"br\");\n      i0.ɵɵtext(249, \" * server.servlet.context-path=/usuarios/uno //Podemos modificar el contex path \");\n      i0.ɵɵelement(250, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(251, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(252, \"tr\")(253, \"td\");\n      i0.ɵɵtext(254, \"Project Structure \");\n      i0.ɵɵelement(255, \"br\")(256, \"br\");\n      i0.ɵɵtext(257, \"Orientado al dominio\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(258, \"td\");\n      i0.ɵɵtext(259, \" * la capa de Dominio: Donde estan los DTO y los objetos de Dominio \");\n      i0.ɵɵelement(260, \"br\");\n      i0.ɵɵtext(261, \" * la capa de Repositorios: Donde estan definida las clases \");\n      i0.ɵɵelement(262, \"br\");\n      i0.ɵɵtext(263, \" * la capa de servicios: esta encargada de ser puente entre los los controladores de la Api y la persistencia \");\n      i0.ɵɵelement(264, \"br\");\n      i0.ɵɵtext(265, \" * la capa web: es donde estan definido los controllers \");\n      i0.ɵɵelement(266, \"br\");\n      i0.ɵɵtext(267, \" * la capa de la persistencia: es la encargada de interacturar con la BD \");\n      i0.ɵɵelement(268, \"br\")(269, \"br\")(270, \"br\")(271, \"img\", 13);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(272, \"td\");\n      i0.ɵɵelement(273, \"img\", 14);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(274, \"tr\")(275, \"td\");\n      i0.ɵɵtext(276, \"Structure\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(277, \"td\", 15);\n      i0.ɵɵelement(278, \"img\", 16);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(279, \"tr\")(280, \"td\");\n      i0.ɵɵtext(281, \"JPA\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(282, \"td\");\n      i0.ɵɵtext(283, \" Es un framework ORM. Es una especificaci\\u00F3n de Java, standar o serie de reglas que JAVA define para que cualquier framework que quiera interecatuar con una BD tiene que seguir, por medio de Anotaciones o Decoradores conecta la BD y evitamos hacer consultas de manera nativa o de manera SQL \");\n      i0.ɵɵelement(284, \"br\")(285, \"br\");\n      i0.ɵɵelementStart(286, \"strong\");\n      i0.ɵɵtext(287, \"@Entity\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(288, \" para indicar que una clase java representa una tabla en la base de datos\");\n      i0.ɵɵelement(289, \"br\");\n      i0.ɵɵelementStart(290, \"strong\");\n      i0.ɵɵtext(291, \"@Table\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(292, \" recible el nombre de la tabla\");\n      i0.ɵɵelement(293, \"br\");\n      i0.ɵɵelementStart(294, \"strong\");\n      i0.ɵɵtext(295, \"@Column\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(296, \" se le pone a los atributos de la clase y se usa cuando los nombres entre la tabla y la entidad no coinciden\");\n      i0.ɵɵelement(297, \"br\");\n      i0.ɵɵelementStart(298, \"strong\");\n      i0.ɵɵtext(299, \"@Id y @EmbededId\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(300, \" representan la clave primaria, id para sencilla y embeded para compuesta\");\n      i0.ɵɵelement(301, \"br\");\n      i0.ɵɵelementStart(302, \"strong\");\n      i0.ɵɵtext(303, \"@GeneratedValue\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(304, \" genera valores automaticos para las llaves de las tablas\");\n      i0.ɵɵelement(305, \"br\");\n      i0.ɵɵelementStart(306, \"strong\");\n      i0.ɵɵtext(307, \"@OneToMany @ManyToOne\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(308, \" permite representar relaciones\");\n      i0.ɵɵelement(309, \"br\");\n      i0.ɵɵelementStart(310, \"u\")(311, \"a\", 11);\n      i0.ɵɵtext(312, \"Procedimiento Almacenado\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(313, \"br\")(314, \"br\");\n      i0.ɵɵelementStart(315, \"strong\");\n      i0.ɵɵtext(316, \"@Query\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(317, \"(nativeQuery = true) o con la anotaci\\u00F3n \");\n      i0.ɵɵelementStart(318, \"strong\");\n      i0.ɵɵtext(319, \"@Procedure\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(320, \".\");\n      i0.ɵɵelement(321, \"br\");\n      i0.ɵɵelementStart(322, \"strong\");\n      i0.ɵɵtext(323, \"@Query (value = \\\" SELECT * FROM categorias WHERE id_categoria = ? \\\", nativeQuery = true ).\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(324, \" Desde la interfaz del crud podemos implementar querys de manera nativa de esta manera\");\n      i0.ɵɵelement(325, \"br\");\n      i0.ɵɵelementStart(326, \"strong\");\n      i0.ɵɵtext(327, \"@Repository\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(328, \" Con este le indicamos a JavaSpring que la clase va a interacturar con la BD por que en esta clase estaran definidos los metodos que operaran con los registros de la BD.\");\n      i0.ɵɵelement(329, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(330, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(331, \"tr\")(332, \"td\");\n      i0.ɵɵelement(333, \"a\", 17);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(334, \"td\");\n      i0.ɵɵtext(335, \" ver mas info \");\n      i0.ɵɵelementStart(336, \"a\", 18);\n      i0.ɵɵtext(337, \"En el siguiente enlace\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(338, \"td\");\n      i0.ɵɵelement(339, \"img\", 19);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(340, \"tr\")(341, \"td\");\n      i0.ɵɵtext(342, \"build.gradle\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(343, \"td\");\n      i0.ɵɵtext(344, \" Es este archivo estaran \");\n      i0.ɵɵelement(345, \"br\")(346, \"br\");\n      i0.ɵɵtext(347, \" * los implementation que son la injeccion de dependencias o librerias que nos permite maven Reposory agregar al proyecto \");\n      i0.ɵɵelement(348, \"br\")(349, \"br\");\n      i0.ɵɵtext(350, \" * podemos indicar la BD \");\n      i0.ɵɵelementStart(351, \"strong\");\n      i0.ɵɵtext(352, \"runtimeOnly\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(353, \" por que solo la necesitamos en tiempo de ejecucion y entre ' ' agregamos la dependencia que nos brinda maven repository para la BD \");\n      i0.ɵɵelement(354, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(355, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(356, \"tr\")(357, \"td\")(358, \"a\", 20);\n      i0.ɵɵtext(359, \"llaves PK Compuestas\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(360, \"td\")(361, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(362, \"tr\")(363, \"td\")(364, \"a\", 21);\n      i0.ɵɵtext(365, \"patron Data mapper\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(366, \"td\");\n      i0.ɵɵtext(367, \" Es la forma en la cual traducimos o convertimos una tabla en otra, esto con el fin de tener tablas definidas en termino de la persistencia con sus semejantes en termino de dominio \");\n      i0.ɵɵelement(368, \"br\")(369, \"br\");\n      i0.ɵɵtext(370, \" Con esto descoplamos la BD de la Api \");\n      i0.ɵɵelement(371, \"br\");\n      i0.ɵɵtext(372, \" mapeamos solo los campos que son necesarios y no todos los campo de las tablas ya que estos puede tener sentido de existencia en BD \");\n      i0.ɵɵelement(373, \"br\");\n      i0.ɵɵtext(374, \" De esta manera la Api podria cambiar de BD y no tendria conflicto con el codigo \");\n      i0.ɵɵelement(375, \"br\")(376, \"br\");\n      i0.ɵɵtext(377, \" Para usarlo debemos: \");\n      i0.ɵɵelement(378, \"br\")(379, \"br\");\n      i0.ɵɵtext(380, \" 1. Descargarlo \");\n      i0.ɵɵelementStart(381, \"a\", 22);\n      i0.ɵɵtext(382, \"En la pagina oficial\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(383, \"br\")(384, \"br\");\n      i0.ɵɵtext(385, \" 2. se debe instalar un plugin que autocompletara las structuras de mapstruc dentro de intellintIDea \");\n      i0.ɵɵelementStart(386, \"a\", 23)(387, \"strong\");\n      i0.ɵɵtext(388, \"Jet Brains\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(389, \"br\")(390, \"br\");\n      i0.ɵɵtext(391, \" Otra forma de instalar plugins en IntelliJ es ir a files > Settings o Ctrl + Alt + S / en Mac es con command + , (coma) En el panel izquierdo se selecciona \\\"plugins\\\" y solo queda buscar \\u201CMapStruct Support\\u201D e instalarlo \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(392, \"td\");\n      i0.ɵɵelement(393, \"img\", 24);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(394, \"tr\");\n      i0.ɵɵelement(395, \"td\")(396, \"td\")(397, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(398, \"tr\")(399, \"td\")(400, \"a\", 25);\n      i0.ɵɵtext(401, \"Base de datos\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(402, \"td\");\n      i0.ɵɵtext(403, \" Cuando en nuestro codigo estamos configurando la base de datos podemos indicar que al ejecutar el codigo este el back quien crea la BD o si la BD ya existe que la actualice \");\n      i0.ɵɵelement(404, \"br\")(405, \"br\");\n      i0.ɵɵtext(406, \"De la manera como lo indica la imagen \");\n      i0.ɵɵelement(407, \"br\")(408, \"br\");\n      i0.ɵɵelementStart(409, \"strong\");\n      i0.ɵɵtext(410, \"spring.jpa.hibernate.ddl-auto=update/none\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(411, \"td\");\n      i0.ɵɵelement(412, \"img\", 26);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(413, \"tr\")(414, \"td\");\n      i0.ɵɵtext(415, \"Imagenes importantes curso JAVA spring \");\n      i0.ɵɵelement(416, \"br\");\n      i0.ɵɵelementStart(417, \"a\", 27);\n      i0.ɵɵtext(418, \"repositorio\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(419, \"td\");\n      i0.ɵɵelement(420, \"img\", 28);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(421, \"td\");\n      i0.ɵɵelement(422, \"img\", 29);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(423, \"tr\");\n      i0.ɵɵelement(424, \"td\")(425, \"td\")(426, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(427, \"tr\");\n      i0.ɵɵelement(428, \"td\")(429, \"td\")(430, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(431, \"tr\");\n      i0.ɵɵelement(432, \"td\")(433, \"td\")(434, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(435, \"tr\");\n      i0.ɵɵelement(436, \"td\")(437, \"td\")(438, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(439, \"tr\");\n      i0.ɵɵelement(440, \"td\")(441, \"td\")(442, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(443, \"tr\");\n      i0.ɵɵelement(444, \"td\")(445, \"td\")(446, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(447, \"tr\");\n      i0.ɵɵelement(448, \"td\")(449, \"td\")(450, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(451, \"tr\");\n      i0.ɵɵelement(452, \"td\")(453, \"td\")(454, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(455, \"tr\");\n      i0.ɵɵelement(456, \"td\")(457, \"td\")(458, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(459, \"tr\");\n      i0.ɵɵelement(460, \"td\")(461, \"td\")(462, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(463, \"tr\");\n      i0.ɵɵelement(464, \"td\")(465, \"td\")(466, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(467, \"tr\");\n      i0.ɵɵelement(468, \"td\")(469, \"td\")(470, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(471, \"tr\");\n      i0.ɵɵelement(472, \"td\")(473, \"td\")(474, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(475, \"tr\");\n      i0.ɵɵelement(476, \"td\")(477, \"td\")(478, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(479, \"tr\");\n      i0.ɵɵelement(480, \"td\")(481, \"td\")(482, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(483, \"tr\");\n      i0.ɵɵelement(484, \"td\")(485, \"td\")(486, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(487, \"tr\");\n      i0.ɵɵelement(488, \"td\")(489, \"td\")(490, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(491, \"tr\");\n      i0.ɵɵelement(492, \"td\")(493, \"td\")(494, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(495, \"tr\");\n      i0.ɵɵelement(496, \"td\")(497, \"td\")(498, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(499, \"tr\");\n      i0.ɵɵelement(500, \"td\")(501, \"td\")(502, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(503, \"tr\");\n      i0.ɵɵelement(504, \"td\")(505, \"td\")(506, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(507, \"tr\");\n      i0.ɵɵelement(508, \"td\")(509, \"td\")(510, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(511, \"tr\");\n      i0.ɵɵelement(512, \"td\")(513, \"td\")(514, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(515, \"tr\");\n      i0.ɵɵelement(516, \"td\")(517, \"td\")(518, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(519, \"tr\");\n      i0.ɵɵelement(520, \"td\")(521, \"td\")(522, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(523, \"tr\");\n      i0.ɵɵelement(524, \"td\")(525, \"td\")(526, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(527, \"tr\");\n      i0.ɵɵelement(528, \"td\")(529, \"td\")(530, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(531, \"tr\");\n      i0.ɵɵelement(532, \"td\")(533, \"td\")(534, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(535, \"tr\");\n      i0.ɵɵelement(536, \"td\")(537, \"td\")(538, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(539, \"tr\");\n      i0.ɵɵelement(540, \"td\")(541, \"td\")(542, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(543, \"tr\");\n      i0.ɵɵelement(544, \"td\")(545, \"td\")(546, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(547, \"tr\");\n      i0.ɵɵelement(548, \"td\")(549, \"td\")(550, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(551, \"tr\");\n      i0.ɵɵelement(552, \"td\")(553, \"td\")(554, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(555, \"tr\");\n      i0.ɵɵelement(556, \"td\")(557, \"td\")(558, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(559, \"tr\");\n      i0.ɵɵelement(560, \"td\")(561, \"td\")(562, \"td\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(563, \"tr\");\n      i0.ɵɵelement(564, \"td\")(565, \"td\")(566, \"td\");\n      i0.ɵɵelementEnd()()()();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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I;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK;MAELA,4BAAI;MACAA,uBAAS;MAGbA,iBAAK","names":["SpringbootComponent","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\HP\\Desktop\\juanTafur\\jugutafur\\Support-FrontEnd-Angular-full\\src\\app\\core\\components\\framewoks\\springboot\\springboot.component.ts","C:\\Users\\HP\\Desktop\\juanTafur\\jugutafur\\Support-FrontEnd-Angular-full\\src\\app\\core\\components\\framewoks\\springboot\\springboot.component.html"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-springboot',\n  templateUrl: './springboot.component.html',\n  styleUrls: ['./springboot.component.scss']\n})\nexport class SpringbootComponent {\n\n}\n","<div class=\"container\">\n  <table class=\"table table-striped table-hover table-bordered align-middle\">\n      <thead>\n          <tr>\n              <th scope=\"col\">Referencia</th>\n              <th scope=\"col\">Descripcion</th>\n              <th scope=\"col\">Ejemplo</th>\n          </tr>\n      </thead>\n      <tbody>\n          <tr>\n          <tr>\n              <td><strong>Hay varios tipos de Java</strong></td>\n              <td>\n                  Actualmente hay dos tipos de Java: <br><br>\n                  1. Java de Oracle es la version de pago <br><br>\n                  2. OpenJDK que es la version openJava que ofrece Oracle free de empresas independientes <br><br>\n                  3. <a href=\"https://docs.aws.amazon.com/es_es/corretto/latest/corretto-11-ug/what-is-corretto-11.html\"> Correto </a>: que es la version que ofrece Amazon free, dispone de una certificacion de Java SE y con soporte a larga plazo <br><br>\n                  4. <a href=\"https://www.redhat.com/es/topics/cloud-native-apps/what-is-a-Java-runtime-environment\">RedHat</a> que tambien tiene openJDK <br><br>\n                  Esto es debido a que oracle al ser de pago compañias independientes como <strong>Red hat con OpenJDK, Amazon Correto... entre otros </strong>ofrecen un Java que tecnicamente es igual al de oracle <br>\n              </td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td>Arquitectura</td>\n              <td>\n                  Es posible encontrar una aplicacion donde contenga todos los servicios necesarios para que funcione lo cual se llama <strong>servidor de aplicaciones</strong> y una aplicacion que este compuesta por varios servicios o microservicios a esto se le llama <strong>aplicacion autocontenida</strong>\n              </td>\n              <td>\n                  <img\n                  src=\"../../../../../assets/backend/JavaSpring/aplicacionAutocontenida.png\"\n                  alt=\"aplicacionAutocontenida\"\n                  title=\"aplicacionAutocontenida\">\n              </td>\n          </tr>\n          <tr>\n              <td>Contenedor de aplicaciones</td>\n              <td>\n                  Java spring emplea como contenedor de aplicaciones o contenedor de servlet por defecto <strong>Tomcat Y Jetty O Undertow</strong><br><br>\n                  <strong>Docker y Kubernetes</strong><br>\n                  Para Despliege de Apps: Son plataformas para despliegue de aplicaciones de microservicios, <strong>Docker</strong> crea un container en el cual se puede ejecutar la aplicacion y <strong>kubernete</strong> toma el contenedor para desplegar la aplicacion con un escalamiento de forma horizontal <strong>informacion todama de go.ts</strong>\n              </td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td>\n                  <a href=\"https://start.spring.io/\">Spring Initializr</a><br><br>\n                  Ahora para descargar Repositorios <strong><br><br><a href=\"https://mvnrepository.com/\">Maven Repository</a></strong>\n              </td>\n              <td>\n                  Es el framework de Java para crear aplicaciones autocontenidas <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.spring-application\">PARA VER LA DOCUMENTACIO</a> y <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html\">tambien en este espacio</a><br><br>\n                  Herramienta de construcción con Maven = gestionan las dependencias con archivos XML <br>\n                  Herramienta de construcción con Grandle = gestionan las dependencias con archivos Grovy <br>\n              </td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td>Anotaciones</td>\n              <td>\n                  <a href=\"https://www.baeldung.com/spring-postconstruct-predestroy\">Ver inf @PostConstruct y @PreDestroy</a> <br><br>\n                  <strong>@PostConstruct</strong> //Spring llama a los métodos anotados con @PostConstruct solo una vez, justo después de la inicialización de las propiedades del bean . Tenga en cuenta que estos métodos se ejecutarán incluso si no hay nada que inicializar. <br>\n                  El método anotado con <strong>@PostConstruct</strong> puede tener cualquier nivel de acceso pero no puede ser estático. Debe ser declarado despues de la injeccion de dependencias, solo es posible en <strong>Beans</strong> que soporten la injeccion de dependencias <br>\n                  <br>\n                  <strong>@PreDestroy</strong> //Un método anotado con @PreDestroy se ejecuta solo una vez, justo antes de que Spring elimine nuestro bean del contexto de la aplicación.\n                  <br>\n                  Al igual que con <strong>@PostConstruct</strong> , los métodos anotados con @PreDestroy pueden tener cualquier nivel de acceso, pero no pueden ser estáticos.\n                  <br>El propósito de este método debe ser liberar recursos o realizar cualquier otra tarea de limpieza antes de que se destruya el bean, por ejemplo, cerrar una conexión a la base de datos. <br><br>\n                  <strong>@SpringBootApplication</strong> //declara la class main por donde inicia el project <br>\n                  <strong>@RestController</strong>  //que la clase es un controller <br>\n                  <strong>@RequestMapping(\"/saludar\")</strong>  //define el path principal del controller <br>\n                  <strong>@GetMapping(\"/hola\")</strong> // define el path secundario del controlador <br><br>\n\n                  JPA : Jpa es una especificación de Java, standar, para un framework ORM. <strong>Object Relation Mapping</strong> Quiere decir que son ua aserie de reglas que Java define para que cualquier framework que quiera interactura con la BD de Java, tenga que seguir.\n                  <br><br>\n                  <strong>@Entity</strong> para indicar que una clase java representa una tabla en la base de datos<br>\n                  <strong>@Table</strong> recible el nombre de la tabla<br>\n                  <strong>@Column</strong> se le pone a los atributos de la clase y se usa cuando los nombres entre la tabla y la entidad no coinciden <strong>@Column(unique = true, nullable= false) //para los campos Id o campos que son unicos y no permite valores nulos</strong> <br>\n                  <strong>@Id y @EmbededId</strong> representan la clave primaria, id para sencilla y embeded para compuesta<br>\n                  <strong>@GeneratedValue</strong> genera valores automaticos para las llaves de las tablas<br>\n                  <strong>@OneToMany @ManyToOne</strong> permite representar relaciones<br><br>\n                  <u><a href=\"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.stored-procedures\">Procedimiento Almacenado</a></u><br><br>\n                  <strong>@Query</strong>(nativeQuery = true) o con la anotación <strong>@Procedure</strong>.<br>\n                  <strong>@Query (value = \" SELECT * FROM categorias WHERE id_categoria = ? \", nativeQuery = true ).</strong> Desde la interfaz del crud podemos implementar querys de manera nativa de esta manera<br>\n                  <strong>@Repository</strong> Con este le indicamos a JavaSpring que la clase va a interacturar con la BD por que en esta clase estaran definidos los metodos que operaran con los registros de la BD.<br><br>\n                  MapStruct <br><br>\n                  @Mapper(componentModel = \"spring\") indicara que la interface va a mapear la table del dominio y la identidad <br>\n                  @Mappings grupo de traductor de campos entre tablas <br><br>\n                  @Mapping van cruzados y es de donde va a sacar el valor y donde se lo va a poner <br>\n                  @InheritInverseConfiguration es para hacer de manera inversa la traduccion ya con esto ya no es necesario declaran nuevamente mappings<br>\n                  @Autowired <strong>Inversion de control</strong> esto es que el framework es el encargado de crear o instanciar objetos <br>\n                  @Service es el puente enter el controller y el repository <br>\n\n              </td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html\">aplicacion.properties</a><br><br><a href=\"https://www.javatpoint.com/spring-boot-properties\">Ver tambien</a></td>\n              <td>\n                  En este archivo podemos configurar diversos entornos para el desarrollo como un entrono de <strong>desarrollo, produccion, stage(prepoduccion....)</strong> <br><br>\n                  * spring.profiles.active = dev // esto quiere decir que el applicacion.properties \"principal\" va a buscar el application-dev.properties y por hay va a desplegar la aplicacion <br><br>\n                  * server.port=8090 // Podemos configurar el puerto por el cual se despliega el contenedor <br>\n                  <br><br>\n                  * server.servlet.context-path=/usuarios/uno //Podemos modificar el contex path <br>\n              </td>\n              <td></td>\n          </tr>\n          <tr>\n              <td>Project Structure <br><br>Orientado al dominio</td>\n              <td>\n                  * la capa de Dominio: Donde estan los DTO y los objetos de Dominio <br>\n                  * la capa de Repositorios: Donde estan definida las clases <br>\n                  * la capa de servicios: esta encargada de ser puente entre los los controladores de la Api y la persistencia <br>\n                  * la capa web: es donde estan definido los controllers <br>\n                  * la capa de la persistencia: es la encargada de interacturar con la BD <br><br><br>\n                  <img\n                  src=\"../../../../../assets/backend/JavaSpring/projectStructure.png\"\n                  alt=\"projectStructure\"\n                  title=\"projectStructure\">\n              </td>\n              <td>\n                  <img\n                  src=\"../../../../../assets/backend/JavaSpring/Structure.png\"\n                  alt=\"Structure\"\n                  title=\"Structure\">\n              </td>\n          </tr>\n\n          <tr>\n              <td>Structure</td>\n              <td colspan=\"2\">\n                  <img\n                  src=\"../../../../../assets/backend/JavaSpring/structure2.png\"\n                  alt=\"structure2\"\n                  title=\"structure2\">\n              </td>\n          </tr>\n\n          <tr>\n              <td>JPA</td>\n              <td>\n                  Es un framework ORM. Es una especificación de Java, standar o serie de reglas que JAVA define para que cualquier framework que quiera interecatuar con una BD tiene que seguir, por medio de Anotaciones o Decoradores conecta la BD y evitamos hacer consultas de manera nativa o de manera SQL <br><br>\n                  <strong>@Entity</strong> para indicar que una clase java representa una tabla en la base de datos<br>\n                  <strong>@Table</strong> recible el nombre de la tabla<br>\n                  <strong>@Column</strong> se le pone a los atributos de la clase y se usa cuando los nombres entre la tabla y la entidad no coinciden<br>\n                  <strong>@Id y @EmbededId</strong> representan la clave primaria, id para sencilla y embeded para compuesta<br>\n                  <strong>@GeneratedValue</strong> genera valores automaticos para las llaves de las tablas<br>\n                  <strong>@OneToMany @ManyToOne</strong> permite representar relaciones<br>\n                  <u><a href=\"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.stored-procedures\">Procedimiento Almacenado</a></u><br><br>\n                  <strong>@Query</strong>(nativeQuery = true) o con la anotación <strong>@Procedure</strong>.<br>\n                  <strong>@Query (value = \" SELECT * FROM categorias WHERE id_categoria = ? \", nativeQuery = true ).</strong> Desde la interfaz del crud podemos implementar querys de manera nativa de esta manera<br>\n                  <strong>@Repository</strong> Con este le indicamos a JavaSpring que la clase va a interacturar con la BD por que en esta clase estaran definidos los metodos que operaran con los registros de la BD.<br>\n              </td>\n              <td></td>\n          </tr>\n\n\n          <tr>\n              <td><a href=\"https://platzi.com/clases/1996-java-spring/31508-query-methods/\"></a></td>\n              <td>\n                  ver mas info <a href=\"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods\">En el siguiente enlace</a>\n              </td>\n              <td>\n                  <img\n                  src=\"../../../../../assets/backend/JavaSpring/springData.png\"\n                  alt=\"springData\"\n                  title=\"springData\">\n              </td>\n          </tr>\n\n          <tr>\n              <td>build.gradle</td>\n              <td>\n                  Es este archivo estaran  <br><br>\n                  * los implementation que son la injeccion de dependencias o librerias que nos permite maven Reposory agregar al proyecto <br><br>\n                  * podemos indicar la BD <strong>runtimeOnly</strong> por que solo la necesitamos en tiempo de ejecucion y entre ' ' agregamos la dependencia que nos brinda maven repository para la BD <br>\n              </td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td><a href=\"https://platzi.com/clases/1996-java-spring/31505-crear-entity-cuando-su-clave-primaria-es-compuesta/\">llaves PK Compuestas</a></td>\n              <td>\n\n              </td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td><a href=\"https://platzi.com/clases/1996-java-spring/31510-que-es-el-patron-data-mapper-y-que-resuelve/\">patron Data mapper</a></td>\n              <td>\n                  Es la forma en la cual traducimos o convertimos una tabla en otra, esto con el fin de tener tablas definidas en termino de la persistencia con sus semejantes en termino de dominio <br><br>\n                  Con esto descoplamos la BD de la Api <br>\n                  mapeamos solo los campos que son necesarios y no todos los campo de las tablas ya que estos puede tener sentido de existencia en BD <br>\n                  De esta manera la Api podria cambiar de BD y no tendria conflicto con el codigo <br><br>\n                  Para usarlo debemos: <br><br>\n                  1. Descargarlo <a href=\"https://mapstruct.org/\">En la pagina oficial</a> <br><br>\n                  2. se debe instalar un plugin que autocompletara las structuras de mapstruc dentro de intellintIDea <a href=\"https://plugins.jetbrains.com/plugin/10036-mapstruct-support/versions\"><strong>Jet Brains</strong></a><br><br>\n\n                  Otra forma de instalar plugins en IntelliJ es ir a files > Settings o Ctrl + Alt + S / en Mac es con command + , (coma)\n                      En el panel izquierdo se selecciona \"plugins\"\n                      y solo queda buscar “MapStruct Support” e instalarlo\n              </td>\n              <td>\n                  <img\n                  src=\"../../../../../assets/backend/JavaSpring/mapStruct.PNG\"\n                  alt=\"mapStruct\"\n                  title=\"mapStruct\">\n              </td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td><a href=\"https://www.youtube.com/watch?v=vTu2HQrXtyw\">Base de datos</a></td>\n              <td>\n                Cuando en nuestro codigo estamos configurando la base de datos podemos indicar que al ejecutar el codigo este el back quien crea la BD o si la BD ya existe que la actualice <br><br>De la manera como lo indica la imagen <br><br>\n                <strong>spring.jpa.hibernate.ddl-auto=update/none</strong>\n              </td>\n              <td>\n                <img\n                src=\"../../../../../assets/backend/JavaSpring/CreateObjectDBEntity.png\"\n                alt=\"CreateObjectDBEntity\"\n                title=\"CreateObjectDBEntity\">\n              </td>\n          </tr>\n\n\n          <tr>\n              <td>Imagenes importantes curso JAVA spring <br>\n              <a href=\"https://github.com/lucasmoy-dev/Curso-de-Springboot-Hibernate/tree/main/src/main/java/com/cursojava/curso\">repositorio</a>\n              </td>\n              <td><img src=\"../../../../../assets/framework/javaSpring/MVC.png\" alt=\"MVC\"></td>\n              <td><img src=\"../../../../../assets/framework/javaSpring/estrutura.png\" alt=\"estrutura url\"></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n\n          <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n          </tr>\n      </tbody>\n  </table>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}